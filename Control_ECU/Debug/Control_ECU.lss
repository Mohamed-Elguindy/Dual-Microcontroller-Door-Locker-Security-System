
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002a36  00002aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800180  00800180  00002bea  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000155a  00000000  00000000  00005e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000074fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000076cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000096db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__vector_4>
      14:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__vector_9>
      28:	0c 94 37 12 	jmp	0x246e	; 0x246e <__vector_10>
      2c:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 07 	call	0xe42	; 0xe42 <main>
      8a:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <timerCallBack>:
UART_ConfigType uart={UART_8_BIT_DATA,UART_NO_PARITY,UART_ONE_STOP_BIT,9600};

void open_door(void);
void change_password(void);

void timerCallBack(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
    tick++;
     ca8:	80 91 a4 01 	lds	r24, 0x01A4
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	80 93 a4 01 	sts	0x01A4, r24
    if(tick == 3){
     cb2:	80 91 a4 01 	lds	r24, 0x01A4
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	49 f4       	brne	.+18     	; 0xccc <timerCallBack+0x2c>
        t_15s_flag =1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 a5 01 	sts	0x01A5, r24
        tick = 0;
     cc0:	10 92 a4 01 	sts	0x01A4, r1
        Timer_deInit(TIMER1);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <Timer_deInit>
     cca:	10 c0       	rjmp	.+32     	; 0xcec <timerCallBack+0x4c>
    }
    else if((Alarm_flag) && (tick == 12)){
     ccc:	80 91 a3 01 	lds	r24, 0x01A3
     cd0:	88 23       	and	r24, r24
     cd2:	61 f0       	breq	.+24     	; 0xcec <timerCallBack+0x4c>
     cd4:	80 91 a4 01 	lds	r24, 0x01A4
     cd8:	8c 30       	cpi	r24, 0x0C	; 12
     cda:	41 f4       	brne	.+16     	; 0xcec <timerCallBack+0x4c>
        t_60s_flag = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 a6 01 	sts	0x01A6, r24
        tick = 0;
     ce2:	10 92 a4 01 	sts	0x01A4, r1
        Timer_deInit(TIMER1);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	0e 94 72 11 	call	0x22e4	; 0x22e4 <Timer_deInit>
    }
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <savePasswordToEEPROM>:
void savePasswordToEEPROM(uint16 password[]) {
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	61 97       	sbiw	r28, 0x11	; 17
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	99 8b       	std	Y+17, r25	; 0x11
     d08:	88 8b       	std	Y+16, r24	; 0x10
    for (uint8 i = 0; i < pass_size; i++) {
     d0a:	1f 86       	std	Y+15, r1	; 0x0f
     d0c:	8d c0       	rjmp	.+282    	; 0xe28 <savePasswordToEEPROM+0x136>
        EEPROM_writeByte(EEPROM_START_ADDRESS + i, password[i]);
     d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	8f 5e       	subi	r24, 0xEF	; 239
     d16:	9c 4f       	sbci	r25, 0xFC	; 252
     d18:	ac 01       	movw	r20, r24
     d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9c 01       	movw	r18, r24
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	88 89       	ldd	r24, Y+16	; 0x10
     d28:	99 89       	ldd	r25, Y+17	; 0x11
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	80 81       	ld	r24, Z
     d32:	91 81       	ldd	r25, Z+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	ca 01       	movw	r24, r20
     d38:	62 2f       	mov	r22, r18
     d3a:	0e 94 87 0a 	call	0x150e	; 0x150e <EEPROM_writeByte>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e2       	ldi	r26, 0x20	; 32
     d44:	b1 e4       	ldi	r27, 0x41	; 65
     d46:	8b 87       	std	Y+11, r24	; 0x0b
     d48:	9c 87       	std	Y+12, r25	; 0x0c
     d4a:	ad 87       	std	Y+13, r26	; 0x0d
     d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d50:	7c 85       	ldd	r23, Y+12	; 0x0c
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a ef       	ldi	r20, 0xFA	; 250
     d5c:	54 e4       	ldi	r21, 0x44	; 68
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	8f 83       	std	Y+7, r24	; 0x07
     d68:	98 87       	std	Y+8, r25	; 0x08
     d6a:	a9 87       	std	Y+9, r26	; 0x09
     d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d6e:	6f 81       	ldd	r22, Y+7	; 0x07
     d70:	78 85       	ldd	r23, Y+8	; 0x08
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f e3       	ldi	r21, 0x3F	; 63
     d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d82:	88 23       	and	r24, r24
     d84:	2c f4       	brge	.+10     	; 0xd90 <savePasswordToEEPROM+0x9e>
		__ticks = 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	3f c0       	rjmp	.+126    	; 0xe0e <savePasswordToEEPROM+0x11c>
	else if (__tmp > 65535)
     d90:	6f 81       	ldd	r22, Y+7	; 0x07
     d92:	78 85       	ldd	r23, Y+8	; 0x08
     d94:	89 85       	ldd	r24, Y+9	; 0x09
     d96:	9a 85       	ldd	r25, Y+10	; 0x0a
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	4f e7       	ldi	r20, 0x7F	; 127
     d9e:	57 e4       	ldi	r21, 0x47	; 71
     da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da4:	18 16       	cp	r1, r24
     da6:	4c f5       	brge	.+82     	; 0xdfa <savePasswordToEEPROM+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	6b 85       	ldd	r22, Y+11	; 0x0b
     daa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dac:	8d 85       	ldd	r24, Y+13	; 0x0d
     dae:	9e 85       	ldd	r25, Y+14	; 0x0e
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	0f c0       	rjmp	.+30     	; 0xdf0 <savePasswordToEEPROM+0xfe>
     dd2:	88 ec       	ldi	r24, 0xC8	; 200
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <savePasswordToEEPROM+0xec>
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	69 f7       	brne	.-38     	; 0xdd2 <savePasswordToEEPROM+0xe0>
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <savePasswordToEEPROM+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <savePasswordToEEPROM+0x128>
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
        tick = 0;
        Timer_deInit(TIMER1);
    }
}
void savePasswordToEEPROM(uint16 password[]) {
    for (uint8 i = 0; i < pass_size; i++) {
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	8f 87       	std	Y+15, r24	; 0x0f
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	85 30       	cpi	r24, 0x05	; 5
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <savePasswordToEEPROM+0x13e>
     e2e:	6f cf       	rjmp	.-290    	; 0xd0e <savePasswordToEEPROM+0x1c>
        EEPROM_writeByte(EEPROM_START_ADDRESS + i, password[i]);
        _delay_ms(10);  // Small delay for EEPROM write stability
    }
}
     e30:	61 96       	adiw	r28, 0x11	; 17
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <main>:

int main(void) {
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	61 97       	sbiw	r28, 0x11	; 17
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
    Timer0_INIT_PWM();
     e5a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <Timer0_INIT_PWM>
    DcMotor_Init();
     e5e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DcMotor_Init>
    PIR_init();
     e62:	0e 94 44 10 	call	0x2088	; 0x2088 <PIR_init>
    Buzzer_init();
     e66:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Buzzer_init>

    UART_ConfigType uart = {UART_8_BIT_DATA, UART_NO_PARITY, UART_ONE_STOP_BIT, 9600};
     e6a:	9e 01       	movw	r18, r28
     e6c:	2c 5f       	subi	r18, 0xFC	; 252
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	3e 87       	std	Y+14, r19	; 0x0e
     e72:	2d 87       	std	Y+13, r18	; 0x0d
     e74:	88 e7       	ldi	r24, 0x78	; 120
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	98 8b       	std	Y+16, r25	; 0x10
     e7a:	8f 87       	std	Y+15, r24	; 0x0f
     e7c:	97 e0       	ldi	r25, 0x07	; 7
     e7e:	99 8b       	std	Y+17, r25	; 0x11
     e80:	ef 85       	ldd	r30, Y+15	; 0x0f
     e82:	f8 89       	ldd	r31, Y+16	; 0x10
     e84:	00 80       	ld	r0, Z
     e86:	2f 85       	ldd	r18, Y+15	; 0x0f
     e88:	38 89       	ldd	r19, Y+16	; 0x10
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	38 8b       	std	Y+16, r19	; 0x10
     e90:	2f 87       	std	Y+15, r18	; 0x0f
     e92:	ed 85       	ldd	r30, Y+13	; 0x0d
     e94:	fe 85       	ldd	r31, Y+14	; 0x0e
     e96:	00 82       	st	Z, r0
     e98:	2d 85       	ldd	r18, Y+13	; 0x0d
     e9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	3e 87       	std	Y+14, r19	; 0x0e
     ea2:	2d 87       	std	Y+13, r18	; 0x0d
     ea4:	39 89       	ldd	r19, Y+17	; 0x11
     ea6:	31 50       	subi	r19, 0x01	; 1
     ea8:	39 8b       	std	Y+17, r19	; 0x11
     eaa:	89 89       	ldd	r24, Y+17	; 0x11
     eac:	88 23       	and	r24, r24
     eae:	41 f7       	brne	.-48     	; 0xe80 <main+0x3e>


    UART_init(&uart);
     eb0:	ce 01       	movw	r24, r28
     eb2:	04 96       	adiw	r24, 0x04	; 4
     eb4:	0e 94 bd 13 	call	0x277a	; 0x277a <UART_init>
    sei();
     eb8:	78 94       	sei

    while (1) {
        switch (step) {
     eba:	80 91 69 01 	lds	r24, 0x0169
     ebe:	e8 2f       	mov	r30, r24
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	fc 87       	std	Y+12, r31	; 0x0c
     ec4:	eb 87       	std	Y+11, r30	; 0x0b
     ec6:	2b 85       	ldd	r18, Y+11	; 0x0b
     ec8:	3c 85       	ldd	r19, Y+12	; 0x0c
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	11 f1       	breq	.+68     	; 0xf14 <main+0xd2>
     ed0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ed2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <main+0x9a>
     eda:	67 c0       	rjmp	.+206    	; 0xfaa <main+0x168>
     edc:	eb 85       	ldd	r30, Y+11	; 0x0b
     ede:	fc 85       	ldd	r31, Y+12	; 0x0c
     ee0:	e1 30       	cpi	r30, 0x01	; 1
     ee2:	f1 05       	cpc	r31, r1
     ee4:	51 f7       	brne	.-44     	; 0xeba <main+0x78>
            case 1:
                for (char i = 0; i < pass_size; i++) {
     ee6:	1b 82       	std	Y+3, r1	; 0x03
     ee8:	0c c0       	rjmp	.+24     	; 0xf02 <main+0xc0>
                    recived_password_1[i] = UART_recieveByte();
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	08 2f       	mov	r16, r24
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
     ef4:	f8 01       	movw	r30, r16
     ef6:	e0 58       	subi	r30, 0x80	; 128
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	80 83       	st	Z, r24
    sei();

    while (1) {
        switch (step) {
            case 1:
                for (char i = 0; i < pass_size; i++) {
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	85 30       	cpi	r24, 0x05	; 5
     f06:	88 f3       	brcs	.-30     	; 0xeea <main+0xa8>
                    recived_password_1[i] = UART_recieveByte();
                }
                step++;
     f08:	80 91 69 01 	lds	r24, 0x0169
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	80 93 69 01 	sts	0x0169, r24
     f12:	d3 cf       	rjmp	.-90     	; 0xeba <main+0x78>
                break;

            case 2:
                for (char i = 0; i < 5; i++) {
     f14:	1a 82       	std	Y+2, r1	; 0x02
     f16:	0c c0       	rjmp	.+24     	; 0xf30 <main+0xee>
                    recived_password_2[i] = UART_recieveByte();
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	08 2f       	mov	r16, r24
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
     f22:	f8 01       	movw	r30, r16
     f24:	eb 57       	subi	r30, 0x7B	; 123
     f26:	fe 4f       	sbci	r31, 0xFE	; 254
     f28:	80 83       	st	Z, r24
                }
                step++;
                break;

            case 2:
                for (char i = 0; i < 5; i++) {
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	8a 83       	std	Y+2, r24	; 0x02
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	85 30       	cpi	r24, 0x05	; 5
     f34:	88 f3       	brcs	.-30     	; 0xf18 <main+0xd6>
                    recived_password_2[i] = UART_recieveByte();
                }
                for (char i = 0; i < 5; i++) {
     f36:	19 82       	std	Y+1, r1	; 0x01
     f38:	16 c0       	rjmp	.+44     	; 0xf66 <main+0x124>
                    if (recived_password_1[i] != recived_password_2[i]) {
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	fc 01       	movw	r30, r24
     f42:	e0 58       	subi	r30, 0x80	; 128
     f44:	fe 4f       	sbci	r31, 0xFE	; 254
     f46:	20 81       	ld	r18, Z
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	fc 01       	movw	r30, r24
     f50:	eb 57       	subi	r30, 0x7B	; 123
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	80 81       	ld	r24, Z
     f56:	28 17       	cp	r18, r24
     f58:	19 f0       	breq	.+6      	; 0xf60 <main+0x11e>
                        flag = 0;
     f5a:	10 92 68 01 	sts	0x0168, r1
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <main+0x12a>

            case 2:
                for (char i = 0; i < 5; i++) {
                    recived_password_2[i] = UART_recieveByte();
                }
                for (char i = 0; i < 5; i++) {
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	85 30       	cpi	r24, 0x05	; 5
     f6a:	38 f3       	brcs	.-50     	; 0xf3a <main+0xf8>
                    if (recived_password_1[i] != recived_password_2[i]) {
                        flag = 0;
                        break;
                    }
                }
                if (flag == 1) {
     f6c:	80 91 68 01 	lds	r24, 0x0168
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	89 f4       	brne	.+34     	; 0xf96 <main+0x154>
                    step++;
     f74:	80 91 69 01 	lds	r24, 0x0169
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	80 93 69 01 	sts	0x0169, r24
                    UART_sendByte(1);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
                    EEPROM_writeData(EEPROM_START_ADDRESS,recived_password_1,pass_size);
     f84:	20 e8       	ldi	r18, 0x80	; 128
     f86:	31 e0       	ldi	r19, 0x01	; 1
     f88:	81 e1       	ldi	r24, 0x11	; 17
     f8a:	93 e0       	ldi	r25, 0x03	; 3
     f8c:	b9 01       	movw	r22, r18
     f8e:	45 e0       	ldi	r20, 0x05	; 5
     f90:	0e 94 28 0b 	call	0x1650	; 0x1650 <EEPROM_writeData>
     f94:	92 cf       	rjmp	.-220    	; 0xeba <main+0x78>
                } else {
                    step = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 69 01 	sts	0x0169, r24
                    flag = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 68 01 	sts	0x0168, r24
                    UART_sendByte(0);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
     fa8:	88 cf       	rjmp	.-240    	; 0xeba <main+0x78>
                }
                break;

            case 3:
                if (UART_recieveByte() == '+') {
     faa:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
     fae:	8b 32       	cpi	r24, 0x2B	; 43
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <main+0x172>
     fb2:	4c c0       	rjmp	.+152    	; 0x104c <main+0x20a>
                	open_door();
     fb4:	0e 94 29 08 	call	0x1052	; 0x1052 <open_door>
                	if(wrong_pass_counter>2){
     fb8:	80 91 a7 01 	lds	r24, 0x01A7
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <main+0x180>
     fc0:	7c cf       	rjmp	.-264    	; 0xeba <main+0x78>
                	    Buzzer_on();
     fc2:	0e 94 6f 0a 	call	0x14de	; 0x14de <Buzzer_on>
                	    Timer_setCallBack(timerCallBack,TIMER1);
     fc6:	80 e5       	ldi	r24, 0x50	; 80
     fc8:	96 e0       	ldi	r25, 0x06	; 6
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
                	    Timer_init(&timer);
     fd0:	8a e6       	ldi	r24, 0x6A	; 106
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
                	    while(t_15s_flag!=1){}
     fd8:	80 91 a5 01 	lds	r24, 0x01A5
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <main+0x196>
                	    t_15s_flag=0;
     fe0:	10 92 a5 01 	sts	0x01A5, r1
                	    Timer_setCallBack(timerCallBack,TIMER1);
     fe4:	80 e5       	ldi	r24, 0x50	; 80
     fe6:	96 e0       	ldi	r25, 0x06	; 6
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
                	    Timer_init(&timer);
     fee:	8a e6       	ldi	r24, 0x6A	; 106
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
                	    while(t_15s_flag!=1){}
     ff6:	80 91 a5 01 	lds	r24, 0x01A5
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <main+0x1b4>
                	    t_15s_flag=0;
     ffe:	10 92 a5 01 	sts	0x01A5, r1
                	    Timer_setCallBack(timerCallBack,TIMER1);
    1002:	80 e5       	ldi	r24, 0x50	; 80
    1004:	96 e0       	ldi	r25, 0x06	; 6
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
                	    Timer_init(&timer);
    100c:	8a e6       	ldi	r24, 0x6A	; 106
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
                	    while(t_15s_flag!=1){}
    1014:	80 91 a5 01 	lds	r24, 0x01A5
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	e1 f7       	brne	.-8      	; 0x1014 <main+0x1d2>
                	    t_15s_flag=0;
    101c:	10 92 a5 01 	sts	0x01A5, r1
                	    Timer_setCallBack(timerCallBack,TIMER1);
    1020:	80 e5       	ldi	r24, 0x50	; 80
    1022:	96 e0       	ldi	r25, 0x06	; 6
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
                	    Timer_init(&timer);
    102a:	8a e6       	ldi	r24, 0x6A	; 106
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
                	    while(t_15s_flag!=1){}
    1032:	80 91 a5 01 	lds	r24, 0x01A5
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	e1 f7       	brne	.-8      	; 0x1032 <main+0x1f0>
                	    t_15s_flag=0;
    103a:	10 92 a5 01 	sts	0x01A5, r1
                	    Buzzer_off();
    103e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Buzzer_off>
                	    Alarm_flag=0;
    1042:	10 92 a3 01 	sts	0x01A3, r1
                		/*Buzzer_on();
                		_delay_ms(6000);
                		Buzzer_off();*/
                		wrong_pass_counter=0;
    1046:	10 92 a7 01 	sts	0x01A7, r1
    104a:	37 cf       	rjmp	.-402    	; 0xeba <main+0x78>
                	}
                }
                else //(UART_recieveByte() == '-') {
                	change_password();
    104c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <change_password>
    1050:	34 cf       	rjmp	.-408    	; 0xeba <main+0x78>

00001052 <open_door>:
                break;
        }
    }
}

void open_door(void) {
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <open_door+0xa>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    if (wrong_pass_counter > 2) {
    1060:	80 91 a7 01 	lds	r24, 0x01A7
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	08 f4       	brcc	.+2      	; 0x106a <open_door+0x18>
    1068:	2a c1       	rjmp	.+596    	; 0x12be <open_door+0x26c>
        /*Buzzer_on();
        _delay_ms(6000);
        Buzzer_off();*/
	    Buzzer_on();
    106a:	0e 94 6f 0a 	call	0x14de	; 0x14de <Buzzer_on>
	    Timer_setCallBack(timerCallBack,TIMER1);
    106e:	80 e5       	ldi	r24, 0x50	; 80
    1070:	96 e0       	ldi	r25, 0x06	; 6
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    1078:	8a e6       	ldi	r24, 0x6A	; 106
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    1080:	80 91 a5 01 	lds	r24, 0x01A5
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	e1 f7       	brne	.-8      	; 0x1080 <open_door+0x2e>
	    t_15s_flag=0;
    1088:	10 92 a5 01 	sts	0x01A5, r1
	    Timer_setCallBack(timerCallBack,TIMER1);
    108c:	80 e5       	ldi	r24, 0x50	; 80
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    1096:	8a e6       	ldi	r24, 0x6A	; 106
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    109e:	80 91 a5 01 	lds	r24, 0x01A5
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	e1 f7       	brne	.-8      	; 0x109e <open_door+0x4c>
	    t_15s_flag=0;
    10a6:	10 92 a5 01 	sts	0x01A5, r1
	    Timer_setCallBack(timerCallBack,TIMER1);
    10aa:	80 e5       	ldi	r24, 0x50	; 80
    10ac:	96 e0       	ldi	r25, 0x06	; 6
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    10b4:	8a e6       	ldi	r24, 0x6A	; 106
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    10bc:	80 91 a5 01 	lds	r24, 0x01A5
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <open_door+0x6a>
	    t_15s_flag=0;
    10c4:	10 92 a5 01 	sts	0x01A5, r1
	    Timer_setCallBack(timerCallBack,TIMER1);
    10c8:	80 e5       	ldi	r24, 0x50	; 80
    10ca:	96 e0       	ldi	r25, 0x06	; 6
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    10d2:	8a e6       	ldi	r24, 0x6A	; 106
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    10da:	80 91 a5 01 	lds	r24, 0x01A5
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	e1 f7       	brne	.-8      	; 0x10da <open_door+0x88>
	    t_15s_flag=0;
    10e2:	10 92 a5 01 	sts	0x01A5, r1
	    Buzzer_off();
    10e6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Buzzer_off>
	    Alarm_flag=0;
    10ea:	10 92 a3 01 	sts	0x01A3, r1
        wrong_pass_counter = 0;
    10ee:	10 92 a7 01 	sts	0x01A7, r1
    10f2:	ea c0       	rjmp	.+468    	; 0x12c8 <open_door+0x276>
        return;
    } else {
        while (wrong_pass_counter <= 2) {
            flag = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 68 01 	sts	0x0168, r24

            for (char i = 0; i < 5; i++) {
    10fa:	1a 82       	std	Y+2, r1	; 0x02
    10fc:	2c c0       	rjmp	.+88     	; 0x1156 <open_door+0x104>
                if (wrong_pass_counter == 0)
    10fe:	80 91 a7 01 	lds	r24, 0x01A7
    1102:	88 23       	and	r24, r24
    1104:	51 f4       	brne	.+20     	; 0x111a <open_door+0xc8>
                    recived_password_3[i] = UART_recieveByte();
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	08 2f       	mov	r16, r24
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    1110:	f8 01       	movw	r30, r16
    1112:	e6 57       	subi	r30, 0x76	; 118
    1114:	fe 4f       	sbci	r31, 0xFE	; 254
    1116:	80 83       	st	Z, r24
    1118:	1b c0       	rjmp	.+54     	; 0x1150 <open_door+0xfe>
                else if (wrong_pass_counter == 1)
    111a:	80 91 a7 01 	lds	r24, 0x01A7
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	51 f4       	brne	.+20     	; 0x1136 <open_door+0xe4>
                    recived_password_3_1[i] = UART_recieveByte();
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	08 2f       	mov	r16, r24
    1126:	10 e0       	ldi	r17, 0x00	; 0
    1128:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    112c:	f8 01       	movw	r30, r16
    112e:	e1 57       	subi	r30, 0x71	; 113
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 83       	st	Z, r24
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <open_door+0xfe>
                else if (wrong_pass_counter == 2)
    1136:	80 91 a7 01 	lds	r24, 0x01A7
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	49 f4       	brne	.+18     	; 0x1150 <open_door+0xfe>
                    recived_password_3_2[i] = UART_recieveByte();
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	08 2f       	mov	r16, r24
    1142:	10 e0       	ldi	r17, 0x00	; 0
    1144:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    1148:	f8 01       	movw	r30, r16
    114a:	ec 56       	subi	r30, 0x6C	; 108
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	80 83       	st	Z, r24
        return;
    } else {
        while (wrong_pass_counter <= 2) {
            flag = 1;

            for (char i = 0; i < 5; i++) {
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	85 30       	cpi	r24, 0x05	; 5
    115a:	88 f2       	brcs	.-94     	; 0x10fe <open_door+0xac>
                    recived_password_3_1[i] = UART_recieveByte();
                else if (wrong_pass_counter == 2)
                    recived_password_3_2[i] = UART_recieveByte();
            }

            EEPROM_readData(EEPROM_START_ADDRESS, saved_password, pass_size);
    115c:	2e e9       	ldi	r18, 0x9E	; 158
    115e:	31 e0       	ldi	r19, 0x01	; 1
    1160:	81 e1       	ldi	r24, 0x11	; 17
    1162:	93 e0       	ldi	r25, 0x03	; 3
    1164:	b9 01       	movw	r22, r18
    1166:	45 e0       	ldi	r20, 0x05	; 5
    1168:	0e 94 82 0b 	call	0x1704	; 0x1704 <EEPROM_readData>
            saved_password[pass_size] = '\0';
    116c:	10 92 a3 01 	sts	0x01A3, r1

            for (char i = 0; i < 5; i++) {
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	48 c0       	rjmp	.+144    	; 0x1204 <open_door+0x1b2>
                if (wrong_pass_counter == 0) {
    1174:	80 91 a7 01 	lds	r24, 0x01A7
    1178:	88 23       	and	r24, r24
    117a:	99 f4       	brne	.+38     	; 0x11a2 <open_door+0x150>
                    if (recived_password_3[i] != saved_password[i]) {
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	fc 01       	movw	r30, r24
    1184:	e6 57       	subi	r30, 0x76	; 118
    1186:	fe 4f       	sbci	r31, 0xFE	; 254
    1188:	20 81       	ld	r18, Z
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	fc 01       	movw	r30, r24
    1192:	e2 56       	subi	r30, 0x62	; 98
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	80 81       	ld	r24, Z
    1198:	28 17       	cp	r18, r24
    119a:	89 f1       	breq	.+98     	; 0x11fe <open_door+0x1ac>
                        flag = 0;
    119c:	10 92 68 01 	sts	0x0168, r1
    11a0:	35 c0       	rjmp	.+106    	; 0x120c <open_door+0x1ba>
                        break;
                    }
                } else if (wrong_pass_counter == 1) {
    11a2:	80 91 a7 01 	lds	r24, 0x01A7
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	99 f4       	brne	.+38     	; 0x11d0 <open_door+0x17e>
                    if (recived_password_3_1[i] != saved_password[i]) {
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	e1 57       	subi	r30, 0x71	; 113
    11b4:	fe 4f       	sbci	r31, 0xFE	; 254
    11b6:	20 81       	ld	r18, Z
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	fc 01       	movw	r30, r24
    11c0:	e2 56       	subi	r30, 0x62	; 98
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	80 81       	ld	r24, Z
    11c6:	28 17       	cp	r18, r24
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <open_door+0x1ac>
                        flag = 0;
    11ca:	10 92 68 01 	sts	0x0168, r1
    11ce:	1e c0       	rjmp	.+60     	; 0x120c <open_door+0x1ba>
                        break;
                    }
                } else if (wrong_pass_counter == 2) {
    11d0:	80 91 a7 01 	lds	r24, 0x01A7
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	99 f4       	brne	.+38     	; 0x11fe <open_door+0x1ac>
                    if (recived_password_3_2[i] != saved_password[i]) {
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	fc 01       	movw	r30, r24
    11e0:	ec 56       	subi	r30, 0x6C	; 108
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	20 81       	ld	r18, Z
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	e2 56       	subi	r30, 0x62	; 98
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	80 81       	ld	r24, Z
    11f4:	28 17       	cp	r18, r24
    11f6:	19 f0       	breq	.+6      	; 0x11fe <open_door+0x1ac>
                        flag = 0;
    11f8:	10 92 68 01 	sts	0x0168, r1
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <open_door+0x1ba>
            }

            EEPROM_readData(EEPROM_START_ADDRESS, saved_password, pass_size);
            saved_password[pass_size] = '\0';

            for (char i = 0; i < 5; i++) {
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	8f 5f       	subi	r24, 0xFF	; 255
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	85 30       	cpi	r24, 0x05	; 5
    1208:	08 f4       	brcc	.+2      	; 0x120c <open_door+0x1ba>
    120a:	b4 cf       	rjmp	.-152    	; 0x1174 <open_door+0x122>
                        break;
                    }
                }
            }

            if (flag == 1) {
    120c:	80 91 68 01 	lds	r24, 0x0168
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	09 f0       	breq	.+2      	; 0x1216 <open_door+0x1c4>
    1214:	44 c0       	rjmp	.+136    	; 0x129e <open_door+0x24c>
                UART_sendByte(1);
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
                DcMotor_Rotate(CW, 100);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	64 e6       	ldi	r22, 0x64	; 100
    1220:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DcMotor_Rotate>
        	    Timer_setCallBack(timerCallBack,TIMER1);
    1224:	80 e5       	ldi	r24, 0x50	; 80
    1226:	96 e0       	ldi	r25, 0x06	; 6
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
        	    Timer_init(&timer);
    122e:	8a e6       	ldi	r24, 0x6A	; 106
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
        	    while(t_15s_flag!=1){}
    1236:	80 91 a5 01 	lds	r24, 0x01A5
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	e1 f7       	brne	.-8      	; 0x1236 <open_door+0x1e4>
        	    t_15s_flag=0;
    123e:	10 92 a5 01 	sts	0x01A5, r1
                DcMotor_Rotate(STOP, 0);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DcMotor_Rotate>
    124a:	07 c0       	rjmp	.+14     	; 0x125a <open_door+0x208>

                while (PIR_getState()) {
                    DcMotor_Rotate(STOP, 0);
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DcMotor_Rotate>
                    UART_sendByte('p');
    1254:	80 e7       	ldi	r24, 0x70	; 112
    1256:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
        	    Timer_init(&timer);
        	    while(t_15s_flag!=1){}
        	    t_15s_flag=0;
                DcMotor_Rotate(STOP, 0);

                while (PIR_getState()) {
    125a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <PIR_getState>
    125e:	88 23       	and	r24, r24
    1260:	a9 f7       	brne	.-22     	; 0x124c <open_door+0x1fa>
                    DcMotor_Rotate(STOP, 0);
                    UART_sendByte('p');
                }
                UART_sendByte('l');
    1262:	8c e6       	ldi	r24, 0x6C	; 108
    1264:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
                DcMotor_Rotate(ACW, 100);
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	64 e6       	ldi	r22, 0x64	; 100
    126c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DcMotor_Rotate>
        	    Timer_setCallBack(timerCallBack,TIMER1);
    1270:	80 e5       	ldi	r24, 0x50	; 80
    1272:	96 e0       	ldi	r25, 0x06	; 6
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
        	    Timer_init(&timer);
    127a:	8a e6       	ldi	r24, 0x6A	; 106
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
        	    while(t_15s_flag!=1){}
    1282:	80 91 a5 01 	lds	r24, 0x01A5
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	e1 f7       	brne	.-8      	; 0x1282 <open_door+0x230>
        	    t_15s_flag=0;
    128a:	10 92 a5 01 	sts	0x01A5, r1
                DcMotor_Rotate(STOP, 0);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <DcMotor_Rotate>
                step = 3;
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	80 93 69 01 	sts	0x0169, r24
    129c:	15 c0       	rjmp	.+42     	; 0x12c8 <open_door+0x276>
                return;
            } else if (flag == 0) {
    129e:	80 91 68 01 	lds	r24, 0x0168
    12a2:	88 23       	and	r24, r24
    12a4:	61 f4       	brne	.+24     	; 0x12be <open_door+0x26c>
                UART_sendByte(0);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
                ++wrong_pass_counter;
    12ac:	80 91 a7 01 	lds	r24, 0x01A7
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	80 93 a7 01 	sts	0x01A7, r24
                flag = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 68 01 	sts	0x0168, r24
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <open_door+0x276>
	    Buzzer_off();
	    Alarm_flag=0;
        wrong_pass_counter = 0;
        return;
    } else {
        while (wrong_pass_counter <= 2) {
    12be:	80 91 a7 01 	lds	r24, 0x01A7
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	08 f4       	brcc	.+2      	; 0x12c8 <open_door+0x276>
    12c6:	16 cf       	rjmp	.-468    	; 0x10f4 <open_door+0xa2>
                flag = 1;
                return;
            }
        }
    }
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <change_password>:
	Buzzer_on();
	_delay_ms(6000);
	Buzzer_off();
	wrong_pass_counter=0;
}*/
void change_password(void){
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <change_password+0xa>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	if(wrong_pass_counter>2){
    12e4:	80 91 a7 01 	lds	r24, 0x01A7
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <change_password+0x18>
    12ec:	43 c0       	rjmp	.+134    	; 0x1374 <change_password+0x9e>
	    Buzzer_on();
    12ee:	0e 94 6f 0a 	call	0x14de	; 0x14de <Buzzer_on>
	    Timer_setCallBack(timerCallBack,TIMER1);
    12f2:	80 e5       	ldi	r24, 0x50	; 80
    12f4:	96 e0       	ldi	r25, 0x06	; 6
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    12fc:	8a e6       	ldi	r24, 0x6A	; 106
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    1304:	80 91 a5 01 	lds	r24, 0x01A5
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	e1 f7       	brne	.-8      	; 0x1304 <change_password+0x2e>
	    t_15s_flag=0;
    130c:	10 92 a5 01 	sts	0x01A5, r1
	    Timer_setCallBack(timerCallBack,TIMER1);
    1310:	80 e5       	ldi	r24, 0x50	; 80
    1312:	96 e0       	ldi	r25, 0x06	; 6
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    131a:	8a e6       	ldi	r24, 0x6A	; 106
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    1322:	80 91 a5 01 	lds	r24, 0x01A5
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	e1 f7       	brne	.-8      	; 0x1322 <change_password+0x4c>
	    t_15s_flag=0;
    132a:	10 92 a5 01 	sts	0x01A5, r1
	    Timer_setCallBack(timerCallBack,TIMER1);
    132e:	80 e5       	ldi	r24, 0x50	; 80
    1330:	96 e0       	ldi	r25, 0x06	; 6
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    1338:	8a e6       	ldi	r24, 0x6A	; 106
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    1340:	80 91 a5 01 	lds	r24, 0x01A5
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	e1 f7       	brne	.-8      	; 0x1340 <change_password+0x6a>
	    t_15s_flag=0;
    1348:	10 92 a5 01 	sts	0x01A5, r1
	    Timer_setCallBack(timerCallBack,TIMER1);
    134c:	80 e5       	ldi	r24, 0x50	; 80
    134e:	96 e0       	ldi	r25, 0x06	; 6
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
	    Timer_init(&timer);
    1356:	8a e6       	ldi	r24, 0x6A	; 106
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
	    while(t_15s_flag!=1){}
    135e:	80 91 a5 01 	lds	r24, 0x01A5
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	e1 f7       	brne	.-8      	; 0x135e <change_password+0x88>
	    t_15s_flag=0;
    1366:	10 92 a5 01 	sts	0x01A5, r1
	    Buzzer_off();
    136a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Buzzer_off>
		wrong_pass_counter=0;
    136e:	10 92 a7 01 	sts	0x01A7, r1
    1372:	9d c0       	rjmp	.+314    	; 0x14ae <change_password+0x1d8>
	}
	else{
	while(wrong_pass_counter<=2){
    1374:	80 91 a7 01 	lds	r24, 0x01A7
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	08 f0       	brcs	.+2      	; 0x137e <change_password+0xa8>
    137c:	98 c0       	rjmp	.+304    	; 0x14ae <change_password+0x1d8>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 68 01 	sts	0x0168, r24
		for (char i = 0; i < 5; i++){
    1384:	1a 82       	std	Y+2, r1	; 0x02
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <change_password+0xca>
			change[i]=UART_recieveByte();
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	08 2f       	mov	r16, r24
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    1392:	f8 01       	movw	r30, r16
    1394:	e7 56       	subi	r30, 0x67	; 103
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	80 83       	st	Z, r24
		wrong_pass_counter=0;
	}
	else{
	while(wrong_pass_counter<=2){
		flag=1;
		for (char i = 0; i < 5; i++){
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	85 30       	cpi	r24, 0x05	; 5
    13a4:	88 f3       	brcs	.-30     	; 0x1388 <change_password+0xb2>
			change[i]=UART_recieveByte();
		}
        EEPROM_readData(EEPROM_START_ADDRESS,saved_password, pass_size);
    13a6:	2e e9       	ldi	r18, 0x9E	; 158
    13a8:	31 e0       	ldi	r19, 0x01	; 1
    13aa:	81 e1       	ldi	r24, 0x11	; 17
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	b9 01       	movw	r22, r18
    13b0:	45 e0       	ldi	r20, 0x05	; 5
    13b2:	0e 94 82 0b 	call	0x1704	; 0x1704 <EEPROM_readData>
        saved_password[pass_size] = '\0';
    13b6:	10 92 a3 01 	sts	0x01A3, r1
        for (char i = 0; i < 5; i++) {
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <change_password+0x114>
        	if(change[i]!=saved_password[i]){
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	fc 01       	movw	r30, r24
    13c6:	e7 56       	subi	r30, 0x67	; 103
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	20 81       	ld	r18, Z
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	fc 01       	movw	r30, r24
    13d4:	e2 56       	subi	r30, 0x62	; 98
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	80 81       	ld	r24, Z
    13da:	28 17       	cp	r18, r24
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <change_password+0x10e>
        		flag=0;
    13de:	10 92 68 01 	sts	0x0168, r1
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <change_password+0x11a>
		for (char i = 0; i < 5; i++){
			change[i]=UART_recieveByte();
		}
        EEPROM_readData(EEPROM_START_ADDRESS,saved_password, pass_size);
        saved_password[pass_size] = '\0';
        for (char i = 0; i < 5; i++) {
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	85 30       	cpi	r24, 0x05	; 5
    13ee:	38 f3       	brcs	.-50     	; 0x13be <change_password+0xe8>
        	if(change[i]!=saved_password[i]){
        		flag=0;
        		break;
        	}
        }
        if (flag == 1) {
    13f0:	80 91 68 01 	lds	r24, 0x0168
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	49 f4       	brne	.+18     	; 0x140a <change_password+0x134>
        	wrong_pass_counter = 0;
    13f8:	10 92 a7 01 	sts	0x01A7, r1
        	UART_sendByte(1);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
            step = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 69 01 	sts	0x0169, r24
    1408:	52 c0       	rjmp	.+164    	; 0x14ae <change_password+0x1d8>
            return;
        }
        else{
        	UART_sendByte(0);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
        	wrong_pass_counter++;
    1410:	80 91 a7 01 	lds	r24, 0x01A7
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	80 93 a7 01 	sts	0x01A7, r24
        	flag=1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 68 01 	sts	0x0168, r24
        	if(wrong_pass_counter>2){
    1420:	80 91 a7 01 	lds	r24, 0x01A7
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	08 f4       	brcc	.+2      	; 0x142a <change_password+0x154>
    1428:	42 c0       	rjmp	.+132    	; 0x14ae <change_password+0x1d8>
        	    Buzzer_on();
    142a:	0e 94 6f 0a 	call	0x14de	; 0x14de <Buzzer_on>
        	    Timer_setCallBack(timerCallBack,TIMER1);
    142e:	80 e5       	ldi	r24, 0x50	; 80
    1430:	96 e0       	ldi	r25, 0x06	; 6
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
        	    Timer_init(&timer);
    1438:	8a e6       	ldi	r24, 0x6A	; 106
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
        	    while(t_15s_flag!=1){}
    1440:	80 91 a5 01 	lds	r24, 0x01A5
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	e1 f7       	brne	.-8      	; 0x1440 <change_password+0x16a>
        	    t_15s_flag=0;
    1448:	10 92 a5 01 	sts	0x01A5, r1
        	    Timer_setCallBack(timerCallBack,TIMER1);
    144c:	80 e5       	ldi	r24, 0x50	; 80
    144e:	96 e0       	ldi	r25, 0x06	; 6
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
        	    Timer_init(&timer);
    1456:	8a e6       	ldi	r24, 0x6A	; 106
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
        	    while(t_15s_flag!=1){}
    145e:	80 91 a5 01 	lds	r24, 0x01A5
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	e1 f7       	brne	.-8      	; 0x145e <change_password+0x188>
        	    t_15s_flag=0;
    1466:	10 92 a5 01 	sts	0x01A5, r1
        	    Timer_setCallBack(timerCallBack,TIMER1);
    146a:	80 e5       	ldi	r24, 0x50	; 80
    146c:	96 e0       	ldi	r25, 0x06	; 6
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
        	    Timer_init(&timer);
    1474:	8a e6       	ldi	r24, 0x6A	; 106
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
        	    while(t_15s_flag!=1){}
    147c:	80 91 a5 01 	lds	r24, 0x01A5
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	e1 f7       	brne	.-8      	; 0x147c <change_password+0x1a6>
        	    t_15s_flag=0;
    1484:	10 92 a5 01 	sts	0x01A5, r1
        	    Timer_setCallBack(timerCallBack,TIMER1);
    1488:	80 e5       	ldi	r24, 0x50	; 80
    148a:	96 e0       	ldi	r25, 0x06	; 6
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 cb 11 	call	0x2396	; 0x2396 <Timer_setCallBack>
        	    Timer_init(&timer);
    1492:	8a e6       	ldi	r24, 0x6A	; 106
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	0e 94 a0 10 	call	0x2140	; 0x2140 <Timer_init>
        	    while(t_15s_flag!=1){}
    149a:	80 91 a5 01 	lds	r24, 0x01A5
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	e1 f7       	brne	.-8      	; 0x149a <change_password+0x1c4>
        	    t_15s_flag=0;
    14a2:	10 92 a5 01 	sts	0x01A5, r1
        	    Buzzer_off();
    14a6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Buzzer_off>
        		wrong_pass_counter=0;
    14aa:	10 92 a7 01 	sts	0x01A7, r1
	}
	}



}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	08 95       	ret

000014bc <Buzzer_init>:
 *      Author: MOH
 */
#include "common_macros.h"
#include "gpio.h"
#include "buzzer.h"
void Buzzer_init(void){
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	67 e0       	ldi	r22, 0x07	; 7
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW);
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <Buzzer_on>:
void Buzzer_on(void){
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	67 e0       	ldi	r22, 0x07	; 7
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <Buzzer_off>:
void Buzzer_off(void){
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	67 e0       	ldi	r22, 0x07	; 7
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <EEPROM_writeByte+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <EEPROM_writeByte+0x8>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1520:	0e 94 56 13 	call	0x26ac	; 0x26ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1524:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	11 f0       	breq	.+4      	; 0x1530 <EEPROM_writeByte+0x22>
        return ERROR;
    152c:	1c 82       	std	Y+4, r1	; 0x04
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	80 70       	andi	r24, 0x00	; 0
    1536:	97 70       	andi	r25, 0x07	; 7
    1538:	88 0f       	add	r24, r24
    153a:	89 2f       	mov	r24, r25
    153c:	88 1f       	adc	r24, r24
    153e:	99 0b       	sbc	r25, r25
    1540:	91 95       	neg	r25
    1542:	80 6a       	ori	r24, 0xA0	; 160
    1544:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1548:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    154c:	88 31       	cpi	r24, 0x18	; 24
    154e:	11 f0       	breq	.+4      	; 0x1554 <EEPROM_writeByte+0x46>
        return ERROR; 
    1550:	1c 82       	std	Y+4, r1	; 0x04
    1552:	16 c0       	rjmp	.+44     	; 0x1580 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    155a:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    155e:	88 32       	cpi	r24, 0x28	; 40
    1560:	11 f0       	breq	.+4      	; 0x1566 <EEPROM_writeByte+0x58>
        return ERROR;
    1562:	1c 82       	std	Y+4, r1	; 0x04
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    156c:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1570:	88 32       	cpi	r24, 0x28	; 40
    1572:	11 f0       	breq	.+4      	; 0x1578 <EEPROM_writeByte+0x6a>
        return ERROR;
    1574:	1c 82       	std	Y+4, r1	; 0x04
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1578:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_stop>
	
    return SUCCESS;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	8c 83       	std	Y+4, r24	; 0x04
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <EEPROM_readByte+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <EEPROM_readByte+0x8>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	7c 83       	std	Y+4, r23	; 0x04
    15a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15a6:	0e 94 56 13 	call	0x26ac	; 0x26ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15aa:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    15ae:	88 30       	cpi	r24, 0x08	; 8
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <EEPROM_readByte+0x26>
        return ERROR;
    15b2:	1d 82       	std	Y+5, r1	; 0x05
    15b4:	44 c0       	rjmp	.+136    	; 0x163e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	80 70       	andi	r24, 0x00	; 0
    15bc:	97 70       	andi	r25, 0x07	; 7
    15be:	88 0f       	add	r24, r24
    15c0:	89 2f       	mov	r24, r25
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 0b       	sbc	r25, r25
    15c6:	91 95       	neg	r25
    15c8:	80 6a       	ori	r24, 0xA0	; 160
    15ca:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15ce:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    15d2:	88 31       	cpi	r24, 0x18	; 24
    15d4:	11 f0       	breq	.+4      	; 0x15da <EEPROM_readByte+0x4a>
        return ERROR;
    15d6:	1d 82       	std	Y+5, r1	; 0x05
    15d8:	32 c0       	rjmp	.+100    	; 0x163e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15e0:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    15e4:	88 32       	cpi	r24, 0x28	; 40
    15e6:	11 f0       	breq	.+4      	; 0x15ec <EEPROM_readByte+0x5c>
        return ERROR;
    15e8:	1d 82       	std	Y+5, r1	; 0x05
    15ea:	29 c0       	rjmp	.+82     	; 0x163e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15ec:	0e 94 56 13 	call	0x26ac	; 0x26ac <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15f0:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    15f4:	80 31       	cpi	r24, 0x10	; 16
    15f6:	11 f0       	breq	.+4      	; 0x15fc <EEPROM_readByte+0x6c>
        return ERROR;
    15f8:	1d 82       	std	Y+5, r1	; 0x05
    15fa:	21 c0       	rjmp	.+66     	; 0x163e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	80 70       	andi	r24, 0x00	; 0
    1602:	97 70       	andi	r25, 0x07	; 7
    1604:	88 0f       	add	r24, r24
    1606:	89 2f       	mov	r24, r25
    1608:	88 1f       	adc	r24, r24
    160a:	99 0b       	sbc	r25, r25
    160c:	91 95       	neg	r25
    160e:	81 6a       	ori	r24, 0xA1	; 161
    1610:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1614:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1618:	80 34       	cpi	r24, 0x40	; 64
    161a:	11 f0       	breq	.+4      	; 0x1620 <EEPROM_readByte+0x90>
        return ERROR;
    161c:	1d 82       	std	Y+5, r1	; 0x05
    161e:	0f c0       	rjmp	.+30     	; 0x163e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1620:	0e 94 9b 13 	call	0x2736	; 0x2736 <TWI_readByteWithNACK>
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    162a:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    162e:	88 35       	cpi	r24, 0x58	; 88
    1630:	11 f0       	breq	.+4      	; 0x1636 <EEPROM_readByte+0xa6>
        return ERROR;
    1632:	1d 82       	std	Y+5, r1	; 0x05
    1634:	04 c0       	rjmp	.+8      	; 0x163e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1636:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_stop>

    return SUCCESS;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <EEPROM_writeData>:
uint8 EEPROM_writeData(uint16 u16addr,uint8* u8data, uint8 size){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	27 97       	sbiw	r28, 0x07	; 7
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	7d 83       	std	Y+5, r23	; 0x05
    166a:	6c 83       	std	Y+4, r22	; 0x04
    166c:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
    TWI_start();
    166e:	0e 94 56 13 	call	0x26ac	; 0x26ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1672:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1676:	88 30       	cpi	r24, 0x08	; 8
    1678:	11 f0       	breq	.+4      	; 0x167e <EEPROM_writeData+0x2e>
        return ERROR;
    167a:	1f 82       	std	Y+7, r1	; 0x07
    167c:	39 c0       	rjmp	.+114    	; 0x16f0 <EEPROM_writeData+0xa0>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	80 70       	andi	r24, 0x00	; 0
    1684:	97 70       	andi	r25, 0x07	; 7
    1686:	88 0f       	add	r24, r24
    1688:	89 2f       	mov	r24, r25
    168a:	88 1f       	adc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	91 95       	neg	r25
    1690:	80 6a       	ori	r24, 0xA0	; 160
    1692:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1696:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    169a:	88 31       	cpi	r24, 0x18	; 24
    169c:	11 f0       	breq	.+4      	; 0x16a2 <EEPROM_writeData+0x52>
        return ERROR;
    169e:	1f 82       	std	Y+7, r1	; 0x07
    16a0:	27 c0       	rjmp	.+78     	; 0x16f0 <EEPROM_writeData+0xa0>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16a8:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    16ac:	88 32       	cpi	r24, 0x28	; 40
    16ae:	11 f0       	breq	.+4      	; 0x16b4 <EEPROM_writeData+0x64>
        return ERROR;
    16b0:	1f 82       	std	Y+7, r1	; 0x07
    16b2:	1e c0       	rjmp	.+60     	; 0x16f0 <EEPROM_writeData+0xa0>

	for (i = 0; i < size; i++) {
    16b4:	19 82       	std	Y+1, r1	; 0x01
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <EEPROM_writeData+0x90>
	    /* write byte to eeprom */
		TWI_writeByte(u8data[i]);
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	fc 01       	movw	r30, r24
    16c4:	e2 0f       	add	r30, r18
    16c6:	f3 1f       	adc	r31, r19
    16c8:	80 81       	ld	r24, Z
    16ca:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16ce:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    16d2:	88 32       	cpi	r24, 0x28	; 40
    16d4:	11 f0       	breq	.+4      	; 0x16da <EEPROM_writeData+0x8a>
			return ERROR;
    16d6:	1f 82       	std	Y+7, r1	; 0x07
    16d8:	0b c0       	rjmp	.+22     	; 0x16f0 <EEPROM_writeData+0xa0>
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;

	for (i = 0; i < size; i++) {
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	99 81       	ldd	r25, Y+1	; 0x01
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	98 17       	cp	r25, r24
    16e6:	40 f3       	brcs	.-48     	; 0x16b8 <EEPROM_writeData+0x68>
		TWI_writeByte(u8data[i]);
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
			return ERROR;
	}
    /* Send the Stop Bit */
    TWI_stop();
    16e8:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_stop>

    return SUCCESS;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	8f 83       	std	Y+7, r24	; 0x07
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    16f2:	27 96       	adiw	r28, 0x07	; 7
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <EEPROM_readData>:

uint8 EEPROM_readData(uint16 u16addr,uint8 *u8data, uint8 size){
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	27 97       	sbiw	r28, 0x07	; 7
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	9b 83       	std	Y+3, r25	; 0x03
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	7d 83       	std	Y+5, r23	; 0x05
    1722:	6c 83       	std	Y+4, r22	; 0x04
    1724:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
    TWI_start();
    1726:	0e 94 56 13 	call	0x26ac	; 0x26ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    172a:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    172e:	88 30       	cpi	r24, 0x08	; 8
    1730:	11 f0       	breq	.+4      	; 0x1736 <EEPROM_readData+0x32>
        return ERROR;
    1732:	1f 82       	std	Y+7, r1	; 0x07
    1734:	6c c0       	rjmp	.+216    	; 0x180e <EEPROM_readData+0x10a>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	80 70       	andi	r24, 0x00	; 0
    173c:	97 70       	andi	r25, 0x07	; 7
    173e:	88 0f       	add	r24, r24
    1740:	89 2f       	mov	r24, r25
    1742:	88 1f       	adc	r24, r24
    1744:	99 0b       	sbc	r25, r25
    1746:	91 95       	neg	r25
    1748:	80 6a       	ori	r24, 0xA0	; 160
    174a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    174e:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1752:	88 31       	cpi	r24, 0x18	; 24
    1754:	11 f0       	breq	.+4      	; 0x175a <EEPROM_readData+0x56>
        return ERROR;
    1756:	1f 82       	std	Y+7, r1	; 0x07
    1758:	5a c0       	rjmp	.+180    	; 0x180e <EEPROM_readData+0x10a>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1760:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1764:	88 32       	cpi	r24, 0x28	; 40
    1766:	11 f0       	breq	.+4      	; 0x176c <EEPROM_readData+0x68>
        return ERROR;
    1768:	1f 82       	std	Y+7, r1	; 0x07
    176a:	51 c0       	rjmp	.+162    	; 0x180e <EEPROM_readData+0x10a>

    /* Send the Repeated Start Bit */
    TWI_start();
    176c:	0e 94 56 13 	call	0x26ac	; 0x26ac <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1770:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1774:	80 31       	cpi	r24, 0x10	; 16
    1776:	11 f0       	breq	.+4      	; 0x177c <EEPROM_readData+0x78>
        return ERROR;
    1778:	1f 82       	std	Y+7, r1	; 0x07
    177a:	49 c0       	rjmp	.+146    	; 0x180e <EEPROM_readData+0x10a>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	9b 81       	ldd	r25, Y+3	; 0x03
    1780:	80 70       	andi	r24, 0x00	; 0
    1782:	97 70       	andi	r25, 0x07	; 7
    1784:	88 0f       	add	r24, r24
    1786:	89 2f       	mov	r24, r25
    1788:	88 1f       	adc	r24, r24
    178a:	99 0b       	sbc	r25, r25
    178c:	91 95       	neg	r25
    178e:	81 6a       	ori	r24, 0xA1	; 161
    1790:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1794:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    1798:	80 34       	cpi	r24, 0x40	; 64
    179a:	11 f0       	breq	.+4      	; 0x17a0 <EEPROM_readData+0x9c>
        return ERROR;
    179c:	1f 82       	std	Y+7, r1	; 0x07
    179e:	37 c0       	rjmp	.+110    	; 0x180e <EEPROM_readData+0x10a>

    for(i = 0 ; i<size-1 ; i++){
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	15 c0       	rjmp	.+42     	; 0x17ce <EEPROM_readData+0xca>
		/* Read Byte from Memory and send ACK */
		u8data[i] = TWI_readByteWithACK();
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	8c 01       	movw	r16, r24
    17b0:	02 0f       	add	r16, r18
    17b2:	13 1f       	adc	r17, r19
    17b4:	0e 94 88 13 	call	0x2710	; 0x2710 <TWI_readByteWithACK>
    17b8:	f8 01       	movw	r30, r16
    17ba:	80 83       	st	Z, r24
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
    17bc:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    17c0:	80 35       	cpi	r24, 0x50	; 80
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <EEPROM_readData+0xc4>
			return ERROR;
    17c4:	1f 82       	std	Y+7, r1	; 0x07
    17c6:	23 c0       	rjmp	.+70     	; 0x180e <EEPROM_readData+0x10a>
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    for(i = 0 ; i<size-1 ; i++){
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	0c f3       	brlt	.-62     	; 0x17a4 <EEPROM_readData+0xa0>
		u8data[i] = TWI_readByteWithACK();
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
			return ERROR;
    }
    /* Read last Byte from Memory without send ACK */
    u8data[i] = TWI_readByteWithNACK();
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	8c 01       	movw	r16, r24
    17ee:	02 0f       	add	r16, r18
    17f0:	13 1f       	adc	r17, r19
    17f2:	0e 94 9b 13 	call	0x2736	; 0x2736 <TWI_readByteWithNACK>
    17f6:	f8 01       	movw	r30, r16
    17f8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17fa:	0e 94 ae 13 	call	0x275c	; 0x275c <TWI_getStatus>
    17fe:	88 35       	cpi	r24, 0x58	; 88
    1800:	11 f0       	breq	.+4      	; 0x1806 <EEPROM_readData+0x102>
        return ERROR;
    1802:	1f 82       	std	Y+7, r1	; 0x07
    1804:	04 c0       	rjmp	.+8      	; 0x180e <EEPROM_readData+0x10a>

    /* Send the Stop Bit */
    TWI_stop();
    1806:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_stop>

    return SUCCESS;
    180a:	f1 e0       	ldi	r31, 0x01	; 1
    180c:	ff 83       	std	Y+7, r31	; 0x07
    180e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1810:	27 96       	adiw	r28, 0x07	; 7
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_setupPinDirection+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_setupPinDirection+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6a 83       	std	Y+2, r22	; 0x02
    1838:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <GPIO_setupPinDirection+0x1c>
    1840:	d5 c0       	rjmp	.+426    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	08 f0       	brcs	.+2      	; 0x184a <GPIO_setupPinDirection+0x24>
    1848:	d1 c0       	rjmp	.+418    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3d 83       	std	Y+5, r19	; 0x05
    1852:	2c 83       	std	Y+4, r18	; 0x04
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <GPIO_setupPinDirection+0x3a>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <GPIO_setupPinDirection+0xc0>
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <GPIO_setupPinDirection+0x4e>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	71 f0       	breq	.+28     	; 0x188e <GPIO_setupPinDirection+0x68>
    1872:	bc c0       	rjmp	.+376    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <GPIO_setupPinDirection+0x5a>
    187e:	5f c0       	rjmp	.+190    	; 0x193e <GPIO_setupPinDirection+0x118>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <GPIO_setupPinDirection+0x66>
    188a:	85 c0       	rjmp	.+266    	; 0x1996 <GPIO_setupPinDirection+0x170>
    188c:	af c0       	rjmp	.+350    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	a1 f4       	brne	.+40     	; 0x18bc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1894:	aa e3       	ldi	r26, 0x3A	; 58
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ea e3       	ldi	r30, 0x3A	; 58
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_setupPinDirection+0x8c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_setupPinDirection+0x88>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	98 c0       	rjmp	.+304    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18bc:	aa e3       	ldi	r26, 0x3A	; 58
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ea e3       	ldi	r30, 0x3A	; 58
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_setupPinDirection+0xb4>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_setupPinDirection+0xb0>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	83 c0       	rjmp	.+262    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a1 f4       	brne	.+40     	; 0x1914 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_setupPinDirection+0xe4>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_setupPinDirection+0xe0>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	6c c0       	rjmp	.+216    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1914:	a7 e3       	ldi	r26, 0x37	; 55
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e7 e3       	ldi	r30, 0x37	; 55
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_setupPinDirection+0x10c>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_setupPinDirection+0x108>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	57 c0       	rjmp	.+174    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	a1 f4       	brne	.+40     	; 0x196c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1944:	a4 e3       	ldi	r26, 0x34	; 52
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e4 e3       	ldi	r30, 0x34	; 52
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_setupPinDirection+0x13c>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_setupPinDirection+0x138>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	40 c0       	rjmp	.+128    	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    196c:	a4 e3       	ldi	r26, 0x34	; 52
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e4 e3       	ldi	r30, 0x34	; 52
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_setupPinDirection+0x164>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_setupPinDirection+0x160>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	2b c0       	rjmp	.+86     	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	a1 f4       	brne	.+40     	; 0x19c4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    199c:	a1 e3       	ldi	r26, 0x31	; 49
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e1 e3       	ldi	r30, 0x31	; 49
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_setupPinDirection+0x194>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_setupPinDirection+0x190>
    19be:	84 2b       	or	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19c4:	a1 e3       	ldi	r26, 0x31	; 49
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e1 e3       	ldi	r30, 0x31	; 49
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <GPIO_setupPinDirection+0x1bc>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <GPIO_setupPinDirection+0x1b8>
    19e6:	80 95       	com	r24
    19e8:	84 23       	and	r24, r20
    19ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <GPIO_writePin+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <GPIO_writePin+0x8>
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	6a 83       	std	Y+2, r22	; 0x02
    1a0e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	88 30       	cpi	r24, 0x08	; 8
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <GPIO_writePin+0x1c>
    1a16:	d5 c0       	rjmp	.+426    	; 0x1bc2 <GPIO_writePin+0x1c6>
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	84 30       	cpi	r24, 0x04	; 4
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <GPIO_writePin+0x24>
    1a1e:	d1 c0       	rjmp	.+418    	; 0x1bc2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3d 83       	std	Y+5, r19	; 0x05
    1a28:	2c 83       	std	Y+4, r18	; 0x04
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <GPIO_writePin+0x3a>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <GPIO_writePin+0xc0>
    1a36:	2c 81       	ldd	r18, Y+4	; 0x04
    1a38:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <GPIO_writePin+0x4e>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <GPIO_writePin+0x68>
    1a48:	bc c0       	rjmp	.+376    	; 0x1bc2 <GPIO_writePin+0x1c6>
    1a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <GPIO_writePin+0x5a>
    1a54:	5f c0       	rjmp	.+190    	; 0x1b14 <GPIO_writePin+0x118>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <GPIO_writePin+0x66>
    1a60:	85 c0       	rjmp	.+266    	; 0x1b6c <GPIO_writePin+0x170>
    1a62:	af c0       	rjmp	.+350    	; 0x1bc2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	a1 f4       	brne	.+40     	; 0x1a92 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_writePin+0x8c>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_writePin+0x88>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	98 c0       	rjmp	.+304    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a92:	ab e3       	ldi	r26, 0x3B	; 59
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <GPIO_writePin+0xb4>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <GPIO_writePin+0xb0>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	83 c0       	rjmp	.+262    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	a1 f4       	brne	.+40     	; 0x1aea <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ac2:	a8 e3       	ldi	r26, 0x38	; 56
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e8 e3       	ldi	r30, 0x38	; 56
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_writePin+0xe4>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_writePin+0xe0>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	6c c0       	rjmp	.+216    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_writePin+0x10c>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_writePin+0x108>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	57 c0       	rjmp	.+174    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	a1 f4       	brne	.+40     	; 0x1b42 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_writePin+0x13c>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_writePin+0x138>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	40 c0       	rjmp	.+128    	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b42:	a5 e3       	ldi	r26, 0x35	; 53
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e3       	ldi	r30, 0x35	; 53
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <GPIO_writePin+0x164>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <GPIO_writePin+0x160>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	2b c0       	rjmp	.+86     	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	a1 f4       	brne	.+40     	; 0x1b9a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b72:	a2 e3       	ldi	r26, 0x32	; 50
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e2 e3       	ldi	r30, 0x32	; 50
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_writePin+0x194>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_writePin+0x190>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b9a:	a2 e3       	ldi	r26, 0x32	; 50
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <GPIO_writePin+0x1bc>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <GPIO_writePin+0x1b8>
    1bbc:	80 95       	com	r24
    1bbe:	84 23       	and	r24, r20
    1bc0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_readPin+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <GPIO_readPin+0x8>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	8a 83       	std	Y+2, r24	; 0x02
    1be2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1be4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 30       	cpi	r24, 0x08	; 8
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <GPIO_readPin+0x1c>
    1bec:	84 c0       	rjmp	.+264    	; 0x1cf6 <GPIO_readPin+0x124>
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <GPIO_readPin+0x24>
    1bf4:	80 c0       	rjmp	.+256    	; 0x1cf6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3d 83       	std	Y+5, r19	; 0x05
    1bfe:	2c 83       	std	Y+4, r18	; 0x04
    1c00:	4c 81       	ldd	r20, Y+4	; 0x04
    1c02:	5d 81       	ldd	r21, Y+5	; 0x05
    1c04:	41 30       	cpi	r20, 0x01	; 1
    1c06:	51 05       	cpc	r21, r1
    1c08:	79 f1       	breq	.+94     	; 0x1c68 <GPIO_readPin+0x96>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	82 30       	cpi	r24, 0x02	; 2
    1c10:	91 05       	cpc	r25, r1
    1c12:	34 f4       	brge	.+12     	; 0x1c20 <GPIO_readPin+0x4e>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	21 15       	cp	r18, r1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	69 f0       	breq	.+26     	; 0x1c38 <GPIO_readPin+0x66>
    1c1e:	6b c0       	rjmp	.+214    	; 0x1cf6 <GPIO_readPin+0x124>
    1c20:	4c 81       	ldd	r20, Y+4	; 0x04
    1c22:	5d 81       	ldd	r21, Y+5	; 0x05
    1c24:	42 30       	cpi	r20, 0x02	; 2
    1c26:	51 05       	cpc	r21, r1
    1c28:	b9 f1       	breq	.+110    	; 0x1c98 <GPIO_readPin+0xc6>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	91 05       	cpc	r25, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <GPIO_readPin+0x64>
    1c34:	49 c0       	rjmp	.+146    	; 0x1cc8 <GPIO_readPin+0xf6>
    1c36:	5f c0       	rjmp	.+190    	; 0x1cf6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c38:	e9 e3       	ldi	r30, 0x39	; 57
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a9 01       	movw	r20, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GPIO_readPin+0x7e>
    1c4c:	55 95       	asr	r21
    1c4e:	47 95       	ror	r20
    1c50:	8a 95       	dec	r24
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <GPIO_readPin+0x7a>
    1c54:	ca 01       	movw	r24, r20
    1c56:	81 70       	andi	r24, 0x01	; 1
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	88 23       	and	r24, r24
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	49 c0       	rjmp	.+146    	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c64:	19 82       	std	Y+1, r1	; 0x01
    1c66:	47 c0       	rjmp	.+142    	; 0x1cf6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c68:	e6 e3       	ldi	r30, 0x36	; 54
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a9 01       	movw	r20, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_readPin+0xae>
    1c7c:	55 95       	asr	r21
    1c7e:	47 95       	ror	r20
    1c80:	8a 95       	dec	r24
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_readPin+0xaa>
    1c84:	ca 01       	movw	r24, r20
    1c86:	81 70       	andi	r24, 0x01	; 1
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	88 23       	and	r24, r24
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	31 c0       	rjmp	.+98     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c94:	19 82       	std	Y+1, r1	; 0x01
    1c96:	2f c0       	rjmp	.+94     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c98:	e3 e3       	ldi	r30, 0x33	; 51
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a9 01       	movw	r20, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <GPIO_readPin+0xde>
    1cac:	55 95       	asr	r21
    1cae:	47 95       	ror	r20
    1cb0:	8a 95       	dec	r24
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <GPIO_readPin+0xda>
    1cb4:	ca 01       	movw	r24, r20
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	90 70       	andi	r25, 0x00	; 0
    1cba:	88 23       	and	r24, r24
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	19 c0       	rjmp	.+50     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1cc8:	e0 e3       	ldi	r30, 0x30	; 48
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a9 01       	movw	r20, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <GPIO_readPin+0x10e>
    1cdc:	55 95       	asr	r21
    1cde:	47 95       	ror	r20
    1ce0:	8a 95       	dec	r24
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <GPIO_readPin+0x10a>
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	81 70       	andi	r24, 0x01	; 1
    1ce8:	90 70       	andi	r25, 0x00	; 0
    1cea:	88 23       	and	r24, r24
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <GPIO_setupPortDirection+0x6>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <GPIO_setupPortDirection+0x8>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	84 30       	cpi	r24, 0x04	; 4
    1d1c:	90 f5       	brcc	.+100    	; 0x1d82 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3c 83       	std	Y+4, r19	; 0x04
    1d26:	2b 83       	std	Y+3, r18	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	d1 f0       	breq	.+52     	; 0x1d66 <GPIO_setupPortDirection+0x5e>
    1d32:	2b 81       	ldd	r18, Y+3	; 0x03
    1d34:	3c 81       	ldd	r19, Y+4	; 0x04
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <GPIO_setupPortDirection+0x3e>
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	61 f0       	breq	.+24     	; 0x1d5c <GPIO_setupPortDirection+0x54>
    1d44:	1e c0       	rjmp	.+60     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
    1d46:	2b 81       	ldd	r18, Y+3	; 0x03
    1d48:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	81 f0       	breq	.+32     	; 0x1d70 <GPIO_setupPortDirection+0x68>
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <GPIO_setupPortDirection+0x72>
    1d5a:	13 c0       	rjmp	.+38     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d5c:	ea e3       	ldi	r30, 0x3A	; 58
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	80 83       	st	Z, r24
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d66:	e7 e3       	ldi	r30, 0x37	; 55
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	80 83       	st	Z, r24
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d70:	e4 e3       	ldi	r30, 0x34	; 52
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	80 83       	st	Z, r24
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d7a:	e1 e3       	ldi	r30, 0x31	; 49
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <GPIO_writePort+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <GPIO_writePort+0x8>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	90 f5       	brcc	.+100    	; 0x1e0a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3c 83       	std	Y+4, r19	; 0x04
    1dae:	2b 83       	std	Y+3, r18	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	d1 f0       	breq	.+52     	; 0x1dee <GPIO_writePort+0x5e>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <GPIO_writePort+0x3e>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <GPIO_writePort+0x54>
    1dcc:	1e c0       	rjmp	.+60     	; 0x1e0a <GPIO_writePort+0x7a>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <GPIO_writePort+0x68>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	83 30       	cpi	r24, 0x03	; 3
    1dde:	91 05       	cpc	r25, r1
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <GPIO_writePort+0x72>
    1de2:	13 c0       	rjmp	.+38     	; 0x1e0a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1de4:	eb e3       	ldi	r30, 0x3B	; 59
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	80 83       	st	Z, r24
    1dec:	0e c0       	rjmp	.+28     	; 0x1e0a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dee:	e8 e3       	ldi	r30, 0x38	; 56
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	09 c0       	rjmp	.+18     	; 0x1e0a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1df8:	e5 e3       	ldi	r30, 0x35	; 53
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
    1e00:	04 c0       	rjmp	.+8      	; 0x1e0a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e02:	e2 e3       	ldi	r30, 0x32	; 50
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_readPort+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_readPort+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e26:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	90 f5       	brcc	.+100    	; 0x1e92 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3c 83       	std	Y+4, r19	; 0x04
    1e36:	2b 83       	std	Y+3, r18	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	d1 f0       	breq	.+52     	; 0x1e76 <GPIO_readPort+0x5e>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <GPIO_readPort+0x3e>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <GPIO_readPort+0x54>
    1e54:	1e c0       	rjmp	.+60     	; 0x1e92 <GPIO_readPort+0x7a>
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	22 30       	cpi	r18, 0x02	; 2
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	81 f0       	breq	.+32     	; 0x1e80 <GPIO_readPort+0x68>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	83 30       	cpi	r24, 0x03	; 3
    1e66:	91 05       	cpc	r25, r1
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <GPIO_readPort+0x72>
    1e6a:	13 c0       	rjmp	.+38     	; 0x1e92 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e6c:	e9 e3       	ldi	r30, 0x39	; 57
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e76:	e6 e3       	ldi	r30, 0x36	; 54
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e80:	e3 e3       	ldi	r30, 0x33	; 51
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e8a:	e0 e3       	ldi	r30, 0x30	; 48
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <LEDS_init>:
 *      Author: MOH
 */
#include "common_macros.h"
#include "gpio.h"
#include "led.h"
void LEDS_init(void){
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(RED_LED_PORT_ID,RED_LED_PIN_ID,PIN_OUTPUT);
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	65 e0       	ldi	r22, 0x05	; 5
    1eae:	41 e0       	ldi	r20, 0x01	; 1
    1eb0:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
    GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID,LOGIC_LOW);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	65 e0       	ldi	r22, 0x05	; 5
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>

	GPIO_setupPinDirection(BLUE_LED_PORT_ID,BLUE_LED_PIN_ID,PIN_OUTPUT);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	67 e0       	ldi	r22, 0x07	; 7
    1ec2:	41 e0       	ldi	r20, 0x01	; 1
    1ec4:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
    GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID,LOGIC_LOW);
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	67 e0       	ldi	r22, 0x07	; 7
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>

	GPIO_setupPinDirection(GREEN_LED_PORT_ID,GREEN_LED_PIN_ID,PIN_OUTPUT);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	66 e0       	ldi	r22, 0x06	; 6
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
    GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID,LOGIC_LOW);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	66 e0       	ldi	r22, 0x06	; 6
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <LED_on>:
void LED_on(LED_ID id)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <LED_on+0x6>
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	3b 83       	std	Y+3, r19	; 0x03
    1f02:	2a 83       	std	Y+2, r18	; 0x02
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	79 f0       	breq	.+30     	; 0x1f2c <LED_on+0x40>
    1f0e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f10:	3b 81       	ldd	r19, Y+3	; 0x03
    1f12:	22 30       	cpi	r18, 0x02	; 2
    1f14:	31 05       	cpc	r19, r1
    1f16:	81 f0       	breq	.+32     	; 0x1f38 <LED_on+0x4c>
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	89 f4       	brne	.+34     	; 0x1f42 <LED_on+0x56>
	{
		case LED_RED:
			GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LED_ON);
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	65 e0       	ldi	r22, 0x05	; 5
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <LED_on+0x56>
			break;
		case LED_GREEN:
			GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LED_ON);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	66 e0       	ldi	r22, 0x06	; 6
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <LED_on+0x56>
			break;
		case LED_BLUE:
			GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LED_ON);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	67 e0       	ldi	r22, 0x07	; 7
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
			break;
	}
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <LED_off>:

void LED_off(LED_ID id)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <LED_off+0x6>
    1f54:	0f 92       	push	r0
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	3b 83       	std	Y+3, r19	; 0x03
    1f64:	2a 83       	std	Y+2, r18	; 0x02
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	79 f0       	breq	.+30     	; 0x1f8e <LED_off+0x40>
    1f70:	2a 81       	ldd	r18, Y+2	; 0x02
    1f72:	3b 81       	ldd	r19, Y+3	; 0x03
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	81 f0       	breq	.+32     	; 0x1f9a <LED_off+0x4c>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	89 f4       	brne	.+34     	; 0x1fa4 <LED_off+0x56>
	{
		case LED_RED:
			GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LED_OFF);
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	65 e0       	ldi	r22, 0x05	; 5
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    1f8c:	0b c0       	rjmp	.+22     	; 0x1fa4 <LED_off+0x56>
			break;
		case LED_GREEN:
			GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LED_OFF);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	66 e0       	ldi	r22, 0x06	; 6
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
    1f98:	05 c0       	rjmp	.+10     	; 0x1fa4 <LED_off+0x56>
			break;
		case LED_BLUE:
			GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LED_OFF);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	67 e0       	ldi	r22, 0x07	; 7
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
			break;
	}
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <DcMotor_Init>:
 */
#include "common_macros.h"
#include "gpio.h"
#include "motor.h"
#include "pwm.h"
void DcMotor_Init(void){
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID1,MOTOR_PIN_ID1,PIN_OUTPUT);
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	66 e0       	ldi	r22, 0x06	; 6
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID2,MOTOR_PIN_ID2,PIN_OUTPUT);
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	67 e0       	ldi	r22, 0x07	; 7
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_PORT_ID1,MOTOR_PIN_ID1,LOGIC_LOW);
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	66 e0       	ldi	r22, 0x06	; 6
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID2,MOTOR_PIN_ID2,LOGIC_LOW);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	67 e0       	ldi	r22, 0x07	; 7
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID, PIN_OUTPUT);
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	63 e0       	ldi	r22, 0x03	; 3
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>

}
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <DcMotor_Rotate+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <DcMotor_Rotate+0x8>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	6a 83       	std	Y+2, r22	; 0x02


    switch (state) {
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3c 83       	std	Y+4, r19	; 0x04
    2008:	2b 83       	std	Y+3, r18	; 0x03
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	91 05       	cpc	r25, r1
    2012:	c1 f0       	breq	.+48     	; 0x2044 <DcMotor_Rotate+0x54>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	3c 81       	ldd	r19, Y+4	; 0x04
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	29 f0       	breq	.+10     	; 0x2028 <DcMotor_Rotate+0x38>
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	e9 f0       	breq	.+58     	; 0x2060 <DcMotor_Rotate+0x70>
    2026:	29 c0       	rjmp	.+82     	; 0x207a <DcMotor_Rotate+0x8a>
        case ACW:
            GPIO_writePin(MOTOR_PORT_ID1, MOTOR_PIN_ID1, LOGIC_HIGH);
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	66 e0       	ldi	r22, 0x06	; 6
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT_ID2, MOTOR_PIN_ID2, LOGIC_LOW);
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	67 e0       	ldi	r22, 0x07	; 7
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
        	PWM_Timer0_Start(speed);
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <PWM_Timer0_Start>
    2042:	1b c0       	rjmp	.+54     	; 0x207a <DcMotor_Rotate+0x8a>
            break;

        case CW:
            GPIO_writePin(MOTOR_PORT_ID1, MOTOR_PIN_ID1, LOGIC_LOW);
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	66 e0       	ldi	r22, 0x06	; 6
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT_ID2, MOTOR_PIN_ID2, LOGIC_HIGH);
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	67 e0       	ldi	r22, 0x07	; 7
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
        	PWM_Timer0_Start(speed);
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <PWM_Timer0_Start>
    205e:	0d c0       	rjmp	.+26     	; 0x207a <DcMotor_Rotate+0x8a>
            break;

        case STOP:
            GPIO_writePin(MOTOR_PORT_ID1, MOTOR_PIN_ID1, LOGIC_LOW);
    2060:	83 e0       	ldi	r24, 0x03	; 3
    2062:	66 e0       	ldi	r22, 0x06	; 6
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT_ID2, MOTOR_PIN_ID2, LOGIC_LOW);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	67 e0       	ldi	r22, 0x07	; 7
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_writePin>
            PWM_Timer0_Start(0);
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	0e 94 71 10 	call	0x20e2	; 0x20e2 <PWM_Timer0_Start>
            break;
    }


}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <PIR_init>:
 *      Author: MOH
 */
#include "common_macros.h"
#include "gpio.h"
#include "pir.h"
void PIR_init(void){
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT,PIR_PIN,PIN_INPUT);
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
}
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <PIR_getState>:
uint8 PIR_getState(void){
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORT,PIR_PIN);
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <GPIO_readPin>
}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <Timer0_INIT_PWM>:
 */
#include "avr/io.h"
#include "common_macros.h"
#include "pwm.h"
#include "gpio.h"
void Timer0_INIT_PWM(void){
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	OCR0  = 0; //Set Compare value
    20be:	ec e5       	ldi	r30, 0x5C	; 92
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1
	TCNT0 = 0;
    20c4:	e2 e5       	ldi	r30, 0x52	; 82
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	10 82       	st	Z, r1
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	63 e0       	ldi	r22, 0x03	; 3
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_setupPinDirection>
	 TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS00) | (1 << CS01);
    20d4:	e3 e5       	ldi	r30, 0x53	; 83
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8b e6       	ldi	r24, 0x6B	; 107
    20da:	80 83       	st	Z, r24
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <PWM_Timer0_Start>:
void PWM_Timer0_Start(uint8 duty_cycle) {
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = duty_cycle*2.55; //Set Compare value
    20f2:	0c e5       	ldi	r16, 0x5C	; 92
    20f4:	10 e0       	ldi	r17, 0x00	; 0
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	aa 27       	eor	r26, r26
    20fe:	97 fd       	sbrc	r25, 7
    2100:	a0 95       	com	r26
    2102:	ba 2f       	mov	r27, r26
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	23 e3       	ldi	r18, 0x33	; 51
    2116:	33 e3       	ldi	r19, 0x33	; 51
    2118:	43 e2       	ldi	r20, 0x23	; 35
    211a:	50 e4       	ldi	r21, 0x40	; 64
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	f8 01       	movw	r30, r16
    2132:	80 83       	st	Z, r24
}
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <Timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
static void (*g_timer0_callBackPtr)(void) = NULL_PTR;
static void (*g_timer1_callBackPtr)(void) = NULL_PTR;
static void (*g_timer2_callBackPtr)(void) = NULL_PTR;
void Timer_init(const Timer_ConfigType * Config_Ptr){
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <Timer_init+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <Timer_init+0x8>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID){
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	84 81       	ldd	r24, Z+4	; 0x04
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	3c 83       	std	Y+4, r19	; 0x04
    215c:	2b 83       	std	Y+3, r18	; 0x03
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	91 05       	cpc	r25, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <Timer_init+0x2a>
    2168:	7a c0       	rjmp	.+244    	; 0x225e <Timer_init+0x11e>
    216a:	2b 81       	ldd	r18, Y+3	; 0x03
    216c:	3c 81       	ldd	r19, Y+4	; 0x04
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	e9 f1       	breq	.+122    	; 0x21ee <Timer_init+0xae>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	09 f0       	breq	.+2      	; 0x217e <Timer_init+0x3e>
    217c:	ac c0       	rjmp	.+344    	; 0x22d6 <Timer_init+0x196>
	case TIMER0:
		TCCR0 |= Config_Ptr->timer_clock|Config_Ptr->timer_mode|(1<<FOC0);
    217e:	a3 e5       	ldi	r26, 0x53	; 83
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e3 e5       	ldi	r30, 0x53	; 83
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	20 81       	ld	r18, Z
    2188:	e9 81       	ldd	r30, Y+1	; 0x01
    218a:	fa 81       	ldd	r31, Y+2	; 0x02
    218c:	95 81       	ldd	r25, Z+5	; 0x05
    218e:	e9 81       	ldd	r30, Y+1	; 0x01
    2190:	fa 81       	ldd	r31, Y+2	; 0x02
    2192:	86 81       	ldd	r24, Z+6	; 0x06
    2194:	89 2b       	or	r24, r25
    2196:	82 2b       	or	r24, r18
    2198:	80 68       	ori	r24, 0x80	; 128
    219a:	8c 93       	st	X, r24
		TCNT0=Config_Ptr->timer_InitialValue;
    219c:	a2 e5       	ldi	r26, 0x52	; 82
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode==COMPARE){
    21aa:	e9 81       	ldd	r30, Y+1	; 0x01
    21ac:	fa 81       	ldd	r31, Y+2	; 0x02
    21ae:	86 81       	ldd	r24, Z+6	; 0x06
    21b0:	88 30       	cpi	r24, 0x08	; 8
    21b2:	79 f4       	brne	.+30     	; 0x21d2 <Timer_init+0x92>
			TIMSK|=(1<<OCIE0);
    21b4:	a9 e5       	ldi	r26, 0x59	; 89
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e9 e5       	ldi	r30, 0x59	; 89
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	82 60       	ori	r24, 0x02	; 2
    21c0:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    21c2:	ac e5       	ldi	r26, 0x5C	; 92
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	8c 93       	st	X, r24
    21d0:	82 c0       	rjmp	.+260    	; 0x22d6 <Timer_init+0x196>
		}
		else if(Config_Ptr->timer_mode==NORMAL)
    21d2:	e9 81       	ldd	r30, Y+1	; 0x01
    21d4:	fa 81       	ldd	r31, Y+2	; 0x02
    21d6:	86 81       	ldd	r24, Z+6	; 0x06
    21d8:	88 23       	and	r24, r24
    21da:	09 f0       	breq	.+2      	; 0x21de <Timer_init+0x9e>
    21dc:	7c c0       	rjmp	.+248    	; 0x22d6 <Timer_init+0x196>
			TIMSK|=(1<<TOIE0);
    21de:	a9 e5       	ldi	r26, 0x59	; 89
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e9 e5       	ldi	r30, 0x59	; 89
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	81 60       	ori	r24, 0x01	; 1
    21ea:	8c 93       	st	X, r24
    21ec:	74 c0       	rjmp	.+232    	; 0x22d6 <Timer_init+0x196>
		break;
	case TIMER2:
		TCCR2 |= Config_Ptr->timer_clock|Config_Ptr->timer_mode|(1<<FOC2);
    21ee:	a5 e4       	ldi	r26, 0x45	; 69
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e5 e4       	ldi	r30, 0x45	; 69
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	20 81       	ld	r18, Z
    21f8:	e9 81       	ldd	r30, Y+1	; 0x01
    21fa:	fa 81       	ldd	r31, Y+2	; 0x02
    21fc:	95 81       	ldd	r25, Z+5	; 0x05
    21fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2200:	fa 81       	ldd	r31, Y+2	; 0x02
    2202:	86 81       	ldd	r24, Z+6	; 0x06
    2204:	89 2b       	or	r24, r25
    2206:	82 2b       	or	r24, r18
    2208:	80 68       	ori	r24, 0x80	; 128
    220a:	8c 93       	st	X, r24
		TCNT2=Config_Ptr->timer_InitialValue;
    220c:	a4 e4       	ldi	r26, 0x44	; 68
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode==COMPARE){
    221a:	e9 81       	ldd	r30, Y+1	; 0x01
    221c:	fa 81       	ldd	r31, Y+2	; 0x02
    221e:	86 81       	ldd	r24, Z+6	; 0x06
    2220:	88 30       	cpi	r24, 0x08	; 8
    2222:	79 f4       	brne	.+30     	; 0x2242 <Timer_init+0x102>
			TIMSK |= (1 << OCIE2);
    2224:	a9 e5       	ldi	r26, 0x59	; 89
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e9 e5       	ldi	r30, 0x59	; 89
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	80 68       	ori	r24, 0x80	; 128
    2230:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    2232:	a3 e4       	ldi	r26, 0x43	; 67
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	8c 93       	st	X, r24
    2240:	4a c0       	rjmp	.+148    	; 0x22d6 <Timer_init+0x196>
		}
		else if(Config_Ptr->timer_mode==NORMAL)
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	86 81       	ldd	r24, Z+6	; 0x06
    2248:	88 23       	and	r24, r24
    224a:	09 f0       	breq	.+2      	; 0x224e <Timer_init+0x10e>
    224c:	44 c0       	rjmp	.+136    	; 0x22d6 <Timer_init+0x196>
			TIMSK|=(1<<TOIE1);
    224e:	a9 e5       	ldi	r26, 0x59	; 89
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e9 e5       	ldi	r30, 0x59	; 89
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	84 60       	ori	r24, 0x04	; 4
    225a:	8c 93       	st	X, r24
    225c:	3c c0       	rjmp	.+120    	; 0x22d6 <Timer_init+0x196>
		break;
	case TIMER1:
	    TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    225e:	ef e4       	ldi	r30, 0x4F	; 79
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8c e0       	ldi	r24, 0x0C	; 12
    2264:	80 83       	st	Z, r24
	    TCNT1 = Config_Ptr->timer_InitialValue;
    2266:	ac e4       	ldi	r26, 0x4C	; 76
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	11 96       	adiw	r26, 0x01	; 1
    2274:	9c 93       	st	X, r25
    2276:	8e 93       	st	-X, r24

	    if (Config_Ptr->timer_mode == COMPARE) {
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	86 81       	ldd	r24, Z+6	; 0x06
    227e:	88 30       	cpi	r24, 0x08	; 8
    2280:	c1 f4       	brne	.+48     	; 0x22b2 <Timer_init+0x172>
	        TCCR1B = Config_Ptr->timer_clock | (1 << WGM12);
    2282:	ae e4       	ldi	r26, 0x4E	; 78
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e9 81       	ldd	r30, Y+1	; 0x01
    2288:	fa 81       	ldd	r31, Y+2	; 0x02
    228a:	85 81       	ldd	r24, Z+5	; 0x05
    228c:	88 60       	ori	r24, 0x08	; 8
    228e:	8c 93       	st	X, r24
	        OCR1A = Config_Ptr->timer_compare_MatchValue;
    2290:	aa e4       	ldi	r26, 0x4A	; 74
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	11 96       	adiw	r26, 0x01	; 1
    229e:	9c 93       	st	X, r25
    22a0:	8e 93       	st	-X, r24
	        TIMSK |= (1 << OCIE1A);
    22a2:	a9 e5       	ldi	r26, 0x59	; 89
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e9 e5       	ldi	r30, 0x59	; 89
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 61       	ori	r24, 0x10	; 16
    22ae:	8c 93       	st	X, r24
    22b0:	12 c0       	rjmp	.+36     	; 0x22d6 <Timer_init+0x196>
	    }
	    else if (Config_Ptr->timer_mode == NORMAL) {
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	86 81       	ldd	r24, Z+6	; 0x06
    22b8:	88 23       	and	r24, r24
    22ba:	69 f4       	brne	.+26     	; 0x22d6 <Timer_init+0x196>
	        TCCR1B = Config_Ptr->timer_clock;
    22bc:	ae e4       	ldi	r26, 0x4E	; 78
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e9 81       	ldd	r30, Y+1	; 0x01
    22c2:	fa 81       	ldd	r31, Y+2	; 0x02
    22c4:	85 81       	ldd	r24, Z+5	; 0x05
    22c6:	8c 93       	st	X, r24
	        TIMSK |= (1 << TOIE1);
    22c8:	a9 e5       	ldi	r26, 0x59	; 89
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e9 e5       	ldi	r30, 0x59	; 89
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	84 60       	ori	r24, 0x04	; 4
    22d4:	8c 93       	st	X, r24
	    }
	    break;
}
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type) {
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <Timer_deInit+0x6>
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	3b 83       	std	Y+3, r19	; 0x03
    22fa:	2a 83       	std	Y+2, r18	; 0x02
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	91 05       	cpc	r25, r1
    2304:	d9 f0       	breq	.+54     	; 0x233c <Timer_deInit+0x58>
    2306:	2a 81       	ldd	r18, Y+2	; 0x02
    2308:	3b 81       	ldd	r19, Y+3	; 0x03
    230a:	22 30       	cpi	r18, 0x02	; 2
    230c:	31 05       	cpc	r19, r1
    230e:	61 f1       	breq	.+88     	; 0x2368 <Timer_deInit+0x84>
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	9b 81       	ldd	r25, Y+3	; 0x03
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	c9 f5       	brne	.+114    	; 0x238a <Timer_deInit+0xa6>
        case TIMER0:
            TCCR0 = 0;
    2318:	e3 e5       	ldi	r30, 0x53	; 83
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	10 82       	st	Z, r1
            TCNT0 = 0;
    231e:	e2 e5       	ldi	r30, 0x52	; 82
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    2324:	a9 e5       	ldi	r26, 0x59	; 89
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e9 e5       	ldi	r30, 0x59	; 89
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	8c 7f       	andi	r24, 0xFC	; 252
    2330:	8c 93       	st	X, r24
            g_timer0_callBackPtr = NULL_PTR;
    2332:	10 92 a9 01 	sts	0x01A9, r1
    2336:	10 92 a8 01 	sts	0x01A8, r1
    233a:	27 c0       	rjmp	.+78     	; 0x238a <Timer_deInit+0xa6>
            break;

        case TIMER1:
            TCCR1A = 0;
    233c:	ef e4       	ldi	r30, 0x4F	; 79
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	10 82       	st	Z, r1
            TCCR1B = 0;
    2342:	ee e4       	ldi	r30, 0x4E	; 78
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	10 82       	st	Z, r1
            TCNT1 = 0;
    2348:	ec e4       	ldi	r30, 0x4C	; 76
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	11 82       	std	Z+1, r1	; 0x01
    234e:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));
    2350:	a9 e5       	ldi	r26, 0x59	; 89
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e9 e5       	ldi	r30, 0x59	; 89
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8b 7e       	andi	r24, 0xEB	; 235
    235c:	8c 93       	st	X, r24
            g_timer1_callBackPtr = NULL_PTR;
    235e:	10 92 ab 01 	sts	0x01AB, r1
    2362:	10 92 aa 01 	sts	0x01AA, r1
    2366:	11 c0       	rjmp	.+34     	; 0x238a <Timer_deInit+0xa6>
            break;

        case TIMER2:
            TCCR2 = 0;
    2368:	e5 e4       	ldi	r30, 0x45	; 69
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	10 82       	st	Z, r1
            TCNT2 = 0;
    236e:	e4 e4       	ldi	r30, 0x44	; 68
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));
    2374:	a9 e5       	ldi	r26, 0x59	; 89
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e9 e5       	ldi	r30, 0x59	; 89
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8f 73       	andi	r24, 0x3F	; 63
    2380:	8c 93       	st	X, r24
            g_timer2_callBackPtr = NULL_PTR;
    2382:	10 92 ad 01 	sts	0x01AD, r1
    2386:	10 92 ac 01 	sts	0x01AC, r1
            break;
    }
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <Timer_setCallBack>:
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <Timer_setCallBack+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <Timer_setCallBack+0x8>
    239e:	0f 92       	push	r0
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	3d 83       	std	Y+5, r19	; 0x05
    23b2:	2c 83       	std	Y+4, r18	; 0x04
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	9d 81       	ldd	r25, Y+5	; 0x05
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	91 05       	cpc	r25, r1
    23bc:	81 f0       	breq	.+32     	; 0x23de <Timer_setCallBack+0x48>
    23be:	2c 81       	ldd	r18, Y+4	; 0x04
    23c0:	3d 81       	ldd	r19, Y+5	; 0x05
    23c2:	22 30       	cpi	r18, 0x02	; 2
    23c4:	31 05       	cpc	r19, r1
    23c6:	91 f0       	breq	.+36     	; 0x23ec <Timer_setCallBack+0x56>
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	9d 81       	ldd	r25, Y+5	; 0x05
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	a1 f4       	brne	.+40     	; 0x23f8 <Timer_setCallBack+0x62>
        case TIMER0:
            g_timer0_callBackPtr = a_ptr;
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	90 93 a9 01 	sts	0x01A9, r25
    23d8:	80 93 a8 01 	sts	0x01A8, r24
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <Timer_setCallBack+0x62>
            break;

        case TIMER1:
            g_timer1_callBackPtr = a_ptr;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	90 93 ab 01 	sts	0x01AB, r25
    23e6:	80 93 aa 01 	sts	0x01AA, r24
    23ea:	06 c0       	rjmp	.+12     	; 0x23f8 <Timer_setCallBack+0x62>
            break;

        case TIMER2:
            g_timer2_callBackPtr = a_ptr;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	90 93 ad 01 	sts	0x01AD, r25
    23f4:	80 93 ac 01 	sts	0x01AC, r24
            break;
    }
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <__vector_11>:

ISR(TIMER0_OVF_vect) {
    2408:	1f 92       	push	r1
    240a:	0f 92       	push	r0
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	0f 92       	push	r0
    2410:	11 24       	eor	r1, r1
    2412:	2f 93       	push	r18
    2414:	3f 93       	push	r19
    2416:	4f 93       	push	r20
    2418:	5f 93       	push	r21
    241a:	6f 93       	push	r22
    241c:	7f 93       	push	r23
    241e:	8f 93       	push	r24
    2420:	9f 93       	push	r25
    2422:	af 93       	push	r26
    2424:	bf 93       	push	r27
    2426:	ef 93       	push	r30
    2428:	ff 93       	push	r31
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    if (g_timer0_callBackPtr != NULL_PTR) {
    2432:	80 91 a8 01 	lds	r24, 0x01A8
    2436:	90 91 a9 01 	lds	r25, 0x01A9
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	29 f0       	breq	.+10     	; 0x2448 <__vector_11+0x40>
        (*g_timer0_callBackPtr)();
    243e:	e0 91 a8 01 	lds	r30, 0x01A8
    2442:	f0 91 a9 01 	lds	r31, 0x01A9
    2446:	09 95       	icall
    }
}
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	ff 91       	pop	r31
    244e:	ef 91       	pop	r30
    2450:	bf 91       	pop	r27
    2452:	af 91       	pop	r26
    2454:	9f 91       	pop	r25
    2456:	8f 91       	pop	r24
    2458:	7f 91       	pop	r23
    245a:	6f 91       	pop	r22
    245c:	5f 91       	pop	r21
    245e:	4f 91       	pop	r20
    2460:	3f 91       	pop	r19
    2462:	2f 91       	pop	r18
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	0f 90       	pop	r0
    246a:	1f 90       	pop	r1
    246c:	18 95       	reti

0000246e <__vector_10>:

ISR(TIMER0_COMP_vect) {
    246e:	1f 92       	push	r1
    2470:	0f 92       	push	r0
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	0f 92       	push	r0
    2476:	11 24       	eor	r1, r1
    2478:	2f 93       	push	r18
    247a:	3f 93       	push	r19
    247c:	4f 93       	push	r20
    247e:	5f 93       	push	r21
    2480:	6f 93       	push	r22
    2482:	7f 93       	push	r23
    2484:	8f 93       	push	r24
    2486:	9f 93       	push	r25
    2488:	af 93       	push	r26
    248a:	bf 93       	push	r27
    248c:	ef 93       	push	r30
    248e:	ff 93       	push	r31
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    if (g_timer0_callBackPtr != NULL_PTR) {
    2498:	80 91 a8 01 	lds	r24, 0x01A8
    249c:	90 91 a9 01 	lds	r25, 0x01A9
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	29 f0       	breq	.+10     	; 0x24ae <__vector_10+0x40>
        (*g_timer0_callBackPtr)();
    24a4:	e0 91 a8 01 	lds	r30, 0x01A8
    24a8:	f0 91 a9 01 	lds	r31, 0x01A9
    24ac:	09 95       	icall
    }
}
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	ff 91       	pop	r31
    24b4:	ef 91       	pop	r30
    24b6:	bf 91       	pop	r27
    24b8:	af 91       	pop	r26
    24ba:	9f 91       	pop	r25
    24bc:	8f 91       	pop	r24
    24be:	7f 91       	pop	r23
    24c0:	6f 91       	pop	r22
    24c2:	5f 91       	pop	r21
    24c4:	4f 91       	pop	r20
    24c6:	3f 91       	pop	r19
    24c8:	2f 91       	pop	r18
    24ca:	0f 90       	pop	r0
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	0f 90       	pop	r0
    24d0:	1f 90       	pop	r1
    24d2:	18 95       	reti

000024d4 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    24d4:	1f 92       	push	r1
    24d6:	0f 92       	push	r0
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	0f 92       	push	r0
    24dc:	11 24       	eor	r1, r1
    24de:	2f 93       	push	r18
    24e0:	3f 93       	push	r19
    24e2:	4f 93       	push	r20
    24e4:	5f 93       	push	r21
    24e6:	6f 93       	push	r22
    24e8:	7f 93       	push	r23
    24ea:	8f 93       	push	r24
    24ec:	9f 93       	push	r25
    24ee:	af 93       	push	r26
    24f0:	bf 93       	push	r27
    24f2:	ef 93       	push	r30
    24f4:	ff 93       	push	r31
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    if (g_timer1_callBackPtr != NULL_PTR) {
    24fe:	80 91 aa 01 	lds	r24, 0x01AA
    2502:	90 91 ab 01 	lds	r25, 0x01AB
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	29 f0       	breq	.+10     	; 0x2514 <__vector_9+0x40>
        (*g_timer1_callBackPtr)();
    250a:	e0 91 aa 01 	lds	r30, 0x01AA
    250e:	f0 91 ab 01 	lds	r31, 0x01AB
    2512:	09 95       	icall
    }
}
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	ff 91       	pop	r31
    251a:	ef 91       	pop	r30
    251c:	bf 91       	pop	r27
    251e:	af 91       	pop	r26
    2520:	9f 91       	pop	r25
    2522:	8f 91       	pop	r24
    2524:	7f 91       	pop	r23
    2526:	6f 91       	pop	r22
    2528:	5f 91       	pop	r21
    252a:	4f 91       	pop	r20
    252c:	3f 91       	pop	r19
    252e:	2f 91       	pop	r18
    2530:	0f 90       	pop	r0
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	0f 90       	pop	r0
    2536:	1f 90       	pop	r1
    2538:	18 95       	reti

0000253a <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	2f 93       	push	r18
    2546:	3f 93       	push	r19
    2548:	4f 93       	push	r20
    254a:	5f 93       	push	r21
    254c:	6f 93       	push	r22
    254e:	7f 93       	push	r23
    2550:	8f 93       	push	r24
    2552:	9f 93       	push	r25
    2554:	af 93       	push	r26
    2556:	bf 93       	push	r27
    2558:	ef 93       	push	r30
    255a:	ff 93       	push	r31
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    if (g_timer1_callBackPtr != NULL_PTR) {
    2564:	80 91 aa 01 	lds	r24, 0x01AA
    2568:	90 91 ab 01 	lds	r25, 0x01AB
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	29 f0       	breq	.+10     	; 0x257a <__vector_7+0x40>
        (*g_timer1_callBackPtr)();
    2570:	e0 91 aa 01 	lds	r30, 0x01AA
    2574:	f0 91 ab 01 	lds	r31, 0x01AB
    2578:	09 95       	icall
    }
}
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	ff 91       	pop	r31
    2580:	ef 91       	pop	r30
    2582:	bf 91       	pop	r27
    2584:	af 91       	pop	r26
    2586:	9f 91       	pop	r25
    2588:	8f 91       	pop	r24
    258a:	7f 91       	pop	r23
    258c:	6f 91       	pop	r22
    258e:	5f 91       	pop	r21
    2590:	4f 91       	pop	r20
    2592:	3f 91       	pop	r19
    2594:	2f 91       	pop	r18
    2596:	0f 90       	pop	r0
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	0f 90       	pop	r0
    259c:	1f 90       	pop	r1
    259e:	18 95       	reti

000025a0 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    25a0:	1f 92       	push	r1
    25a2:	0f 92       	push	r0
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	0f 92       	push	r0
    25a8:	11 24       	eor	r1, r1
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    if (g_timer2_callBackPtr != NULL_PTR) {
    25ca:	80 91 ac 01 	lds	r24, 0x01AC
    25ce:	90 91 ad 01 	lds	r25, 0x01AD
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	29 f0       	breq	.+10     	; 0x25e0 <__vector_5+0x40>
        (*g_timer2_callBackPtr)();
    25d6:	e0 91 ac 01 	lds	r30, 0x01AC
    25da:	f0 91 ad 01 	lds	r31, 0x01AD
    25de:	09 95       	icall
    }
}
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	ff 91       	pop	r31
    25e6:	ef 91       	pop	r30
    25e8:	bf 91       	pop	r27
    25ea:	af 91       	pop	r26
    25ec:	9f 91       	pop	r25
    25ee:	8f 91       	pop	r24
    25f0:	7f 91       	pop	r23
    25f2:	6f 91       	pop	r22
    25f4:	5f 91       	pop	r21
    25f6:	4f 91       	pop	r20
    25f8:	3f 91       	pop	r19
    25fa:	2f 91       	pop	r18
    25fc:	0f 90       	pop	r0
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	0f 90       	pop	r0
    2602:	1f 90       	pop	r1
    2604:	18 95       	reti

00002606 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2606:	1f 92       	push	r1
    2608:	0f 92       	push	r0
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	0f 92       	push	r0
    260e:	11 24       	eor	r1, r1
    2610:	2f 93       	push	r18
    2612:	3f 93       	push	r19
    2614:	4f 93       	push	r20
    2616:	5f 93       	push	r21
    2618:	6f 93       	push	r22
    261a:	7f 93       	push	r23
    261c:	8f 93       	push	r24
    261e:	9f 93       	push	r25
    2620:	af 93       	push	r26
    2622:	bf 93       	push	r27
    2624:	ef 93       	push	r30
    2626:	ff 93       	push	r31
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    if (g_timer2_callBackPtr != NULL_PTR) {
    2630:	80 91 ac 01 	lds	r24, 0x01AC
    2634:	90 91 ad 01 	lds	r25, 0x01AD
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	29 f0       	breq	.+10     	; 0x2646 <__vector_4+0x40>
        (*g_timer2_callBackPtr)();
    263c:	e0 91 ac 01 	lds	r30, 0x01AC
    2640:	f0 91 ad 01 	lds	r31, 0x01AD
    2644:	09 95       	icall
    }
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	ff 91       	pop	r31
    264c:	ef 91       	pop	r30
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	0f 90       	pop	r0
    2668:	1f 90       	pop	r1
    266a:	18 95       	reti

0000266c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <TWI_init+0x6>
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
    /* Set the Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8MHz */
	TWBR = Config_Ptr->bit_rate; // Set the TWI Bit Rate Register for 400 kHz
    267a:	a0 e2       	ldi	r26, 0x20	; 32
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	81 81       	ldd	r24, Z+1	; 0x01
    2684:	92 81       	ldd	r25, Z+2	; 0x02
    2686:	8c 93       	st	X, r24
    TWSR = 0x00; // Prescaler set to 1 (TWPS = 0)
    2688:	e1 e2       	ldi	r30, 0x21	; 33
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	10 82       	st	Z, r1


    TWAR = Config_Ptr->address;
    268e:	a2 e2       	ldi	r26, 0x22	; 34
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	80 81       	ld	r24, Z
    2698:	8c 93       	st	X, r24

    TWCR = (1 << TWEN); /* Enable TWI */
    269a:	e6 e5       	ldi	r30, 0x56	; 86
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	84 e0       	ldi	r24, 0x04	; 4
    26a0:	80 83       	st	Z, r24
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <TWI_start>:


void TWI_start(void)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    26b4:	e6 e5       	ldi	r30, 0x56	; 86
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	84 ea       	ldi	r24, 0xA4	; 164
    26ba:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26bc:	e6 e5       	ldi	r30, 0x56	; 86
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	88 23       	and	r24, r24
    26c4:	dc f7       	brge	.-10     	; 0x26bc <TWI_start+0x10>
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <TWI_stop>:

void TWI_stop(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    26d4:	e6 e5       	ldi	r30, 0x56	; 86
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	84 e9       	ldi	r24, 0x94	; 148
    26da:	80 83       	st	Z, r24
}
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	0f 92       	push	r0
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    26ee:	e3 e2       	ldi	r30, 0x23	; 35
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    26f6:	e6 e5       	ldi	r30, 0x56	; 86
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	84 e8       	ldi	r24, 0x84	; 132
    26fc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26fe:	e6 e5       	ldi	r30, 0x56	; 86
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	88 23       	and	r24, r24
    2706:	dc f7       	brge	.-10     	; 0x26fe <TWI_writeByte+0x1c>
}
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2718:	e6 e5       	ldi	r30, 0x56	; 86
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	84 ec       	ldi	r24, 0xC4	; 196
    271e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2720:	e6 e5       	ldi	r30, 0x56	; 86
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	88 23       	and	r24, r24
    2728:	dc f7       	brge	.-10     	; 0x2720 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    272a:	e3 e2       	ldi	r30, 0x23	; 35
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
}
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    273e:	e6 e5       	ldi	r30, 0x56	; 86
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	84 e8       	ldi	r24, 0x84	; 132
    2744:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2746:	e6 e5       	ldi	r30, 0x56	; 86
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	88 23       	and	r24, r24
    274e:	dc f7       	brge	.-10     	; 0x2746 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2750:	e3 e2       	ldi	r30, 0x23	; 35
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
}
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2766:	e1 e2       	ldi	r30, 0x21	; 33
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	88 7f       	andi	r24, 0xF8	; 248
    276e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
}
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <UART_init+0x6>
    2780:	00 d0       	rcall	.+0      	; 0x2782 <UART_init+0x8>
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    278a:	1a 82       	std	Y+2, r1	; 0x02
    278c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    278e:	eb e2       	ldi	r30, 0x2B	; 43
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2796:	ea e2       	ldi	r30, 0x2A	; 42
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	88 e1       	ldi	r24, 0x18	; 24
    279c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	if(Config_Ptr->bit_data!=UART_9_BIT_DATA)
    279e:	eb 81       	ldd	r30, Y+3	; 0x03
    27a0:	fc 81       	ldd	r31, Y+4	; 0x04
    27a2:	80 81       	ld	r24, Z
    27a4:	8a 30       	cpi	r24, 0x0A	; 10
    27a6:	81 f0       	breq	.+32     	; 0x27c8 <UART_init+0x4e>
		UCSRC = (1<<URSEL)|Config_Ptr->bit_data|Config_Ptr->parity|Config_Ptr->stop_bit ;
    27a8:	a0 e4       	ldi	r26, 0x40	; 64
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	eb 81       	ldd	r30, Y+3	; 0x03
    27ae:	fc 81       	ldd	r31, Y+4	; 0x04
    27b0:	90 81       	ld	r25, Z
    27b2:	eb 81       	ldd	r30, Y+3	; 0x03
    27b4:	fc 81       	ldd	r31, Y+4	; 0x04
    27b6:	81 81       	ldd	r24, Z+1	; 0x01
    27b8:	98 2b       	or	r25, r24
    27ba:	eb 81       	ldd	r30, Y+3	; 0x03
    27bc:	fc 81       	ldd	r31, Y+4	; 0x04
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	89 2b       	or	r24, r25
    27c2:	80 68       	ori	r24, 0x80	; 128
    27c4:	8c 93       	st	X, r24
    27c6:	17 c0       	rjmp	.+46     	; 0x27f6 <UART_init+0x7c>
	else if(Config_Ptr->bit_data==UART_9_BIT_DATA){
    27c8:	eb 81       	ldd	r30, Y+3	; 0x03
    27ca:	fc 81       	ldd	r31, Y+4	; 0x04
    27cc:	80 81       	ld	r24, Z
    27ce:	8a 30       	cpi	r24, 0x0A	; 10
    27d0:	91 f4       	brne	.+36     	; 0x27f6 <UART_init+0x7c>
		UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)|Config_Ptr->parity|Config_Ptr->stop_bit;
    27d2:	a0 e4       	ldi	r26, 0x40	; 64
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	eb 81       	ldd	r30, Y+3	; 0x03
    27d8:	fc 81       	ldd	r31, Y+4	; 0x04
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	eb 81       	ldd	r30, Y+3	; 0x03
    27de:	fc 81       	ldd	r31, Y+4	; 0x04
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	89 2b       	or	r24, r25
    27e4:	86 68       	ori	r24, 0x86	; 134
    27e6:	8c 93       	st	X, r24
		UCSRB|=(1<<UCSZ2);
    27e8:	aa e2       	ldi	r26, 0x2A	; 42
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ea e2       	ldi	r30, 0x2A	; 42
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	84 60       	ori	r24, 0x04	; 4
    27f4:	8c 93       	st	X, r24
	}


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    27f6:	eb 81       	ldd	r30, Y+3	; 0x03
    27f8:	fc 81       	ldd	r31, Y+4	; 0x04
    27fa:	83 81       	ldd	r24, Z+3	; 0x03
    27fc:	94 81       	ldd	r25, Z+4	; 0x04
    27fe:	a5 81       	ldd	r26, Z+5	; 0x05
    2800:	b6 81       	ldd	r27, Z+6	; 0x06
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	aa 1f       	adc	r26, r26
    2808:	bb 1f       	adc	r27, r27
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	aa 1f       	adc	r26, r26
    2810:	bb 1f       	adc	r27, r27
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	aa 1f       	adc	r26, r26
    2818:	bb 1f       	adc	r27, r27
    281a:	9c 01       	movw	r18, r24
    281c:	ad 01       	movw	r20, r26
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	92 e1       	ldi	r25, 0x12	; 18
    2822:	aa e7       	ldi	r26, 0x7A	; 122
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 c0 14 	call	0x2980	; 0x2980 <__udivmodsi4>
    282e:	da 01       	movw	r26, r20
    2830:	c9 01       	movw	r24, r18
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2838:	e0 e4       	ldi	r30, 0x40	; 64
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	89 2f       	mov	r24, r25
    2842:	99 27       	eor	r25, r25
    2844:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2846:	e9 e2       	ldi	r30, 0x29	; 41
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	80 83       	st	Z, r24
}
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	0f 92       	push	r0
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2868:	eb e2       	ldi	r30, 0x2B	; 43
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	80 72       	andi	r24, 0x20	; 32
    2874:	90 70       	andi	r25, 0x00	; 0
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	b9 f3       	breq	.-18     	; 0x2868 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    287a:	ec e2       	ldi	r30, 0x2C	; 44
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2892:	eb e2       	ldi	r30, 0x2B	; 43
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	88 23       	and	r24, r24
    289a:	dc f7       	brge	.-10     	; 0x2892 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    289c:	ec e2       	ldi	r30, 0x2C	; 44
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
}
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <UART_sendString+0x6>
    28ae:	0f 92       	push	r0
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9b 83       	std	Y+3, r25	; 0x03
    28b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28b8:	19 82       	std	Y+1, r1	; 0x01
    28ba:	0e c0       	rjmp	.+28     	; 0x28d8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 0f       	add	r30, r18
    28ca:	f3 1f       	adc	r31, r19
    28cc:	80 81       	ld	r24, Z
    28ce:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
		i++;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	80 81       	ld	r24, Z
    28ea:	88 23       	and	r24, r24
    28ec:	39 f7       	brne	.-50     	; 0x28bc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <UART_receiveString+0xa>
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9b 83       	std	Y+3, r25	; 0x03
    290c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    290e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	8c 01       	movw	r16, r24
    291c:	02 0f       	add	r16, r18
    291e:	13 1f       	adc	r17, r19
    2920:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    2924:	f8 01       	movw	r30, r16
    2926:	80 83       	st	Z, r24
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	8c 01       	movw	r16, r24
    293c:	02 0f       	add	r16, r18
    293e:	13 1f       	adc	r17, r19
    2940:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    2944:	f8 01       	movw	r30, r16
    2946:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	9b 81       	ldd	r25, Y+3	; 0x03
    2952:	fc 01       	movw	r30, r24
    2954:	e2 0f       	add	r30, r18
    2956:	f3 1f       	adc	r31, r19
    2958:	80 81       	ld	r24, Z
    295a:	83 32       	cpi	r24, 0x23	; 35
    295c:	31 f7       	brne	.-52     	; 0x292a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	fc 01       	movw	r30, r24
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	10 82       	st	Z, r1
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	08 95       	ret

00002980 <__udivmodsi4>:
    2980:	a1 e2       	ldi	r26, 0x21	; 33
    2982:	1a 2e       	mov	r1, r26
    2984:	aa 1b       	sub	r26, r26
    2986:	bb 1b       	sub	r27, r27
    2988:	fd 01       	movw	r30, r26
    298a:	0d c0       	rjmp	.+26     	; 0x29a6 <__udivmodsi4_ep>

0000298c <__udivmodsi4_loop>:
    298c:	aa 1f       	adc	r26, r26
    298e:	bb 1f       	adc	r27, r27
    2990:	ee 1f       	adc	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	a2 17       	cp	r26, r18
    2996:	b3 07       	cpc	r27, r19
    2998:	e4 07       	cpc	r30, r20
    299a:	f5 07       	cpc	r31, r21
    299c:	20 f0       	brcs	.+8      	; 0x29a6 <__udivmodsi4_ep>
    299e:	a2 1b       	sub	r26, r18
    29a0:	b3 0b       	sbc	r27, r19
    29a2:	e4 0b       	sbc	r30, r20
    29a4:	f5 0b       	sbc	r31, r21

000029a6 <__udivmodsi4_ep>:
    29a6:	66 1f       	adc	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	1a 94       	dec	r1
    29b0:	69 f7       	brne	.-38     	; 0x298c <__udivmodsi4_loop>
    29b2:	60 95       	com	r22
    29b4:	70 95       	com	r23
    29b6:	80 95       	com	r24
    29b8:	90 95       	com	r25
    29ba:	9b 01       	movw	r18, r22
    29bc:	ac 01       	movw	r20, r24
    29be:	bd 01       	movw	r22, r26
    29c0:	cf 01       	movw	r24, r30
    29c2:	08 95       	ret

000029c4 <__prologue_saves__>:
    29c4:	2f 92       	push	r2
    29c6:	3f 92       	push	r3
    29c8:	4f 92       	push	r4
    29ca:	5f 92       	push	r5
    29cc:	6f 92       	push	r6
    29ce:	7f 92       	push	r7
    29d0:	8f 92       	push	r8
    29d2:	9f 92       	push	r9
    29d4:	af 92       	push	r10
    29d6:	bf 92       	push	r11
    29d8:	cf 92       	push	r12
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	ca 1b       	sub	r28, r26
    29ee:	db 0b       	sbc	r29, r27
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	09 94       	ijmp

000029fc <__epilogue_restores__>:
    29fc:	2a 88       	ldd	r2, Y+18	; 0x12
    29fe:	39 88       	ldd	r3, Y+17	; 0x11
    2a00:	48 88       	ldd	r4, Y+16	; 0x10
    2a02:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a04:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a06:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a08:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a10:	c8 84       	ldd	r12, Y+8	; 0x08
    2a12:	df 80       	ldd	r13, Y+7	; 0x07
    2a14:	ee 80       	ldd	r14, Y+6	; 0x06
    2a16:	fd 80       	ldd	r15, Y+5	; 0x05
    2a18:	0c 81       	ldd	r16, Y+4	; 0x04
    2a1a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a1c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a20:	ce 0f       	add	r28, r30
    2a22:	d1 1d       	adc	r29, r1
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	ed 01       	movw	r28, r26
    2a30:	08 95       	ret

00002a32 <_exit>:
    2a32:	f8 94       	cli

00002a34 <__stop_program>:
    2a34:	ff cf       	rjmp	.-2      	; 0x2a34 <__stop_program>
