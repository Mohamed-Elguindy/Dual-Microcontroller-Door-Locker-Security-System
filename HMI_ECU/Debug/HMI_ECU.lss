
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00003298  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800122  00800122  000033ee  2**0
                  ALLOC
  3 .stab         00003168  00000000  00000000  000033f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000136a  00000000  00000000  00006558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000078c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000097bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b841  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c00f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__vector_4>
      14:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__vector_9>
      28:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__vector_10>
      2c:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 34       	cpi	r26, 0x4D	; 77
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 07 	call	0xe9c	; 0xe9c <main>
      8a:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e0       	ldi	r26, 0x0A	; 10
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timerCallBack>:

void open_door(void);
void change_password(void);
void change_enter_password(void);

void timerCallBack(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    tick++;
     b4e:	80 91 26 01 	lds	r24, 0x0126
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 26 01 	sts	0x0126, r24
    if(tick == 3){
     b58:	80 91 26 01 	lds	r24, 0x0126
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	49 f4       	brne	.+18     	; 0xb72 <timerCallBack+0x2c>
        t_15s_flag =1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 27 01 	sts	0x0127, r24
        tick = 0;
     b66:	10 92 26 01 	sts	0x0126, r1
        Timer_deInit(TIMER1);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <Timer_deInit>
     b70:	10 c0       	rjmp	.+32     	; 0xb92 <timerCallBack+0x4c>
    }
    else if((Alarm_flag) && (tick == 12)){
     b72:	80 91 22 01 	lds	r24, 0x0122
     b76:	88 23       	and	r24, r24
     b78:	61 f0       	breq	.+24     	; 0xb92 <timerCallBack+0x4c>
     b7a:	80 91 26 01 	lds	r24, 0x0126
     b7e:	8c 30       	cpi	r24, 0x0C	; 12
     b80:	41 f4       	brne	.+16     	; 0xb92 <timerCallBack+0x4c>
        t_60s_flag = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 28 01 	sts	0x0128, r24
        tick = 0;
     b88:	10 92 26 01 	sts	0x0126, r1
        Timer_deInit(TIMER1);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <Timer_deInit>
    }
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <enter_password>:
void enter_password(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6e 97       	sbiw	r28, 0x1e	; 30
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
    uint8 i,key;
    for (i = 0; i < pass_size; i++) {
     bac:	1e 8e       	std	Y+30, r1	; 0x1e
     bae:	44 c1       	rjmp	.+648    	; 0xe38 <enter_password+0x2a0>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	a6 e9       	ldi	r26, 0x96	; 150
     bb6:	b3 e4       	ldi	r27, 0x43	; 67
     bb8:	89 8f       	std	Y+25, r24	; 0x19
     bba:	9a 8f       	std	Y+26, r25	; 0x1a
     bbc:	ab 8f       	std	Y+27, r26	; 0x1b
     bbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc0:	69 8d       	ldd	r22, Y+25	; 0x19
     bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a ef       	ldi	r20, 0xFA	; 250
     bce:	54 e4       	ldi	r21, 0x44	; 68
     bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	8d 8b       	std	Y+21, r24	; 0x15
     bda:	9e 8b       	std	Y+22, r25	; 0x16
     bdc:	af 8b       	std	Y+23, r26	; 0x17
     bde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     be0:	6d 89       	ldd	r22, Y+21	; 0x15
     be2:	7e 89       	ldd	r23, Y+22	; 0x16
     be4:	8f 89       	ldd	r24, Y+23	; 0x17
     be6:	98 8d       	ldd	r25, Y+24	; 0x18
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	2c f4       	brge	.+10     	; 0xc02 <enter_password+0x6a>
		__ticks = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 8b       	std	Y+20, r25	; 0x14
     bfe:	8b 8b       	std	Y+19, r24	; 0x13
     c00:	3f c0       	rjmp	.+126    	; 0xc80 <enter_password+0xe8>
	else if (__tmp > 65535)
     c02:	6d 89       	ldd	r22, Y+21	; 0x15
     c04:	7e 89       	ldd	r23, Y+22	; 0x16
     c06:	8f 89       	ldd	r24, Y+23	; 0x17
     c08:	98 8d       	ldd	r25, Y+24	; 0x18
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	57 e4       	ldi	r21, 0x47	; 71
     c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c16:	18 16       	cp	r1, r24
     c18:	4c f5       	brge	.+82     	; 0xc6c <enter_password+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	69 8d       	ldd	r22, Y+25	; 0x19
     c1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e2       	ldi	r20, 0x20	; 32
     c28:	51 e4       	ldi	r21, 0x41	; 65
     c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9c 8b       	std	Y+20, r25	; 0x14
     c40:	8b 8b       	std	Y+19, r24	; 0x13
     c42:	0f c0       	rjmp	.+30     	; 0xc62 <enter_password+0xca>
     c44:	88 ec       	ldi	r24, 0xC8	; 200
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9a 8b       	std	Y+18, r25	; 0x12
     c4a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4c:	89 89       	ldd	r24, Y+17	; 0x11
     c4e:	9a 89       	ldd	r25, Y+18	; 0x12
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <enter_password+0xb8>
     c54:	9a 8b       	std	Y+18, r25	; 0x12
     c56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c58:	8b 89       	ldd	r24, Y+19	; 0x13
     c5a:	9c 89       	ldd	r25, Y+20	; 0x14
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	9c 8b       	std	Y+20, r25	; 0x14
     c60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c62:	8b 89       	ldd	r24, Y+19	; 0x13
     c64:	9c 89       	ldd	r25, Y+20	; 0x14
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	69 f7       	brne	.-38     	; 0xc44 <enter_password+0xac>
     c6a:	14 c0       	rjmp	.+40     	; 0xc94 <enter_password+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6c:	6d 89       	ldd	r22, Y+21	; 0x15
     c6e:	7e 89       	ldd	r23, Y+22	; 0x16
     c70:	8f 89       	ldd	r24, Y+23	; 0x17
     c72:	98 8d       	ldd	r25, Y+24	; 0x18
     c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	9c 8b       	std	Y+20, r25	; 0x14
     c7e:	8b 8b       	std	Y+19, r24	; 0x13
     c80:	8b 89       	ldd	r24, Y+19	; 0x13
     c82:	9c 89       	ldd	r25, Y+20	; 0x14
     c84:	98 8b       	std	Y+16, r25	; 0x10
     c86:	8f 87       	std	Y+15, r24	; 0x0f
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	98 89       	ldd	r25, Y+16	; 0x10
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <enter_password+0xf4>
     c90:	98 8b       	std	Y+16, r25	; 0x10
     c92:	8f 87       	std	Y+15, r24	; 0x0f
    	_delay_ms(300);
        while (1) {
            key = KEYPAD_getPressedKey();
     c94:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
     c98:	8d 8f       	std	Y+29, r24	; 0x1d
            if (key != '\0') {
     c9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c9c:	88 23       	and	r24, r24
     c9e:	d1 f3       	breq	.-12     	; 0xc94 <enter_password+0xfc>
                if (key == enter_button) {
     ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ca2:	8d 30       	cpi	r24, 0x0D	; 13
     ca4:	09 f4       	brne	.+2      	; 0xca8 <enter_password+0x110>
     ca6:	d0 c0       	rjmp	.+416    	; 0xe48 <enter_password+0x2b0>
                    return;
                }
                else if (key >= 0 && key <= 9) {
     ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     caa:	8a 30       	cpi	r24, 0x0A	; 10
     cac:	98 f7       	brcc	.-26     	; 0xc94 <enter_password+0xfc>
                	if(step==1)
     cae:	80 91 12 01 	lds	r24, 0x0112
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	49 f4       	brne	.+18     	; 0xcc8 <enter_password+0x130>
                        pass1[i] = key;
     cb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	ed 5b       	subi	r30, 0xBD	; 189
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc4:	80 83       	st	Z, r24
     cc6:	37 c0       	rjmp	.+110    	; 0xd36 <enter_password+0x19e>
                	else if(step==2)
     cc8:	80 91 12 01 	lds	r24, 0x0112
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	49 f4       	brne	.+18     	; 0xce2 <enter_password+0x14a>
                        pass2[i] = key;
     cd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 5c       	subi	r30, 0xC2	; 194
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cde:	80 83       	st	Z, r24
     ce0:	2a c0       	rjmp	.+84     	; 0xd36 <enter_password+0x19e>
                	else if(step==3){
     ce2:	80 91 12 01 	lds	r24, 0x0112
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	31 f5       	brne	.+76     	; 0xd36 <enter_password+0x19e>
                		if(wrong_pass_counter==0)
     cea:	80 91 24 01 	lds	r24, 0x0124
     cee:	88 23       	and	r24, r24
     cf0:	49 f4       	brne	.+18     	; 0xd04 <enter_password+0x16c>
                			pass3[i] = key;
     cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	fc 01       	movw	r30, r24
     cfa:	ec 5c       	subi	r30, 0xCC	; 204
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d00:	80 83       	st	Z, r24
     d02:	19 c0       	rjmp	.+50     	; 0xd36 <enter_password+0x19e>
                		else if(wrong_pass_counter==1)
     d04:	80 91 24 01 	lds	r24, 0x0124
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	49 f4       	brne	.+18     	; 0xd1e <enter_password+0x186>
                			pass3_1[i] = key;
     d0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	fc 01       	movw	r30, r24
     d14:	e8 5b       	subi	r30, 0xB8	; 184
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d1a:	80 83       	st	Z, r24
     d1c:	0c c0       	rjmp	.+24     	; 0xd36 <enter_password+0x19e>
                		else if(wrong_pass_counter==2)
     d1e:	80 91 24 01 	lds	r24, 0x0124
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	41 f4       	brne	.+16     	; 0xd36 <enter_password+0x19e>
                			pass3_2[i] = key;
     d26:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	fc 01       	movw	r30, r24
     d2e:	e7 5c       	subi	r30, 0xC7	; 199
     d30:	fe 4f       	sbci	r31, 0xFE	; 254
     d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d34:	80 83       	st	Z, r24
                	}
                    LCD_moveCursor(1, move+i);
     d36:	90 91 23 01 	lds	r25, 0x0123
     d3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3c:	98 0f       	add	r25, r24
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	69 2f       	mov	r22, r25
     d42:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	a8 e4       	ldi	r26, 0x48	; 72
     d4c:	b2 e4       	ldi	r27, 0x42	; 66
     d4e:	8b 87       	std	Y+11, r24	; 0x0b
     d50:	9c 87       	std	Y+12, r25	; 0x0c
     d52:	ad 87       	std	Y+13, r26	; 0x0d
     d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d56:	6b 85       	ldd	r22, Y+11	; 0x0b
     d58:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	4a ef       	ldi	r20, 0xFA	; 250
     d64:	54 e4       	ldi	r21, 0x44	; 68
     d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	8f 83       	std	Y+7, r24	; 0x07
     d70:	98 87       	std	Y+8, r25	; 0x08
     d72:	a9 87       	std	Y+9, r26	; 0x09
     d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d76:	6f 81       	ldd	r22, Y+7	; 0x07
     d78:	78 85       	ldd	r23, Y+8	; 0x08
     d7a:	89 85       	ldd	r24, Y+9	; 0x09
     d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	2c f4       	brge	.+10     	; 0xd98 <enter_password+0x200>
		__ticks = 1;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	3f c0       	rjmp	.+126    	; 0xe16 <enter_password+0x27e>
	else if (__tmp > 65535)
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	3f ef       	ldi	r19, 0xFF	; 255
     da4:	4f e7       	ldi	r20, 0x7F	; 127
     da6:	57 e4       	ldi	r21, 0x47	; 71
     da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dac:	18 16       	cp	r1, r24
     dae:	4c f5       	brge	.+82     	; 0xe02 <enter_password+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db0:	6b 85       	ldd	r22, Y+11	; 0x0b
     db2:	7c 85       	ldd	r23, Y+12	; 0x0c
     db4:	8d 85       	ldd	r24, Y+13	; 0x0d
     db6:	9e 85       	ldd	r25, Y+14	; 0x0e
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e2       	ldi	r20, 0x20	; 32
     dbe:	51 e4       	ldi	r21, 0x41	; 65
     dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	0f c0       	rjmp	.+30     	; 0xdf8 <enter_password+0x260>
     dda:	88 ec       	ldi	r24, 0xC8	; 200
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <enter_password+0x24e>
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	69 f7       	brne	.-38     	; 0xdda <enter_password+0x242>
     e00:	14 c0       	rjmp	.+40     	; 0xe2a <enter_password+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <enter_password+0x28a>
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
                    //LCD_intgerToString(pass1[i]);
                    _delay_ms(50);
                    LCD_displayString("*");
     e2a:	80 e6       	ldi	r24, 0x60	; 96
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
        Timer_deInit(TIMER1);
    }
}
void enter_password(void) {
    uint8 i,key;
    for (i = 0; i < pass_size; i++) {
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	8e 8f       	std	Y+30, r24	; 0x1e
     e38:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <enter_password+0x2a8>
     e3e:	b8 ce       	rjmp	.-656    	; 0xbb0 <enter_password+0x18>
                    break;
                }
            }
        }
    }
    while(KEYPAD_getPressedKey()!=13){
     e40:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
     e44:	8d 30       	cpi	r24, 0x0D	; 13
     e46:	e1 f7       	brne	.-8      	; 0xe40 <enter_password+0x2a8>
    }
}
     e48:	6e 96       	adiw	r28, 0x1e	; 30
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <send_pass>:
void send_pass(uint8 password_arr[]){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <send_pass+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9b 83       	std	Y+3, r25	; 0x03
     e68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;i<pass_size;i++){
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	0e c0       	rjmp	.+28     	; 0xe8a <send_pass+0x30>
			UART_sendByte(password_arr[i]);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	fc 01       	movw	r30, r24
     e7a:	e2 0f       	add	r30, r18
     e7c:	f3 1f       	adc	r31, r19
     e7e:	80 81       	ld	r24, Z
     e80:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_sendByte>
    while(KEYPAD_getPressedKey()!=13){
    }
}
void send_pass(uint8 password_arr[]){
	uint8 i;
	for(i=0;i<pass_size;i++){
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	78 f3       	brcs	.-34     	; 0xe6e <send_pass+0x14>
			UART_sendByte(password_arr[i]);
			//_delay_ms(10);
		}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <main>:
Timer_ConfigType timer = {0,39062,TIMER1,F_CPU_1024,COMPARE};
int main(void) {
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	6e 97       	sbiw	r28, 0x1e	; 30
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
    UART_ConfigType uart = {UART_8_BIT_DATA, UART_NO_PARITY, UART_ONE_STOP_BIT, 9600};
     eb0:	9e 01       	movw	r18, r28
     eb2:	2f 5e       	subi	r18, 0xEF	; 239
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	3b 8f       	std	Y+27, r19	; 0x1b
     eb8:	2a 8f       	std	Y+26, r18	; 0x1a
     eba:	8a e1       	ldi	r24, 0x1A	; 26
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	9d 8f       	std	Y+29, r25	; 0x1d
     ec0:	8c 8f       	std	Y+28, r24	; 0x1c
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	9e 8f       	std	Y+30, r25	; 0x1e
     ec6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ec8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     eca:	00 80       	ld	r0, Z
     ecc:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ece:	3d 8d       	ldd	r19, Y+29	; 0x1d
     ed0:	2f 5f       	subi	r18, 0xFF	; 255
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	3d 8f       	std	Y+29, r19	; 0x1d
     ed6:	2c 8f       	std	Y+28, r18	; 0x1c
     ed8:	ea 8d       	ldd	r30, Y+26	; 0x1a
     eda:	fb 8d       	ldd	r31, Y+27	; 0x1b
     edc:	00 82       	st	Z, r0
     ede:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ee0:	3b 8d       	ldd	r19, Y+27	; 0x1b
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	3b 8f       	std	Y+27, r19	; 0x1b
     ee8:	2a 8f       	std	Y+26, r18	; 0x1a
     eea:	3e 8d       	ldd	r19, Y+30	; 0x1e
     eec:	31 50       	subi	r19, 0x01	; 1
     eee:	3e 8f       	std	Y+30, r19	; 0x1e
     ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ef2:	88 23       	and	r24, r24
     ef4:	41 f7       	brne	.-48     	; 0xec6 <main+0x2a>

    LCD_init();
     ef6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_init>
    UART_init(&uart);
     efa:	ce 01       	movw	r24, r28
     efc:	41 96       	adiw	r24, 0x11	; 17
     efe:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <UART_init>
    LCD_displayString("Door Lock System");
     f02:	82 e6       	ldi	r24, 0x62	; 98
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	aa ef       	ldi	r26, 0xFA	; 250
     f10:	b3 e4       	ldi	r27, 0x43	; 67
     f12:	8b 87       	std	Y+11, r24	; 0x0b
     f14:	9c 87       	std	Y+12, r25	; 0x0c
     f16:	ad 87       	std	Y+13, r26	; 0x0d
     f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	4a ef       	ldi	r20, 0xFA	; 250
     f28:	54 e4       	ldi	r21, 0x44	; 68
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	98 87       	std	Y+8, r25	; 0x08
     f36:	a9 87       	std	Y+9, r26	; 0x09
     f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e8       	ldi	r20, 0x80	; 128
     f48:	5f e3       	ldi	r21, 0x3F	; 63
     f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f4e:	88 23       	and	r24, r24
     f50:	2c f4       	brge	.+10     	; 0xf5c <main+0xc0>
		__ticks = 1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	3f c0       	rjmp	.+126    	; 0xfda <main+0x13e>
	else if (__tmp > 65535)
     f5c:	6f 81       	ldd	r22, Y+7	; 0x07
     f5e:	78 85       	ldd	r23, Y+8	; 0x08
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f70:	18 16       	cp	r1, r24
     f72:	4c f5       	brge	.+82     	; 0xfc6 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f74:	6b 85       	ldd	r22, Y+11	; 0x0b
     f76:	7c 85       	ldd	r23, Y+12	; 0x0c
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9e 83       	std	Y+6, r25	; 0x06
     f9a:	8d 83       	std	Y+5, r24	; 0x05
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <main+0x120>
     f9e:	88 ec       	ldi	r24, 0xC8	; 200
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <main+0x10e>
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	69 f7       	brne	.-38     	; 0xf9e <main+0x102>
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc6:	6f 81       	ldd	r22, Y+7	; 0x07
     fc8:	78 85       	ldd	r23, Y+8	; 0x08
     fca:	89 85       	ldd	r24, Y+9	; 0x09
     fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <main+0x14a>
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    sei();
     fee:	78 94       	sei

    while (1) {
        switch (step) {
     ff0:	80 91 12 01 	lds	r24, 0x0112
     ff4:	e8 2f       	mov	r30, r24
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	f9 8f       	std	Y+25, r31	; 0x19
     ffa:	e8 8f       	std	Y+24, r30	; 0x18
     ffc:	28 8d       	ldd	r18, Y+24	; 0x18
     ffe:	39 8d       	ldd	r19, Y+25	; 0x19
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	19 f1       	breq	.+70     	; 0x104c <main+0x1b0>
    1006:	88 8d       	ldd	r24, Y+24	; 0x18
    1008:	99 8d       	ldd	r25, Y+25	; 0x19
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <main+0x176>
    1010:	48 c0       	rjmp	.+144    	; 0x10a2 <main+0x206>
    1012:	e8 8d       	ldd	r30, Y+24	; 0x18
    1014:	f9 8d       	ldd	r31, Y+25	; 0x19
    1016:	e1 30       	cpi	r30, 0x01	; 1
    1018:	f1 05       	cpc	r31, r1
    101a:	51 f7       	brne	.-44     	; 0xff0 <main+0x154>
            case 1:
                move = 0;
    101c:	10 92 23 01 	sts	0x0123, r1
                LCD_clearScreen();
    1020:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
                LCD_displayString("plz enter pass:");
    1024:	83 e7       	ldi	r24, 0x73	; 115
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
                LCD_moveCursor(1, 0);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
                enter_password();
    1034:	0e 94 cc 05 	call	0xb98	; 0xb98 <enter_password>
                send_pass(pass1);
    1038:	83 e4       	ldi	r24, 0x43	; 67
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_pass>
                step++;
    1040:	80 91 12 01 	lds	r24, 0x0112
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	80 93 12 01 	sts	0x0112, r24
    104a:	d2 cf       	rjmp	.-92     	; 0xff0 <main+0x154>
                break;

            case 2:
                LCD_clearScreen();
    104c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
                LCD_displayString("plz re-enter the");
    1050:	83 e8       	ldi	r24, 0x83	; 131
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
                LCD_moveCursor(1, 0);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
                LCD_displayString("same pass:");
    1060:	84 e9       	ldi	r24, 0x94	; 148
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
                move = 10;
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	80 93 23 01 	sts	0x0123, r24
                enter_password();
    106e:	0e 94 cc 05 	call	0xb98	; 0xb98 <enter_password>
                send_pass(pass2);
    1072:	8e e3       	ldi	r24, 0x3E	; 62
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_pass>
                uint8 flag = UART_recieveByte();
    107a:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    107e:	88 8b       	std	Y+16, r24	; 0x10
                if (flag == 1) {
    1080:	88 89       	ldd	r24, Y+16	; 0x10
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	31 f4       	brne	.+12     	; 0x1092 <main+0x1f6>
                    step++;
    1086:	80 91 12 01 	lds	r24, 0x0112
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	80 93 12 01 	sts	0x0112, r24
    1090:	af cf       	rjmp	.-162    	; 0xff0 <main+0x154>
                } else if (flag == 0) {
    1092:	88 89       	ldd	r24, Y+16	; 0x10
    1094:	88 23       	and	r24, r24
    1096:	09 f0       	breq	.+2      	; 0x109a <main+0x1fe>
    1098:	ab cf       	rjmp	.-170    	; 0xff0 <main+0x154>
                    step = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 12 01 	sts	0x0112, r24
    10a0:	a7 cf       	rjmp	.-178    	; 0xff0 <main+0x154>
                }
                break;

            case 3:
                LCD_clearScreen();
    10a2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
                LCD_moveCursor(0, 0);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
                LCD_displayString("+ : Open Door");
    10ae:	8f e9       	ldi	r24, 0x9F	; 159
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
                LCD_moveCursor(1, 0);
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
                LCD_displayString("- : Change Pass");
    10be:	8d ea       	ldi	r24, 0xAD	; 173
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
                uint8 choice = KEYPAD_getPressedKey();
    10c6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
    10ca:	8f 87       	std	Y+15, r24	; 0x0f
                if (choice == '+') {
    10cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ce:	8b 32       	cpi	r24, 0x2B	; 43
    10d0:	19 f4       	brne	.+6      	; 0x10d8 <main+0x23c>
                	open_door();
    10d2:	0e 94 05 09 	call	0x120a	; 0x120a <open_door>
    10d6:	8c cf       	rjmp	.-232    	; 0xff0 <main+0x154>
                }
                else if (choice == '-') {
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10da:	8d 32       	cpi	r24, 0x2D	; 45
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <main+0x244>
    10de:	88 cf       	rjmp	.-240    	; 0xff0 <main+0x154>
                	change_password();
    10e0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <change_password>
    10e4:	85 cf       	rjmp	.-246    	; 0xff0 <main+0x154>

000010e6 <change_password>:
                }
                break;
        }
    }
}
void change_password(void){
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	if(c_wrong_pass_counter>2){
    10f0:	80 91 25 01 	lds	r24, 0x0125
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	e8 f1       	brcs	.+122    	; 0x1172 <change_password+0x8c>
	    LCD_clearScreen();
    10f8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
	    LCD_displayString("ERROR");
    10fc:	8d eb       	ldi	r24, 0xBD	; 189
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
	    //_delay_ms(6000);
	    c_wrong_pass_counter=0;
    1104:	10 92 25 01 	sts	0x0125, r1
    1108:	7c c0       	rjmp	.+248    	; 0x1202 <change_password+0x11c>
	}
	else{

	while(c_wrong_pass_counter<=2){
		UART_sendByte('-');
    110a:	8d e2       	ldi	r24, 0x2D	; 45
    110c:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_sendByte>
        move = 0;
    1110:	10 92 23 01 	sts	0x0123, r1
        LCD_clearScreen();
    1114:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
        LCD_displayString("plz enter old");
    1118:	83 ec       	ldi	r24, 0xC3	; 195
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
        LCD_moveCursor(1, 0);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
        LCD_displayString("pass:");
    1128:	81 ed       	ldi	r24, 0xD1	; 209
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
        LCD_moveCursor(1, 5);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	65 e0       	ldi	r22, 0x05	; 5
    1134:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
        move=5;
    1138:	85 e0       	ldi	r24, 0x05	; 5
    113a:	80 93 23 01 	sts	0x0123, r24
        change_enter_password();
    113e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <change_enter_password>
        send_pass(change_pass);
    1142:	8f e2       	ldi	r24, 0x2F	; 47
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_pass>
        uint8 c_flag =UART_recieveByte();
    114a:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    114e:	89 83       	std	Y+1, r24	; 0x01
        if(c_flag==1){
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	31 f4       	brne	.+12     	; 0x1162 <change_password+0x7c>
        	c_wrong_pass_counter = 0;
    1156:	10 92 25 01 	sts	0x0125, r1
        	step=1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 12 01 	sts	0x0112, r24
    1160:	50 c0       	rjmp	.+160    	; 0x1202 <change_password+0x11c>
        	return;
        }
        else if(c_flag==0){
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 23       	and	r24, r24
    1166:	29 f4       	brne	.+10     	; 0x1172 <change_password+0x8c>
            c_wrong_pass_counter++;
    1168:	80 91 25 01 	lds	r24, 0x0125
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	80 93 25 01 	sts	0x0125, r24
	    //_delay_ms(6000);
	    c_wrong_pass_counter=0;
	}
	else{

	while(c_wrong_pass_counter<=2){
    1172:	80 91 25 01 	lds	r24, 0x0125
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	40 f2       	brcs	.-112    	; 0x110a <change_password+0x24>
        else if(c_flag==0){
            c_wrong_pass_counter++;
        }

	}
    LCD_clearScreen();
    117a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
    LCD_displayString("ERROR");
    117e:	8d eb       	ldi	r24, 0xBD	; 189
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
    Timer_setCallBack(timerCallBack,TIMER1);
    1186:	83 ea       	ldi	r24, 0xA3	; 163
    1188:	95 e0       	ldi	r25, 0x05	; 5
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    1190:	83 e1       	ldi	r24, 0x13	; 19
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    1198:	80 91 27 01 	lds	r24, 0x0127
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	e1 f7       	brne	.-8      	; 0x1198 <change_password+0xb2>
    t_15s_flag=0;
    11a0:	10 92 27 01 	sts	0x0127, r1
    Timer_setCallBack(timerCallBack,TIMER1);
    11a4:	83 ea       	ldi	r24, 0xA3	; 163
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    11ae:	83 e1       	ldi	r24, 0x13	; 19
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    11b6:	80 91 27 01 	lds	r24, 0x0127
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <change_password+0xd0>
    t_15s_flag=0;
    11be:	10 92 27 01 	sts	0x0127, r1
    Timer_setCallBack(timerCallBack,TIMER1);
    11c2:	83 ea       	ldi	r24, 0xA3	; 163
    11c4:	95 e0       	ldi	r25, 0x05	; 5
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    11cc:	83 e1       	ldi	r24, 0x13	; 19
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    11d4:	80 91 27 01 	lds	r24, 0x0127
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <change_password+0xee>
    t_15s_flag=0;
    11dc:	10 92 27 01 	sts	0x0127, r1
    Timer_setCallBack(timerCallBack,TIMER1);
    11e0:	83 ea       	ldi	r24, 0xA3	; 163
    11e2:	95 e0       	ldi	r25, 0x05	; 5
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    11ea:	83 e1       	ldi	r24, 0x13	; 19
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    11f2:	80 91 27 01 	lds	r24, 0x0127
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <change_password+0x10c>
    t_15s_flag=0;
    11fa:	10 92 27 01 	sts	0x0127, r1
    //_delay_ms(6000);


    c_wrong_pass_counter=0;
    11fe:	10 92 25 01 	sts	0x0125, r1
	}
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <open_door>:


void open_door(void){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9e c0       	rjmp	.+316    	; 0x1352 <open_door+0x148>
	while(wrong_pass_counter<=2){
        UART_sendByte('+');
    1216:	8b e2       	ldi	r24, 0x2B	; 43
    1218:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_sendByte>
        move = 0;
    121c:	10 92 23 01 	sts	0x0123, r1
        LCD_clearScreen();
    1220:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
        LCD_displayString("plz enter pass:");
    1224:	83 e7       	ldi	r24, 0x73	; 115
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
        LCD_moveCursor(1, 0);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
        enter_password();
    1234:	0e 94 cc 05 	call	0xb98	; 0xb98 <enter_password>
        if(wrong_pass_counter==0)
    1238:	80 91 24 01 	lds	r24, 0x0124
    123c:	88 23       	and	r24, r24
    123e:	29 f4       	brne	.+10     	; 0x124a <open_door+0x40>
        	send_pass(pass3);
    1240:	84 e3       	ldi	r24, 0x34	; 52
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_pass>
    1248:	11 c0       	rjmp	.+34     	; 0x126c <open_door+0x62>
        else if(wrong_pass_counter==1)
    124a:	80 91 24 01 	lds	r24, 0x0124
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	29 f4       	brne	.+10     	; 0x125c <open_door+0x52>
        	send_pass(pass3_1);
    1252:	88 e4       	ldi	r24, 0x48	; 72
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_pass>
    125a:	08 c0       	rjmp	.+16     	; 0x126c <open_door+0x62>
        else if(wrong_pass_counter==2)
    125c:	80 91 24 01 	lds	r24, 0x0124
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	21 f4       	brne	.+8      	; 0x126c <open_door+0x62>
        	send_pass(pass3_2);
    1264:	89 e3       	ldi	r24, 0x39	; 57
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_pass>
        uint8 flag = UART_recieveByte();
    126c:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    1270:	89 83       	std	Y+1, r24	; 0x01
        if(flag==1){
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	09 f0       	breq	.+2      	; 0x127a <open_door+0x70>
    1278:	64 c0       	rjmp	.+200    	; 0x1342 <open_door+0x138>
            // zbt el timer
            LCD_clearScreen();
    127a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
            LCD_moveCursor(0, 3);
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	63 e0       	ldi	r22, 0x03	; 3
    1282:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
            LCD_displayString("Door is");
    1286:	87 ed       	ldi	r24, 0xD7	; 215
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
            LCD_moveCursor(1, 3);
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
            LCD_displayString("Unlocking");
    1296:	8f ed       	ldi	r24, 0xDF	; 223
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
    	    Timer_setCallBack(timerCallBack,TIMER1);
    129e:	83 ea       	ldi	r24, 0xA3	; 163
    12a0:	95 e0       	ldi	r25, 0x05	; 5
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    	    Timer_init(&timer);
    12a8:	83 e1       	ldi	r24, 0x13	; 19
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    	    while(t_15s_flag!=1){}
    12b0:	80 91 27 01 	lds	r24, 0x0127
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <open_door+0xa6>
    	    t_15s_flag=0;
    12b8:	10 92 27 01 	sts	0x0127, r1
            LCD_clearScreen();
    12bc:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
            if (UART_recieveByte() == 'p') {
    12c0:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    12c4:	80 37       	cpi	r24, 0x70	; 112
    12c6:	91 f4       	brne	.+36     	; 0x12ec <open_door+0xe2>
                LCD_clearScreen();
    12c8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
                LCD_moveCursor(0, 0);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
                LCD_displayString("Wait for people");
    12d4:	89 ee       	ldi	r24, 0xE9	; 233
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
                LCD_moveCursor(1, 3);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	63 e0       	ldi	r22, 0x03	; 3
    12e0:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
                LCD_displayString("To Enter");
    12e4:	89 ef       	ldi	r24, 0xF9	; 249
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
            }

            while (UART_recieveByte() != 'l'){}
    12ec:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    12f0:	8c 36       	cpi	r24, 0x6C	; 108
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <open_door+0xe2>

            LCD_clearScreen();
    12f4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
            LCD_moveCursor(0, 3);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	63 e0       	ldi	r22, 0x03	; 3
    12fc:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
            LCD_displayString("Door is");
    1300:	87 ed       	ldi	r24, 0xD7	; 215
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
            LCD_moveCursor(1, 3);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	63 e0       	ldi	r22, 0x03	; 3
    130c:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
            LCD_displayString("locking");
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
    	    Timer_setCallBack(timerCallBack,TIMER1);
    1318:	83 ea       	ldi	r24, 0xA3	; 163
    131a:	95 e0       	ldi	r25, 0x05	; 5
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    	    Timer_init(&timer);
    1322:	83 e1       	ldi	r24, 0x13	; 19
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    	    while(t_15s_flag!=1){}
    132a:	80 91 27 01 	lds	r24, 0x0127
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	e1 f7       	brne	.-8      	; 0x132a <open_door+0x120>
    	    t_15s_flag=0;
    1332:	10 92 27 01 	sts	0x0127, r1
            step=3;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	80 93 12 01 	sts	0x0112, r24
            wrong_pass_counter=0;
    133c:	10 92 24 01 	sts	0x0124, r1
    1340:	51 c0       	rjmp	.+162    	; 0x13e4 <open_door+0x1da>
            return;
        }

        else if (flag == 0) {
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	88 23       	and	r24, r24
    1346:	29 f4       	brne	.+10     	; 0x1352 <open_door+0x148>
        	wrong_pass_counter++;
    1348:	80 91 24 01 	lds	r24, 0x0124
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	80 93 24 01 	sts	0x0124, r24
	}
}


void open_door(void){
	while(wrong_pass_counter<=2){
    1352:	80 91 24 01 	lds	r24, 0x0124
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	08 f4       	brcc	.+2      	; 0x135c <open_door+0x152>
    135a:	5d cf       	rjmp	.-326    	; 0x1216 <open_door+0xc>

        else if (flag == 0) {
        	wrong_pass_counter++;
        }
	}
    LCD_clearScreen();
    135c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_clearScreen>
    LCD_displayString("ERROR");
    1360:	8d eb       	ldi	r24, 0xBD	; 189
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
    /*Alarm_flag=1;
    while(t_60s_flag!=1){}
    t_60s_flag=0;
    Alarm_flag=0;*/
    Timer_setCallBack(timerCallBack,TIMER1);
    1368:	83 ea       	ldi	r24, 0xA3	; 163
    136a:	95 e0       	ldi	r25, 0x05	; 5
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    1372:	83 e1       	ldi	r24, 0x13	; 19
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    137a:	80 91 27 01 	lds	r24, 0x0127
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	e1 f7       	brne	.-8      	; 0x137a <open_door+0x170>
    t_15s_flag=0;
    1382:	10 92 27 01 	sts	0x0127, r1
    Timer_setCallBack(timerCallBack,TIMER1);
    1386:	83 ea       	ldi	r24, 0xA3	; 163
    1388:	95 e0       	ldi	r25, 0x05	; 5
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    1390:	83 e1       	ldi	r24, 0x13	; 19
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    1398:	80 91 27 01 	lds	r24, 0x0127
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	e1 f7       	brne	.-8      	; 0x1398 <open_door+0x18e>
    t_15s_flag=0;
    13a0:	10 92 27 01 	sts	0x0127, r1
    Timer_setCallBack(timerCallBack,TIMER1);
    13a4:	83 ea       	ldi	r24, 0xA3	; 163
    13a6:	95 e0       	ldi	r25, 0x05	; 5
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    13ae:	83 e1       	ldi	r24, 0x13	; 19
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    13b6:	80 91 27 01 	lds	r24, 0x0127
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <open_door+0x1ac>
    t_15s_flag=0;
    13be:	10 92 27 01 	sts	0x0127, r1
    Timer_setCallBack(timerCallBack,TIMER1);
    13c2:	83 ea       	ldi	r24, 0xA3	; 163
    13c4:	95 e0       	ldi	r25, 0x05	; 5
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <Timer_setCallBack>
    Timer_init(&timer);
    13cc:	83 e1       	ldi	r24, 0x13	; 19
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timer_init>
    while(t_15s_flag!=1){}
    13d4:	80 91 27 01 	lds	r24, 0x0127
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <open_door+0x1ca>
    t_15s_flag=0;
    13dc:	10 92 27 01 	sts	0x0127, r1
    wrong_pass_counter=0;
    13e0:	10 92 24 01 	sts	0x0124, r1

}
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <change_enter_password>:

void change_enter_password(void) {
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	6e 97       	sbiw	r28, 0x1e	; 30
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    uint8 i, key;
    for (i = 0; i < pass_size; i++) {
    1400:	1e 8e       	std	Y+30, r1	; 0x1e
    1402:	08 c1       	rjmp	.+528    	; 0x1614 <change_enter_password+0x228>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a6 e9       	ldi	r26, 0x96	; 150
    140a:	b3 e4       	ldi	r27, 0x43	; 67
    140c:	89 8f       	std	Y+25, r24	; 0x19
    140e:	9a 8f       	std	Y+26, r25	; 0x1a
    1410:	ab 8f       	std	Y+27, r26	; 0x1b
    1412:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	69 8d       	ldd	r22, Y+25	; 0x19
    1416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a ef       	ldi	r20, 0xFA	; 250
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8d 8b       	std	Y+21, r24	; 0x15
    142e:	9e 8b       	std	Y+22, r25	; 0x16
    1430:	af 8b       	std	Y+23, r26	; 0x17
    1432:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1434:	6d 89       	ldd	r22, Y+21	; 0x15
    1436:	7e 89       	ldd	r23, Y+22	; 0x16
    1438:	8f 89       	ldd	r24, Y+23	; 0x17
    143a:	98 8d       	ldd	r25, Y+24	; 0x18
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <change_enter_password+0x6a>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <change_enter_password+0xe8>
	else if (__tmp > 65535)
    1456:	6d 89       	ldd	r22, Y+21	; 0x15
    1458:	7e 89       	ldd	r23, Y+22	; 0x16
    145a:	8f 89       	ldd	r24, Y+23	; 0x17
    145c:	98 8d       	ldd	r25, Y+24	; 0x18
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <change_enter_password+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	69 8d       	ldd	r22, Y+25	; 0x19
    1470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <change_enter_password+0xca>
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9a 8b       	std	Y+18, r25	; 0x12
    149e:	89 8b       	std	Y+17, r24	; 0x11
    14a0:	89 89       	ldd	r24, Y+17	; 0x11
    14a2:	9a 89       	ldd	r25, Y+18	; 0x12
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <change_enter_password+0xb8>
    14a8:	9a 8b       	std	Y+18, r25	; 0x12
    14aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	9c 89       	ldd	r25, Y+20	; 0x14
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9c 8b       	std	Y+20, r25	; 0x14
    14b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8b 89       	ldd	r24, Y+19	; 0x13
    14b8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <change_enter_password+0xac>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <change_enter_password+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6d 89       	ldd	r22, Y+21	; 0x15
    14c2:	7e 89       	ldd	r23, Y+22	; 0x16
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	98 8d       	ldd	r25, Y+24	; 0x18
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	8f 87       	std	Y+15, r24	; 0x0f
    14dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14de:	98 89       	ldd	r25, Y+16	; 0x10
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <change_enter_password+0xf4>
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(300);
        while (1) {
            key = KEYPAD_getPressedKey();
    14e8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
    14ec:	8d 8f       	std	Y+29, r24	; 0x1d
            if (key != '\0') {
    14ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f0:	88 23       	and	r24, r24
    14f2:	d1 f3       	breq	.-12     	; 0x14e8 <change_enter_password+0xfc>
                if (key == enter_button) {
    14f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f6:	8d 30       	cpi	r24, 0x0D	; 13
    14f8:	09 f4       	brne	.+2      	; 0x14fc <change_enter_password+0x110>
    14fa:	94 c0       	rjmp	.+296    	; 0x1624 <change_enter_password+0x238>
                    return;
                } else if (key >= 0 && key <= 9) {
    14fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14fe:	8a 30       	cpi	r24, 0x0A	; 10
    1500:	98 f7       	brcc	.-26     	; 0x14e8 <change_enter_password+0xfc>
                    change_pass[i] = key;
    1502:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	fc 01       	movw	r30, r24
    150a:	e1 5d       	subi	r30, 0xD1	; 209
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1510:	80 83       	st	Z, r24
                    LCD_moveCursor(1, move + i);
    1512:	90 91 23 01 	lds	r25, 0x0123
    1516:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1518:	98 0f       	add	r25, r24
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	69 2f       	mov	r22, r25
    151e:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a8 e4       	ldi	r26, 0x48	; 72
    1528:	b2 e4       	ldi	r27, 0x42	; 66
    152a:	8b 87       	std	Y+11, r24	; 0x0b
    152c:	9c 87       	std	Y+12, r25	; 0x0c
    152e:	ad 87       	std	Y+13, r26	; 0x0d
    1530:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	6b 85       	ldd	r22, Y+11	; 0x0b
    1534:	7c 85       	ldd	r23, Y+12	; 0x0c
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4a ef       	ldi	r20, 0xFA	; 250
    1540:	54 e4       	ldi	r21, 0x44	; 68
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	98 87       	std	Y+8, r25	; 0x08
    154e:	a9 87       	std	Y+9, r26	; 0x09
    1550:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	5f e3       	ldi	r21, 0x3F	; 63
    1562:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1566:	88 23       	and	r24, r24
    1568:	2c f4       	brge	.+10     	; 0x1574 <change_enter_password+0x188>
		__ticks = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <change_enter_password+0x206>
	else if (__tmp > 65535)
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	3f ef       	ldi	r19, 0xFF	; 255
    1580:	4f e7       	ldi	r20, 0x7F	; 127
    1582:	57 e4       	ldi	r21, 0x47	; 71
    1584:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1588:	18 16       	cp	r1, r24
    158a:	4c f5       	brge	.+82     	; 0x15de <change_enter_password+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158c:	6b 85       	ldd	r22, Y+11	; 0x0b
    158e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e2       	ldi	r20, 0x20	; 32
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <change_enter_password+0x1e8>
    15b6:	88 ec       	ldi	r24, 0xC8	; 200
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <change_enter_password+0x1d6>
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	69 f7       	brne	.-38     	; 0x15b6 <change_enter_password+0x1ca>
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <change_enter_password+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <change_enter_password+0x212>
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(50);
                    LCD_displayString("*");
    1606:	80 e6       	ldi	r24, 0x60	; 96
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>

}

void change_enter_password(void) {
    uint8 i, key;
    for (i = 0; i < pass_size; i++) {
    160e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1610:	8f 5f       	subi	r24, 0xFF	; 255
    1612:	8e 8f       	std	Y+30, r24	; 0x1e
    1614:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1616:	85 30       	cpi	r24, 0x05	; 5
    1618:	08 f4       	brcc	.+2      	; 0x161c <change_enter_password+0x230>
    161a:	f4 ce       	rjmp	.-536    	; 0x1404 <change_enter_password+0x18>
                    break;
                }
            }
        }
    }
    while (KEYPAD_getPressedKey() != 13) {
    161c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
    1620:	8d 30       	cpi	r24, 0x0D	; 13
    1622:	e1 f7       	brne	.-8      	; 0x161c <change_enter_password+0x230>
    }
}
    1624:	6e 96       	adiw	r28, 0x1e	; 30
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_setupPinDirection+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_setupPinDirection+0x8>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
    1648:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	08 f0       	brcs	.+2      	; 0x1652 <GPIO_setupPinDirection+0x1c>
    1650:	d5 c0       	rjmp	.+426    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	08 f0       	brcs	.+2      	; 0x165a <GPIO_setupPinDirection+0x24>
    1658:	d1 c0       	rjmp	.+418    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3d 83       	std	Y+5, r19	; 0x05
    1662:	2c 83       	std	Y+4, r18	; 0x04
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	9d 81       	ldd	r25, Y+5	; 0x05
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <GPIO_setupPinDirection+0x3a>
    166e:	43 c0       	rjmp	.+134    	; 0x16f6 <GPIO_setupPinDirection+0xc0>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <GPIO_setupPinDirection+0x4e>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	71 f0       	breq	.+28     	; 0x169e <GPIO_setupPinDirection+0x68>
    1682:	bc c0       	rjmp	.+376    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	09 f4       	brne	.+2      	; 0x1690 <GPIO_setupPinDirection+0x5a>
    168e:	5f c0       	rjmp	.+190    	; 0x174e <GPIO_setupPinDirection+0x118>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <GPIO_setupPinDirection+0x66>
    169a:	85 c0       	rjmp	.+266    	; 0x17a6 <GPIO_setupPinDirection+0x170>
    169c:	af c0       	rjmp	.+350    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16a4:	aa e3       	ldi	r26, 0x3A	; 58
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ea e3       	ldi	r30, 0x3A	; 58
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0x8c>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0x88>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	98 c0       	rjmp	.+304    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16cc:	aa e3       	ldi	r26, 0x3A	; 58
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e3       	ldi	r30, 0x3A	; 58
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_setupPinDirection+0xb4>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_setupPinDirection+0xb0>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	83 c0       	rjmp	.+262    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16fc:	a7 e3       	ldi	r26, 0x37	; 55
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e7 e3       	ldi	r30, 0x37	; 55
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0xe4>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0xe0>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	6c c0       	rjmp	.+216    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1724:	a7 e3       	ldi	r26, 0x37	; 55
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e7 e3       	ldi	r30, 0x37	; 55
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_setupPinDirection+0x10c>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_setupPinDirection+0x108>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	57 c0       	rjmp	.+174    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	a1 f4       	brne	.+40     	; 0x177c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1754:	a4 e3       	ldi	r26, 0x34	; 52
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_setupPinDirection+0x13c>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_setupPinDirection+0x138>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	40 c0       	rjmp	.+128    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    177c:	a4 e3       	ldi	r26, 0x34	; 52
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 e3       	ldi	r30, 0x34	; 52
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_setupPinDirection+0x164>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_setupPinDirection+0x160>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	2b c0       	rjmp	.+86     	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	a1 f4       	brne	.+40     	; 0x17d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17ac:	a1 e3       	ldi	r26, 0x31	; 49
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_setupPinDirection+0x194>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_setupPinDirection+0x190>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17d4:	a1 e3       	ldi	r26, 0x31	; 49
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_setupPinDirection+0x1bc>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_setupPinDirection+0x1b8>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <GPIO_writePin+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <GPIO_writePin+0x8>
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02
    181e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	08 f0       	brcs	.+2      	; 0x1828 <GPIO_writePin+0x1c>
    1826:	d5 c0       	rjmp	.+426    	; 0x19d2 <GPIO_writePin+0x1c6>
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	84 30       	cpi	r24, 0x04	; 4
    182c:	08 f0       	brcs	.+2      	; 0x1830 <GPIO_writePin+0x24>
    182e:	d1 c0       	rjmp	.+418    	; 0x19d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3d 83       	std	Y+5, r19	; 0x05
    1838:	2c 83       	std	Y+4, r18	; 0x04
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <GPIO_writePin+0x3a>
    1844:	43 c0       	rjmp	.+134    	; 0x18cc <GPIO_writePin+0xc0>
    1846:	2c 81       	ldd	r18, Y+4	; 0x04
    1848:	3d 81       	ldd	r19, Y+5	; 0x05
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <GPIO_writePin+0x4e>
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	71 f0       	breq	.+28     	; 0x1874 <GPIO_writePin+0x68>
    1858:	bc c0       	rjmp	.+376    	; 0x19d2 <GPIO_writePin+0x1c6>
    185a:	2c 81       	ldd	r18, Y+4	; 0x04
    185c:	3d 81       	ldd	r19, Y+5	; 0x05
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <GPIO_writePin+0x5a>
    1864:	5f c0       	rjmp	.+190    	; 0x1924 <GPIO_writePin+0x118>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <GPIO_writePin+0x66>
    1870:	85 c0       	rjmp	.+266    	; 0x197c <GPIO_writePin+0x170>
    1872:	af c0       	rjmp	.+350    	; 0x19d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0x8c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0x88>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	98 c0       	rjmp	.+304    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18a2:	ab e3       	ldi	r26, 0x3B	; 59
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e3       	ldi	r30, 0x3B	; 59
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_writePin+0xb4>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_writePin+0xb0>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	83 c0       	rjmp	.+262    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18d2:	a8 e3       	ldi	r26, 0x38	; 56
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0xe4>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0xe0>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	6c c0       	rjmp	.+216    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18fa:	a8 e3       	ldi	r26, 0x38	; 56
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_writePin+0x10c>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_writePin+0x108>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	57 c0       	rjmp	.+174    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	a1 f4       	brne	.+40     	; 0x1952 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    192a:	a5 e3       	ldi	r26, 0x35	; 53
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_writePin+0x13c>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_writePin+0x138>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	40 c0       	rjmp	.+128    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1952:	a5 e3       	ldi	r26, 0x35	; 53
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e3       	ldi	r30, 0x35	; 53
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_writePin+0x164>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_writePin+0x160>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	2b c0       	rjmp	.+86     	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	a1 f4       	brne	.+40     	; 0x19aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1982:	a2 e3       	ldi	r26, 0x32	; 50
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e2 e3       	ldi	r30, 0x32	; 50
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_writePin+0x194>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_writePin+0x190>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19aa:	a2 e3       	ldi	r26, 0x32	; 50
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e2 e3       	ldi	r30, 0x32	; 50
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_writePin+0x1bc>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_writePin+0x1b8>
    19cc:	80 95       	com	r24
    19ce:	84 23       	and	r24, r20
    19d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_readPin+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <GPIO_readPin+0x8>
    19ea:	0f 92       	push	r0
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	88 30       	cpi	r24, 0x08	; 8
    19fa:	08 f0       	brcs	.+2      	; 0x19fe <GPIO_readPin+0x1c>
    19fc:	84 c0       	rjmp	.+264    	; 0x1b06 <GPIO_readPin+0x124>
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <GPIO_readPin+0x24>
    1a04:	80 c0       	rjmp	.+256    	; 0x1b06 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	3d 83       	std	Y+5, r19	; 0x05
    1a0e:	2c 83       	std	Y+4, r18	; 0x04
    1a10:	4c 81       	ldd	r20, Y+4	; 0x04
    1a12:	5d 81       	ldd	r21, Y+5	; 0x05
    1a14:	41 30       	cpi	r20, 0x01	; 1
    1a16:	51 05       	cpc	r21, r1
    1a18:	79 f1       	breq	.+94     	; 0x1a78 <GPIO_readPin+0x96>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	91 05       	cpc	r25, r1
    1a22:	34 f4       	brge	.+12     	; 0x1a30 <GPIO_readPin+0x4e>
    1a24:	2c 81       	ldd	r18, Y+4	; 0x04
    1a26:	3d 81       	ldd	r19, Y+5	; 0x05
    1a28:	21 15       	cp	r18, r1
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	69 f0       	breq	.+26     	; 0x1a48 <GPIO_readPin+0x66>
    1a2e:	6b c0       	rjmp	.+214    	; 0x1b06 <GPIO_readPin+0x124>
    1a30:	4c 81       	ldd	r20, Y+4	; 0x04
    1a32:	5d 81       	ldd	r21, Y+5	; 0x05
    1a34:	42 30       	cpi	r20, 0x02	; 2
    1a36:	51 05       	cpc	r21, r1
    1a38:	b9 f1       	breq	.+110    	; 0x1aa8 <GPIO_readPin+0xc6>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <GPIO_readPin+0x64>
    1a44:	49 c0       	rjmp	.+146    	; 0x1ad8 <GPIO_readPin+0xf6>
    1a46:	5f c0       	rjmp	.+190    	; 0x1b06 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a48:	e9 e3       	ldi	r30, 0x39	; 57
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a9 01       	movw	r20, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_readPin+0x7e>
    1a5c:	55 95       	asr	r21
    1a5e:	47 95       	ror	r20
    1a60:	8a 95       	dec	r24
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_readPin+0x7a>
    1a64:	ca 01       	movw	r24, r20
    1a66:	81 70       	andi	r24, 0x01	; 1
    1a68:	90 70       	andi	r25, 0x00	; 0
    1a6a:	88 23       	and	r24, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	49 c0       	rjmp	.+146    	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a74:	19 82       	std	Y+1, r1	; 0x01
    1a76:	47 c0       	rjmp	.+142    	; 0x1b06 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a78:	e6 e3       	ldi	r30, 0x36	; 54
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <GPIO_readPin+0xae>
    1a8c:	55 95       	asr	r21
    1a8e:	47 95       	ror	r20
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <GPIO_readPin+0xaa>
    1a94:	ca 01       	movw	r24, r20
    1a96:	81 70       	andi	r24, 0x01	; 1
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	31 c0       	rjmp	.+98     	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
    1aa6:	2f c0       	rjmp	.+94     	; 0x1b06 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1aa8:	e3 e3       	ldi	r30, 0x33	; 51
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_readPin+0xde>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_readPin+0xda>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	19 c0       	rjmp	.+50     	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	17 c0       	rjmp	.+46     	; 0x1b06 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ad8:	e0 e3       	ldi	r30, 0x30	; 48
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <GPIO_readPin+0x10e>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <GPIO_readPin+0x10a>
    1af4:	ca 01       	movw	r24, r20
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b04:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <GPIO_setupPortDirection+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <GPIO_setupPortDirection+0x8>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	90 f5       	brcc	.+100    	; 0x1b92 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3c 83       	std	Y+4, r19	; 0x04
    1b36:	2b 83       	std	Y+3, r18	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <GPIO_setupPortDirection+0x5e>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <GPIO_setupPortDirection+0x3e>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <GPIO_setupPortDirection+0x54>
    1b54:	1e c0       	rjmp	.+60     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
    1b56:	2b 81       	ldd	r18, Y+3	; 0x03
    1b58:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <GPIO_setupPortDirection+0x68>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	91 05       	cpc	r25, r1
    1b68:	81 f0       	breq	.+32     	; 0x1b8a <GPIO_setupPortDirection+0x72>
    1b6a:	13 c0       	rjmp	.+38     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b6c:	ea e3       	ldi	r30, 0x3A	; 58
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b76:	e7 e3       	ldi	r30, 0x37	; 55
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	80 83       	st	Z, r24
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b80:	e4 e3       	ldi	r30, 0x34	; 52
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	80 83       	st	Z, r24
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b8a:	e1 e3       	ldi	r30, 0x31	; 49
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <GPIO_writePort+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <GPIO_writePort+0x8>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	90 f5       	brcc	.+100    	; 0x1c1a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3c 83       	std	Y+4, r19	; 0x04
    1bbe:	2b 83       	std	Y+3, r18	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	d1 f0       	breq	.+52     	; 0x1bfe <GPIO_writePort+0x5e>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <GPIO_writePort+0x3e>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <GPIO_writePort+0x54>
    1bdc:	1e c0       	rjmp	.+60     	; 0x1c1a <GPIO_writePort+0x7a>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <GPIO_writePort+0x68>
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	81 f0       	breq	.+32     	; 0x1c12 <GPIO_writePort+0x72>
    1bf2:	13 c0       	rjmp	.+38     	; 0x1c1a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	80 83       	st	Z, r24
    1bfc:	0e c0       	rjmp	.+28     	; 0x1c1a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	80 83       	st	Z, r24
    1c06:	09 c0       	rjmp	.+18     	; 0x1c1a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c08:	e5 e3       	ldi	r30, 0x35	; 53
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	80 83       	st	Z, r24
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c12:	e2 e3       	ldi	r30, 0x32	; 50
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <GPIO_readPort+0x6>
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <GPIO_readPort+0x8>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c36:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	84 30       	cpi	r24, 0x04	; 4
    1c3c:	90 f5       	brcc	.+100    	; 0x1ca2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	3c 83       	std	Y+4, r19	; 0x04
    1c46:	2b 83       	std	Y+3, r18	; 0x03
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	d1 f0       	breq	.+52     	; 0x1c86 <GPIO_readPort+0x5e>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <GPIO_readPort+0x3e>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <GPIO_readPort+0x54>
    1c64:	1e c0       	rjmp	.+60     	; 0x1ca2 <GPIO_readPort+0x7a>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	81 f0       	breq	.+32     	; 0x1c90 <GPIO_readPort+0x68>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	91 05       	cpc	r25, r1
    1c78:	81 f0       	breq	.+32     	; 0x1c9a <GPIO_readPort+0x72>
    1c7a:	13 c0       	rjmp	.+38     	; 0x1ca2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c7c:	e9 e3       	ldi	r30, 0x39	; 57
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c86:	e6 e3       	ldi	r30, 0x36	; 54
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	09 c0       	rjmp	.+18     	; 0x1ca2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c90:	e3 e3       	ldi	r30, 0x33	; 51
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c9a:	e0 e3       	ldi	r30, 0x30	; 48
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	60 97       	sbiw	r28, 0x10	; 16
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	63 e0       	ldi	r22, 0x03	; 3
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	65 e0       	ldi	r22, 0x05	; 5
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	67 e0       	ldi	r22, 0x07	; 7
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d16:	1f 86       	std	Y+15, r1	; 0x0f
    1d18:	ab c0       	rjmp	.+342    	; 0x1e70 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d2e:	18 8a       	std	Y+16, r1	; 0x10
    1d30:	22 c0       	rjmp	.+68     	; 0x1d76 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d32:	88 89       	ldd	r24, Y+16	; 0x10
    1d34:	98 2f       	mov	r25, r24
    1d36:	9c 5f       	subi	r25, 0xFC	; 252
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	69 2f       	mov	r22, r25
    1d3c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <GPIO_readPin>
    1d40:	88 23       	and	r24, r24
    1d42:	b1 f4       	brne	.+44     	; 0x1d70 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	98 2f       	mov	r25, r24
    1d54:	88 89       	ldd	r24, Y+16	; 0x10
    1d56:	89 0f       	add	r24, r25
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1d5e:	60 96       	adiw	r28, 0x10	; 16
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d70:	88 89       	ldd	r24, Y+16	; 0x10
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	88 8b       	std	Y+16, r24	; 0x10
    1d76:	88 89       	ldd	r24, Y+16	; 0x10
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	d8 f2       	brcs	.-74     	; 0x1d32 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e2       	ldi	r26, 0x20	; 32
    1d8c:	b1 e4       	ldi	r27, 0x41	; 65
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	9c 87       	std	Y+12, r25	; 0x0c
    1d92:	ad 87       	std	Y+13, r26	; 0x0d
    1d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a ef       	ldi	r20, 0xFA	; 250
    1da4:	54 e4       	ldi	r21, 0x44	; 68
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8f 83       	std	Y+7, r24	; 0x07
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	a9 87       	std	Y+9, r26	; 0x09
    1db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <KEYPAD_getPressedKey+0x186>
    1e1a:	88 ec       	ldi	r24, 0xC8	; 200
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <KEYPAD_getPressedKey+0x174>
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <KEYPAD_getPressedKey+0x168>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <KEYPAD_getPressedKey+0x1b0>
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6c:	8f 5f       	subi	r24, 0xFF	; 255
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	84 30       	cpi	r24, 0x04	; 4
    1e74:	08 f4       	brcc	.+2      	; 0x1e78 <KEYPAD_getPressedKey+0x1c6>
    1e76:	51 cf       	rjmp	.-350    	; 0x1d1a <KEYPAD_getPressedKey+0x68>
    1e78:	4e cf       	rjmp	.-356    	; 0x1d16 <KEYPAD_getPressedKey+0x64>

00001e7a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e88:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	3c 83       	std	Y+4, r19	; 0x04
    1e92:	2b 83       	std	Y+3, r18	; 0x03
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	88 30       	cpi	r24, 0x08	; 8
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e9e:	70 c0       	rjmp	.+224    	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	29 30       	cpi	r18, 0x09	; 9
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	5c f5       	brge	.+86     	; 0x1f00 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1eb4:	59 c0       	rjmp	.+178    	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eba:	25 30       	cpi	r18, 0x05	; 5
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	9c f4       	brge	.+38     	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <KEYPAD_4x4_adjustKeyNumber+0x52>
    1eca:	48 c0       	rjmp	.+144    	; 0x1f5c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ece:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed0:	23 30       	cpi	r18, 0x03	; 3
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1ed6:	45 c0       	rjmp	.+138    	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ee2:	39 c0       	rjmp	.+114    	; 0x1f56 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ee4:	67 c0       	rjmp	.+206    	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	26 30       	cpi	r18, 0x06	; 6
    1eec:	31 05       	cpc	r19, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ef0:	41 c0       	rjmp	.+130    	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	87 30       	cpi	r24, 0x07	; 7
    1ef8:	91 05       	cpc	r25, r1
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x84>
    1efc:	3e c0       	rjmp	.+124    	; 0x1f7a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1efe:	37 c0       	rjmp	.+110    	; 0x1f6e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	2c 30       	cpi	r18, 0x0C	; 12
    1f06:	31 05       	cpc	r19, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f0a:	46 c0       	rjmp	.+140    	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	8d 30       	cpi	r24, 0x0D	; 13
    1f12:	91 05       	cpc	r25, r1
    1f14:	5c f4       	brge	.+22     	; 0x1f2c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	2a 30       	cpi	r18, 0x0A	; 10
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	b1 f1       	breq	.+108    	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	8b 30       	cpi	r24, 0x0B	; 11
    1f26:	91 05       	cpc	r25, r1
    1f28:	a4 f5       	brge	.+104    	; 0x1f92 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f2a:	2d c0       	rjmp	.+90     	; 0x1f86 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f30:	2e 30       	cpi	r18, 0x0E	; 14
    1f32:	31 05       	cpc	r19, r1
    1f34:	b9 f1       	breq	.+110    	; 0x1fa4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	8e 30       	cpi	r24, 0x0E	; 14
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	7c f1       	brlt	.+94     	; 0x1f9e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	2f 30       	cpi	r18, 0x0F	; 15
    1f46:	31 05       	cpc	r19, r1
    1f48:	79 f1       	breq	.+94     	; 0x1fa8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	80 31       	cpi	r24, 0x10	; 16
    1f50:	91 05       	cpc	r25, r1
    1f52:	69 f1       	breq	.+90     	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f54:	2f c0       	rjmp	.+94     	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f56:	87 e0       	ldi	r24, 0x07	; 7
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	2e c0       	rjmp	.+92     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1f5c:	88 e0       	ldi	r24, 0x08	; 8
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	2b c0       	rjmp	.+86     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1f62:	89 e0       	ldi	r24, 0x09	; 9
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	28 c0       	rjmp	.+80     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1f68:	85 e2       	ldi	r24, 0x25	; 37
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	25 c0       	rjmp	.+74     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	22 c0       	rjmp	.+68     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1f74:	85 e0       	ldi	r24, 0x05	; 5
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	1f c0       	rjmp	.+62     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1f7a:	86 e0       	ldi	r24, 0x06	; 6
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	1c c0       	rjmp	.+56     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f80:	8a e2       	ldi	r24, 0x2A	; 42
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	19 c0       	rjmp	.+50     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	16 c0       	rjmp	.+44     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	13 c0       	rjmp	.+38     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	10 c0       	rjmp	.+32     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1f98:	8d e2       	ldi	r24, 0x2D	; 45
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	0d c0       	rjmp	.+26     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f9e:	8d e0       	ldi	r24, 0x0D	; 13
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	0a c0       	rjmp	.+20     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	08 c0       	rjmp	.+16     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1fa8:	8d e3       	ldi	r24, 0x3D	; 61
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1fae:	8b e2       	ldi	r24, 0x2B	; 43
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	2e 97       	sbiw	r28, 0x0e	; 14
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ff6:	b1 e4       	ldi	r27, 0x41	; 65
    1ff8:	8b 87       	std	Y+11, r24	; 0x0b
    1ffa:	9c 87       	std	Y+12, r25	; 0x0c
    1ffc:	ad 87       	std	Y+13, r26	; 0x0d
    1ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a ef       	ldi	r20, 0xFA	; 250
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8f 83       	std	Y+7, r24	; 0x07
    201a:	98 87       	std	Y+8, r25	; 0x08
    201c:	a9 87       	std	Y+9, r26	; 0x09
    201e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_init+0x7a>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_init+0xda>
    2084:	88 ec       	ldi	r24, 0xC8	; 200
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_init+0xc8>
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_init+0xbc>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_init+0x104>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    20dc:	88 e3       	ldi	r24, 0x38	; 56
    20de:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20e2:	8c e0       	ldi	r24, 0x0C	; 12
    20e4:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_sendCommand>
}
    20ee:	2e 96       	adiw	r28, 0x0e	; 14
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	e9 97       	sbiw	r28, 0x39	; 57
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e8       	ldi	r26, 0x80	; 128
    2126:	bf e3       	ldi	r27, 0x3F	; 63
    2128:	8d ab       	std	Y+53, r24	; 0x35
    212a:	9e ab       	std	Y+54, r25	; 0x36
    212c:	af ab       	std	Y+55, r26	; 0x37
    212e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6d a9       	ldd	r22, Y+53	; 0x35
    2132:	7e a9       	ldd	r23, Y+54	; 0x36
    2134:	8f a9       	ldd	r24, Y+55	; 0x37
    2136:	98 ad       	ldd	r25, Y+56	; 0x38
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a ef       	ldi	r20, 0xFA	; 250
    213e:	54 e4       	ldi	r21, 0x44	; 68
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	89 ab       	std	Y+49, r24	; 0x31
    214a:	9a ab       	std	Y+50, r25	; 0x32
    214c:	ab ab       	std	Y+51, r26	; 0x33
    214e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2150:	69 a9       	ldd	r22, Y+49	; 0x31
    2152:	7a a9       	ldd	r23, Y+50	; 0x32
    2154:	8b a9       	ldd	r24, Y+51	; 0x33
    2156:	9c a9       	ldd	r25, Y+52	; 0x34
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <LCD_sendCommand+0x72>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 ab       	std	Y+48, r25	; 0x30
    216e:	8f a7       	std	Y+47, r24	; 0x2f
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6d a9       	ldd	r22, Y+53	; 0x35
    218c:	7e a9       	ldd	r23, Y+54	; 0x36
    218e:	8f a9       	ldd	r24, Y+55	; 0x37
    2190:	98 ad       	ldd	r25, Y+56	; 0x38
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	98 ab       	std	Y+48, r25	; 0x30
    21b0:	8f a7       	std	Y+47, r24	; 0x2f
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_sendCommand+0xd2>
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e a7       	std	Y+46, r25	; 0x2e
    21ba:	8d a7       	std	Y+45, r24	; 0x2d
    21bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21be:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_sendCommand+0xc0>
    21c4:	9e a7       	std	Y+46, r25	; 0x2e
    21c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ca:	98 a9       	ldd	r25, Y+48	; 0x30
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d4:	98 a9       	ldd	r25, Y+48	; 0x30
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_sendCommand+0xb4>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	69 a9       	ldd	r22, Y+49	; 0x31
    21de:	7a a9       	ldd	r23, Y+50	; 0x32
    21e0:	8b a9       	ldd	r24, Y+51	; 0x33
    21e2:	9c a9       	ldd	r25, Y+52	; 0x34
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	98 ab       	std	Y+48, r25	; 0x30
    21ee:	8f a7       	std	Y+47, r24	; 0x2f
    21f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f2:	98 a9       	ldd	r25, Y+48	; 0x30
    21f4:	9c a7       	std	Y+44, r25	; 0x2c
    21f6:	8b a7       	std	Y+43, r24	; 0x2b
    21f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0xfc>
    2200:	9c a7       	std	Y+44, r25	; 0x2c
    2202:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 e8       	ldi	r26, 0x80	; 128
    2214:	bf e3       	ldi	r27, 0x3F	; 63
    2216:	8f a3       	std	Y+39, r24	; 0x27
    2218:	98 a7       	std	Y+40, r25	; 0x28
    221a:	a9 a7       	std	Y+41, r26	; 0x29
    221c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6f a1       	ldd	r22, Y+39	; 0x27
    2220:	78 a5       	ldd	r23, Y+40	; 0x28
    2222:	89 a5       	ldd	r24, Y+41	; 0x29
    2224:	9a a5       	ldd	r25, Y+42	; 0x2a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a ef       	ldi	r20, 0xFA	; 250
    222c:	54 e4       	ldi	r21, 0x44	; 68
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8b a3       	std	Y+35, r24	; 0x23
    2238:	9c a3       	std	Y+36, r25	; 0x24
    223a:	ad a3       	std	Y+37, r26	; 0x25
    223c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <LCD_sendCommand+0x160>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	3f c0       	rjmp	.+126    	; 0x22de <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <LCD_sendCommand+0x1c0>
    22a2:	88 ec       	ldi	r24, 0xC8	; 200
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	98 a3       	std	Y+32, r25	; 0x20
    22a8:	8f 8f       	std	Y+31, r24	; 0x1f
    22aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ac:	98 a1       	ldd	r25, Y+32	; 0x20
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_sendCommand+0x1ae>
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <LCD_sendCommand+0x1a2>
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	89 a1       	ldd	r24, Y+33	; 0x21
    22e0:	9a a1       	ldd	r25, Y+34	; 0x22
    22e2:	9e 8f       	std	Y+30, r25	; 0x1e
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_sendCommand+0x1ea>
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	69 ad       	ldd	r22, Y+57	; 0x39
    22f6:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <GPIO_writePort>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e8       	ldi	r26, 0x80	; 128
    2300:	bf e3       	ldi	r27, 0x3F	; 63
    2302:	89 8f       	std	Y+25, r24	; 0x19
    2304:	9a 8f       	std	Y+26, r25	; 0x1a
    2306:	ab 8f       	std	Y+27, r26	; 0x1b
    2308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	69 8d       	ldd	r22, Y+25	; 0x19
    230c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8d 8b       	std	Y+21, r24	; 0x15
    2324:	9e 8b       	std	Y+22, r25	; 0x16
    2326:	af 8b       	std	Y+23, r26	; 0x17
    2328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <LCD_sendCommand+0x24c>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_sendCommand+0x2ac>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_sendCommand+0x29a>
    239e:	9a 8b       	std	Y+18, r25	; 0x12
    23a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <LCD_sendCommand+0x28e>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
    23d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d4:	98 89       	ldd	r25, Y+16	; 0x10
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_sendCommand+0x2d6>
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	a0 e8       	ldi	r26, 0x80	; 128
    23ee:	bf e3       	ldi	r27, 0x3F	; 63
    23f0:	8b 87       	std	Y+11, r24	; 0x0b
    23f2:	9c 87       	std	Y+12, r25	; 0x0c
    23f4:	ad 87       	std	Y+13, r26	; 0x0d
    23f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a ef       	ldi	r20, 0xFA	; 250
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8f 83       	std	Y+7, r24	; 0x07
    2412:	98 87       	std	Y+8, r25	; 0x08
    2414:	a9 87       	std	Y+9, r26	; 0x09
    2416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <LCD_sendCommand+0x33a>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	0f c0       	rjmp	.+30     	; 0x249a <LCD_sendCommand+0x39a>
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <LCD_sendCommand+0x388>
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <LCD_sendCommand+0x37c>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_sendCommand+0x3c4>
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24cc:	e9 96       	adiw	r28, 0x39	; 57
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	e9 97       	sbiw	r28, 0x39	; 57
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a0 e8       	ldi	r26, 0x80	; 128
    2504:	bf e3       	ldi	r27, 0x3F	; 63
    2506:	8d ab       	std	Y+53, r24	; 0x35
    2508:	9e ab       	std	Y+54, r25	; 0x36
    250a:	af ab       	std	Y+55, r26	; 0x37
    250c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250e:	6d a9       	ldd	r22, Y+53	; 0x35
    2510:	7e a9       	ldd	r23, Y+54	; 0x36
    2512:	8f a9       	ldd	r24, Y+55	; 0x37
    2514:	98 ad       	ldd	r25, Y+56	; 0x38
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a ef       	ldi	r20, 0xFA	; 250
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	89 ab       	std	Y+49, r24	; 0x31
    2528:	9a ab       	std	Y+50, r25	; 0x32
    252a:	ab ab       	std	Y+51, r26	; 0x33
    252c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    252e:	69 a9       	ldd	r22, Y+49	; 0x31
    2530:	7a a9       	ldd	r23, Y+50	; 0x32
    2532:	8b a9       	ldd	r24, Y+51	; 0x33
    2534:	9c a9       	ldd	r25, Y+52	; 0x34
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	2c f4       	brge	.+10     	; 0x2550 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	98 ab       	std	Y+48, r25	; 0x30
    254c:	8f a7       	std	Y+47, r24	; 0x2f
    254e:	3f c0       	rjmp	.+126    	; 0x25ce <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2550:	69 a9       	ldd	r22, Y+49	; 0x31
    2552:	7a a9       	ldd	r23, Y+50	; 0x32
    2554:	8b a9       	ldd	r24, Y+51	; 0x33
    2556:	9c a9       	ldd	r25, Y+52	; 0x34
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2564:	18 16       	cp	r1, r24
    2566:	4c f5       	brge	.+82     	; 0x25ba <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	6d a9       	ldd	r22, Y+53	; 0x35
    256a:	7e a9       	ldd	r23, Y+54	; 0x36
    256c:	8f a9       	ldd	r24, Y+55	; 0x37
    256e:	98 ad       	ldd	r25, Y+56	; 0x38
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	0f c0       	rjmp	.+30     	; 0x25b0 <LCD_displayCharacter+0xd2>
    2592:	88 ec       	ldi	r24, 0xC8	; 200
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9e a7       	std	Y+46, r25	; 0x2e
    2598:	8d a7       	std	Y+45, r24	; 0x2d
    259a:	8d a5       	ldd	r24, Y+45	; 0x2d
    259c:	9e a5       	ldd	r25, Y+46	; 0x2e
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <LCD_displayCharacter+0xc0>
    25a2:	9e a7       	std	Y+46, r25	; 0x2e
    25a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	98 a9       	ldd	r25, Y+48	; 0x30
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	98 ab       	std	Y+48, r25	; 0x30
    25ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b2:	98 a9       	ldd	r25, Y+48	; 0x30
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	69 f7       	brne	.-38     	; 0x2592 <LCD_displayCharacter+0xb4>
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	7a a9       	ldd	r23, Y+50	; 0x32
    25be:	8b a9       	ldd	r24, Y+51	; 0x33
    25c0:	9c a9       	ldd	r25, Y+52	; 0x34
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	98 ab       	std	Y+48, r25	; 0x30
    25cc:	8f a7       	std	Y+47, r24	; 0x2f
    25ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d0:	98 a9       	ldd	r25, Y+48	; 0x30
    25d2:	9c a7       	std	Y+44, r25	; 0x2c
    25d4:	8b a7       	std	Y+43, r24	; 0x2b
    25d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_displayCharacter+0xfc>
    25de:	9c a7       	std	Y+44, r25	; 0x2c
    25e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	61 e0       	ldi	r22, 0x01	; 1
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a0 e8       	ldi	r26, 0x80	; 128
    25f2:	bf e3       	ldi	r27, 0x3F	; 63
    25f4:	8f a3       	std	Y+39, r24	; 0x27
    25f6:	98 a7       	std	Y+40, r25	; 0x28
    25f8:	a9 a7       	std	Y+41, r26	; 0x29
    25fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	6f a1       	ldd	r22, Y+39	; 0x27
    25fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2600:	89 a5       	ldd	r24, Y+41	; 0x29
    2602:	9a a5       	ldd	r25, Y+42	; 0x2a
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	4a ef       	ldi	r20, 0xFA	; 250
    260a:	54 e4       	ldi	r21, 0x44	; 68
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	8b a3       	std	Y+35, r24	; 0x23
    2616:	9c a3       	std	Y+36, r25	; 0x24
    2618:	ad a3       	std	Y+37, r26	; 0x25
    261a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    261c:	6b a1       	ldd	r22, Y+35	; 0x23
    261e:	7c a1       	ldd	r23, Y+36	; 0x24
    2620:	8d a1       	ldd	r24, Y+37	; 0x25
    2622:	9e a1       	ldd	r25, Y+38	; 0x26
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	2c f4       	brge	.+10     	; 0x263e <LCD_displayCharacter+0x160>
		__ticks = 1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9a a3       	std	Y+34, r25	; 0x22
    263a:	89 a3       	std	Y+33, r24	; 0x21
    263c:	3f c0       	rjmp	.+126    	; 0x26bc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    263e:	6b a1       	ldd	r22, Y+35	; 0x23
    2640:	7c a1       	ldd	r23, Y+36	; 0x24
    2642:	8d a1       	ldd	r24, Y+37	; 0x25
    2644:	9e a1       	ldd	r25, Y+38	; 0x26
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	4c f5       	brge	.+82     	; 0x26a8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6f a1       	ldd	r22, Y+39	; 0x27
    2658:	78 a5       	ldd	r23, Y+40	; 0x28
    265a:	89 a5       	ldd	r24, Y+41	; 0x29
    265c:	9a a5       	ldd	r25, Y+42	; 0x2a
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9a a3       	std	Y+34, r25	; 0x22
    267c:	89 a3       	std	Y+33, r24	; 0x21
    267e:	0f c0       	rjmp	.+30     	; 0x269e <LCD_displayCharacter+0x1c0>
    2680:	88 ec       	ldi	r24, 0xC8	; 200
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	98 a3       	std	Y+32, r25	; 0x20
    2686:	8f 8f       	std	Y+31, r24	; 0x1f
    2688:	8f 8d       	ldd	r24, Y+31	; 0x1f
    268a:	98 a1       	ldd	r25, Y+32	; 0x20
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_displayCharacter+0x1ae>
    2690:	98 a3       	std	Y+32, r25	; 0x20
    2692:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	89 a1       	ldd	r24, Y+33	; 0x21
    2696:	9a a1       	ldd	r25, Y+34	; 0x22
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9a a3       	std	Y+34, r25	; 0x22
    269c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	89 a1       	ldd	r24, Y+33	; 0x21
    26a0:	9a a1       	ldd	r25, Y+34	; 0x22
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	69 f7       	brne	.-38     	; 0x2680 <LCD_displayCharacter+0x1a2>
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a8:	6b a1       	ldd	r22, Y+35	; 0x23
    26aa:	7c a1       	ldd	r23, Y+36	; 0x24
    26ac:	8d a1       	ldd	r24, Y+37	; 0x25
    26ae:	9e a1       	ldd	r25, Y+38	; 0x26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9a a3       	std	Y+34, r25	; 0x22
    26ba:	89 a3       	std	Y+33, r24	; 0x21
    26bc:	89 a1       	ldd	r24, Y+33	; 0x21
    26be:	9a a1       	ldd	r25, Y+34	; 0x22
    26c0:	9e 8f       	std	Y+30, r25	; 0x1e
    26c2:	8d 8f       	std	Y+29, r24	; 0x1d
    26c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_displayCharacter+0x1ea>
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	69 ad       	ldd	r22, Y+57	; 0x39
    26d4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <GPIO_writePort>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a0 e8       	ldi	r26, 0x80	; 128
    26de:	bf e3       	ldi	r27, 0x3F	; 63
    26e0:	89 8f       	std	Y+25, r24	; 0x19
    26e2:	9a 8f       	std	Y+26, r25	; 0x1a
    26e4:	ab 8f       	std	Y+27, r26	; 0x1b
    26e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a ef       	ldi	r20, 0xFA	; 250
    26f6:	54 e4       	ldi	r21, 0x44	; 68
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8d 8b       	std	Y+21, r24	; 0x15
    2702:	9e 8b       	std	Y+22, r25	; 0x16
    2704:	af 8b       	std	Y+23, r26	; 0x17
    2706:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2708:	6d 89       	ldd	r22, Y+21	; 0x15
    270a:	7e 89       	ldd	r23, Y+22	; 0x16
    270c:	8f 89       	ldd	r24, Y+23	; 0x17
    270e:	98 8d       	ldd	r25, Y+24	; 0x18
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271c:	88 23       	and	r24, r24
    271e:	2c f4       	brge	.+10     	; 0x272a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9c 8b       	std	Y+20, r25	; 0x14
    2726:	8b 8b       	std	Y+19, r24	; 0x13
    2728:	3f c0       	rjmp	.+126    	; 0x27a8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    272a:	6d 89       	ldd	r22, Y+21	; 0x15
    272c:	7e 89       	ldd	r23, Y+22	; 0x16
    272e:	8f 89       	ldd	r24, Y+23	; 0x17
    2730:	98 8d       	ldd	r25, Y+24	; 0x18
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	4c f5       	brge	.+82     	; 0x2794 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2742:	69 8d       	ldd	r22, Y+25	; 0x19
    2744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e2       	ldi	r20, 0x20	; 32
    2750:	51 e4       	ldi	r21, 0x41	; 65
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
    276a:	0f c0       	rjmp	.+30     	; 0x278a <LCD_displayCharacter+0x2ac>
    276c:	88 ec       	ldi	r24, 0xC8	; 200
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9a 8b       	std	Y+18, r25	; 0x12
    2772:	89 8b       	std	Y+17, r24	; 0x11
    2774:	89 89       	ldd	r24, Y+17	; 0x11
    2776:	9a 89       	ldd	r25, Y+18	; 0x12
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <LCD_displayCharacter+0x29a>
    277c:	9a 8b       	std	Y+18, r25	; 0x12
    277e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2780:	8b 89       	ldd	r24, Y+19	; 0x13
    2782:	9c 89       	ldd	r25, Y+20	; 0x14
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	8b 89       	ldd	r24, Y+19	; 0x13
    278c:	9c 89       	ldd	r25, Y+20	; 0x14
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	69 f7       	brne	.-38     	; 0x276c <LCD_displayCharacter+0x28e>
    2792:	14 c0       	rjmp	.+40     	; 0x27bc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2794:	6d 89       	ldd	r22, Y+21	; 0x15
    2796:	7e 89       	ldd	r23, Y+22	; 0x16
    2798:	8f 89       	ldd	r24, Y+23	; 0x17
    279a:	98 8d       	ldd	r25, Y+24	; 0x18
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9c 8b       	std	Y+20, r25	; 0x14
    27a6:	8b 8b       	std	Y+19, r24	; 0x13
    27a8:	8b 89       	ldd	r24, Y+19	; 0x13
    27aa:	9c 89       	ldd	r25, Y+20	; 0x14
    27ac:	98 8b       	std	Y+16, r25	; 0x10
    27ae:	8f 87       	std	Y+15, r24	; 0x0f
    27b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b2:	98 89       	ldd	r25, Y+16	; 0x10
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <LCD_displayCharacter+0x2d6>
    27b8:	98 8b       	std	Y+16, r25	; 0x10
    27ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27bc:	82 e0       	ldi	r24, 0x02	; 2
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	a0 e8       	ldi	r26, 0x80	; 128
    27cc:	bf e3       	ldi	r27, 0x3F	; 63
    27ce:	8b 87       	std	Y+11, r24	; 0x0b
    27d0:	9c 87       	std	Y+12, r25	; 0x0c
    27d2:	ad 87       	std	Y+13, r26	; 0x0d
    27d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27da:	8d 85       	ldd	r24, Y+13	; 0x0d
    27dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a ef       	ldi	r20, 0xFA	; 250
    27e4:	54 e4       	ldi	r21, 0x44	; 68
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8f 83       	std	Y+7, r24	; 0x07
    27f0:	98 87       	std	Y+8, r25	; 0x08
    27f2:	a9 87       	std	Y+9, r26	; 0x09
    27f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280a:	88 23       	and	r24, r24
    280c:	2c f4       	brge	.+10     	; 0x2818 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	3f c0       	rjmp	.+126    	; 0x2896 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2818:	6f 81       	ldd	r22, Y+7	; 0x07
    281a:	78 85       	ldd	r23, Y+8	; 0x08
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	4c f5       	brge	.+82     	; 0x2882 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	6b 85       	ldd	r22, Y+11	; 0x0b
    2832:	7c 85       	ldd	r23, Y+12	; 0x0c
    2834:	8d 85       	ldd	r24, Y+13	; 0x0d
    2836:	9e 85       	ldd	r25, Y+14	; 0x0e
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e2       	ldi	r20, 0x20	; 32
    283e:	51 e4       	ldi	r21, 0x41	; 65
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	0f c0       	rjmp	.+30     	; 0x2878 <LCD_displayCharacter+0x39a>
    285a:	88 ec       	ldi	r24, 0xC8	; 200
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_displayCharacter+0x388>
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	69 f7       	brne	.-38     	; 0x285a <LCD_displayCharacter+0x37c>
    2880:	14 c0       	rjmp	.+40     	; 0x28aa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_displayCharacter+0x3c4>
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28aa:	e9 96       	adiw	r28, 0x39	; 57
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <LCD_displayString+0x6>
    28c2:	0f 92       	push	r0
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	9b 83       	std	Y+3, r25	; 0x03
    28ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28cc:	19 82       	std	Y+1, r1	; 0x01
    28ce:	0e c0       	rjmp	.+28     	; 0x28ec <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	fc 01       	movw	r30, r24
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	80 81       	ld	r24, Z
    28e2:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_displayCharacter>
		i++;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	8f 5f       	subi	r24, 0xFF	; 255
    28ea:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	9b 81       	ldd	r25, Y+3	; 0x03
    28f6:	fc 01       	movw	r30, r24
    28f8:	e2 0f       	add	r30, r18
    28fa:	f3 1f       	adc	r31, r19
    28fc:	80 81       	ld	r24, Z
    28fe:	88 23       	and	r24, r24
    2900:	39 f7       	brne	.-50     	; 0x28d0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <LCD_moveCursor+0x6>
    2914:	00 d0       	rcall	.+0      	; 0x2916 <LCD_moveCursor+0x8>
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	8a 83       	std	Y+2, r24	; 0x02
    291e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	3d 83       	std	Y+5, r19	; 0x05
    2928:	2c 83       	std	Y+4, r18	; 0x04
    292a:	8c 81       	ldd	r24, Y+4	; 0x04
    292c:	9d 81       	ldd	r25, Y+5	; 0x05
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	91 05       	cpc	r25, r1
    2932:	c1 f0       	breq	.+48     	; 0x2964 <LCD_moveCursor+0x56>
    2934:	2c 81       	ldd	r18, Y+4	; 0x04
    2936:	3d 81       	ldd	r19, Y+5	; 0x05
    2938:	22 30       	cpi	r18, 0x02	; 2
    293a:	31 05       	cpc	r19, r1
    293c:	2c f4       	brge	.+10     	; 0x2948 <LCD_moveCursor+0x3a>
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	9d 81       	ldd	r25, Y+5	; 0x05
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	61 f0       	breq	.+24     	; 0x295e <LCD_moveCursor+0x50>
    2946:	19 c0       	rjmp	.+50     	; 0x297a <LCD_moveCursor+0x6c>
    2948:	2c 81       	ldd	r18, Y+4	; 0x04
    294a:	3d 81       	ldd	r19, Y+5	; 0x05
    294c:	22 30       	cpi	r18, 0x02	; 2
    294e:	31 05       	cpc	r19, r1
    2950:	69 f0       	breq	.+26     	; 0x296c <LCD_moveCursor+0x5e>
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	9d 81       	ldd	r25, Y+5	; 0x05
    2956:	83 30       	cpi	r24, 0x03	; 3
    2958:	91 05       	cpc	r25, r1
    295a:	61 f0       	breq	.+24     	; 0x2974 <LCD_moveCursor+0x66>
    295c:	0e c0       	rjmp	.+28     	; 0x297a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	0b c0       	rjmp	.+22     	; 0x297a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	80 5c       	subi	r24, 0xC0	; 192
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	07 c0       	rjmp	.+14     	; 0x297a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	80 5f       	subi	r24, 0xF0	; 240
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	03 c0       	rjmp	.+6      	; 0x297a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	80 5b       	subi	r24, 0xB0	; 176
    2978:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	80 68       	ori	r24, 0x80	; 128
    297e:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_sendCommand>
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	00 d0       	rcall	.+0      	; 0x2998 <LCD_displayStringRowColumn+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <LCD_displayStringRowColumn+0x8>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	6a 83       	std	Y+2, r22	; 0x02
    29a2:	5c 83       	std	Y+4, r21	; 0x04
    29a4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	6a 81       	ldd	r22, Y+2	; 0x02
    29aa:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
}
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	62 97       	sbiw	r28, 0x12	; 18
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	9a 8b       	std	Y+18, r25	; 0x12
    29da:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29dc:	89 89       	ldd	r24, Y+17	; 0x11
    29de:	9a 89       	ldd	r25, Y+18	; 0x12
    29e0:	9e 01       	movw	r18, r28
    29e2:	2f 5f       	subi	r18, 0xFF	; 255
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	b9 01       	movw	r22, r18
    29e8:	4a e0       	ldi	r20, 0x0A	; 10
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	0e 94 05 19 	call	0x320a	; 0x320a <itoa>
   LCD_displayString(buff); /* Display the string */
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_displayString>
}
    29f8:	62 96       	adiw	r28, 0x12	; 18
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_sendCommand>
}
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <Timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
static void (*g_timer0_callBackPtr)(void) = NULL_PTR;
static void (*g_timer1_callBackPtr)(void) = NULL_PTR;
static void (*g_timer2_callBackPtr)(void) = NULL_PTR;
void Timer_init(const Timer_ConfigType * Config_Ptr){
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <Timer_init+0x6>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <Timer_init+0x8>
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	9a 83       	std	Y+2, r25	; 0x02
    2a2c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID){
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	84 81       	ldd	r24, Z+4	; 0x04
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	3c 83       	std	Y+4, r19	; 0x04
    2a3a:	2b 83       	std	Y+3, r18	; 0x03
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	91 05       	cpc	r25, r1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <Timer_init+0x2a>
    2a46:	7a c0       	rjmp	.+244    	; 0x2b3c <Timer_init+0x11e>
    2a48:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4c:	22 30       	cpi	r18, 0x02	; 2
    2a4e:	31 05       	cpc	r19, r1
    2a50:	e9 f1       	breq	.+122    	; 0x2acc <Timer_init+0xae>
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <Timer_init+0x3e>
    2a5a:	b0 c0       	rjmp	.+352    	; 0x2bbc <Timer_init+0x19e>
	case TIMER0:
		TCCR0 |= Config_Ptr->timer_clock|Config_Ptr->timer_mode|(1<<FOC0);
    2a5c:	a3 e5       	ldi	r26, 0x53	; 83
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e3 e5       	ldi	r30, 0x53	; 83
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	20 81       	ld	r18, Z
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	95 81       	ldd	r25, Z+5	; 0x05
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a70:	86 81       	ldd	r24, Z+6	; 0x06
    2a72:	89 2b       	or	r24, r25
    2a74:	82 2b       	or	r24, r18
    2a76:	80 68       	ori	r24, 0x80	; 128
    2a78:	8c 93       	st	X, r24
		TCNT0=Config_Ptr->timer_InitialValue;
    2a7a:	a2 e5       	ldi	r26, 0x52	; 82
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a80:	fa 81       	ldd	r31, Y+2	; 0x02
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode==COMPARE){
    2a88:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8c:	86 81       	ldd	r24, Z+6	; 0x06
    2a8e:	88 30       	cpi	r24, 0x08	; 8
    2a90:	79 f4       	brne	.+30     	; 0x2ab0 <Timer_init+0x92>
			TIMSK|=(1<<OCIE0);
    2a92:	a9 e5       	ldi	r26, 0x59	; 89
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e9 e5       	ldi	r30, 0x59	; 89
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	82 60       	ori	r24, 0x02	; 2
    2a9e:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    2aa0:	ac e5       	ldi	r26, 0x5C	; 92
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	8c 93       	st	X, r24
    2aae:	86 c0       	rjmp	.+268    	; 0x2bbc <Timer_init+0x19e>
		}
		else if(Config_Ptr->timer_mode==NORMAL)
    2ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab4:	86 81       	ldd	r24, Z+6	; 0x06
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <Timer_init+0x9e>
    2aba:	80 c0       	rjmp	.+256    	; 0x2bbc <Timer_init+0x19e>
			TIMSK|=(1<<TOIE0);
    2abc:	a9 e5       	ldi	r26, 0x59	; 89
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e9 e5       	ldi	r30, 0x59	; 89
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	8c 93       	st	X, r24
    2aca:	78 c0       	rjmp	.+240    	; 0x2bbc <Timer_init+0x19e>
		break;
	case TIMER2:
		TCCR2 |= Config_Ptr->timer_clock|Config_Ptr->timer_mode|(1<<FOC2);
    2acc:	a5 e4       	ldi	r26, 0x45	; 69
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e5 e4       	ldi	r30, 0x45	; 69
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	20 81       	ld	r18, Z
    2ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ada:	95 81       	ldd	r25, Z+5	; 0x05
    2adc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ade:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae0:	86 81       	ldd	r24, Z+6	; 0x06
    2ae2:	89 2b       	or	r24, r25
    2ae4:	82 2b       	or	r24, r18
    2ae6:	80 68       	ori	r24, 0x80	; 128
    2ae8:	8c 93       	st	X, r24
		TCNT2=Config_Ptr->timer_InitialValue;
    2aea:	a4 e4       	ldi	r26, 0x44	; 68
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e9 81       	ldd	r30, Y+1	; 0x01
    2af0:	fa 81       	ldd	r31, Y+2	; 0x02
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode==COMPARE){
    2af8:	e9 81       	ldd	r30, Y+1	; 0x01
    2afa:	fa 81       	ldd	r31, Y+2	; 0x02
    2afc:	86 81       	ldd	r24, Z+6	; 0x06
    2afe:	88 30       	cpi	r24, 0x08	; 8
    2b00:	79 f4       	brne	.+30     	; 0x2b20 <Timer_init+0x102>
			TIMSK|=(1<<OCIE2);
    2b02:	a9 e5       	ldi	r26, 0x59	; 89
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e9 e5       	ldi	r30, 0x59	; 89
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	80 68       	ori	r24, 0x80	; 128
    2b0e:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    2b10:	a3 e4       	ldi	r26, 0x43	; 67
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e9 81       	ldd	r30, Y+1	; 0x01
    2b16:	fa 81       	ldd	r31, Y+2	; 0x02
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	8c 93       	st	X, r24
    2b1e:	4e c0       	rjmp	.+156    	; 0x2bbc <Timer_init+0x19e>
		}
		else if(Config_Ptr->timer_mode==NORMAL)
    2b20:	e9 81       	ldd	r30, Y+1	; 0x01
    2b22:	fa 81       	ldd	r31, Y+2	; 0x02
    2b24:	86 81       	ldd	r24, Z+6	; 0x06
    2b26:	88 23       	and	r24, r24
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <Timer_init+0x10e>
    2b2a:	48 c0       	rjmp	.+144    	; 0x2bbc <Timer_init+0x19e>
			TIMSK|=(1<<TOIE2);
    2b2c:	a9 e5       	ldi	r26, 0x59	; 89
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e9 e5       	ldi	r30, 0x59	; 89
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	80 64       	ori	r24, 0x40	; 64
    2b38:	8c 93       	st	X, r24
    2b3a:	40 c0       	rjmp	.+128    	; 0x2bbc <Timer_init+0x19e>
		break;
	case TIMER1:
		TCCR1B |=Config_Ptr->timer_clock|Config_Ptr->timer_mode;
    2b3c:	ae e4       	ldi	r26, 0x4E	; 78
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	ee e4       	ldi	r30, 0x4E	; 78
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	20 81       	ld	r18, Z
    2b46:	e9 81       	ldd	r30, Y+1	; 0x01
    2b48:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4a:	95 81       	ldd	r25, Z+5	; 0x05
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	86 81       	ldd	r24, Z+6	; 0x06
    2b52:	89 2b       	or	r24, r25
    2b54:	82 2b       	or	r24, r18
    2b56:	8c 93       	st	X, r24
        TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    2b58:	af e4       	ldi	r26, 0x4F	; 79
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ef e4       	ldi	r30, 0x4F	; 79
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8c 60       	ori	r24, 0x0C	; 12
    2b64:	8c 93       	st	X, r24
		TCNT1=Config_Ptr->timer_InitialValue;
    2b66:	ac e4       	ldi	r26, 0x4C	; 76
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	11 96       	adiw	r26, 0x01	; 1
    2b74:	9c 93       	st	X, r25
    2b76:	8e 93       	st	-X, r24
		if(Config_Ptr->timer_mode==COMPARE){
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	86 81       	ldd	r24, Z+6	; 0x06
    2b7e:	88 30       	cpi	r24, 0x08	; 8
    2b80:	89 f4       	brne	.+34     	; 0x2ba4 <Timer_init+0x186>
			TIMSK|=(1<<OCIE1A);
    2b82:	a9 e5       	ldi	r26, 0x59	; 89
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e9 e5       	ldi	r30, 0x59	; 89
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	80 61       	ori	r24, 0x10	; 16
    2b8e:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    2b90:	aa e4       	ldi	r26, 0x4A	; 74
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e9 81       	ldd	r30, Y+1	; 0x01
    2b96:	fa 81       	ldd	r31, Y+2	; 0x02
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	11 96       	adiw	r26, 0x01	; 1
    2b9e:	9c 93       	st	X, r25
    2ba0:	8e 93       	st	-X, r24
    2ba2:	0c c0       	rjmp	.+24     	; 0x2bbc <Timer_init+0x19e>
		}
		else if(Config_Ptr->timer_mode==NORMAL)
    2ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba8:	86 81       	ldd	r24, Z+6	; 0x06
    2baa:	88 23       	and	r24, r24
    2bac:	39 f4       	brne	.+14     	; 0x2bbc <Timer_init+0x19e>
			TIMSK|=(1<<TOIE1);
    2bae:	a9 e5       	ldi	r26, 0x59	; 89
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e9 e5       	ldi	r30, 0x59	; 89
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	84 60       	ori	r24, 0x04	; 4
    2bba:	8c 93       	st	X, r24
	}
}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type) {
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <Timer_deInit+0x6>
    2bd0:	0f 92       	push	r0
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	3b 83       	std	Y+3, r19	; 0x03
    2be0:	2a 83       	std	Y+2, r18	; 0x02
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	91 05       	cpc	r25, r1
    2bea:	d9 f0       	breq	.+54     	; 0x2c22 <Timer_deInit+0x58>
    2bec:	2a 81       	ldd	r18, Y+2	; 0x02
    2bee:	3b 81       	ldd	r19, Y+3	; 0x03
    2bf0:	22 30       	cpi	r18, 0x02	; 2
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	61 f1       	breq	.+88     	; 0x2c4e <Timer_deInit+0x84>
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	c9 f5       	brne	.+114    	; 0x2c70 <Timer_deInit+0xa6>
        case TIMER0:
            TCCR0 = 0;
    2bfe:	e3 e5       	ldi	r30, 0x53	; 83
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	10 82       	st	Z, r1
            TCNT0 = 0;
    2c04:	e2 e5       	ldi	r30, 0x52	; 82
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    2c0a:	a9 e5       	ldi	r26, 0x59	; 89
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e9 e5       	ldi	r30, 0x59	; 89
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	8c 7f       	andi	r24, 0xFC	; 252
    2c16:	8c 93       	st	X, r24
            g_timer0_callBackPtr = NULL_PTR;
    2c18:	10 92 2a 01 	sts	0x012A, r1
    2c1c:	10 92 29 01 	sts	0x0129, r1
    2c20:	27 c0       	rjmp	.+78     	; 0x2c70 <Timer_deInit+0xa6>
            break;

        case TIMER1:
            TCCR1A = 0;
    2c22:	ef e4       	ldi	r30, 0x4F	; 79
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	10 82       	st	Z, r1
            TCCR1B = 0;
    2c28:	ee e4       	ldi	r30, 0x4E	; 78
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	10 82       	st	Z, r1
            TCNT1 = 0;
    2c2e:	ec e4       	ldi	r30, 0x4C	; 76
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	11 82       	std	Z+1, r1	; 0x01
    2c34:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));
    2c36:	a9 e5       	ldi	r26, 0x59	; 89
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e9 e5       	ldi	r30, 0x59	; 89
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	8b 7e       	andi	r24, 0xEB	; 235
    2c42:	8c 93       	st	X, r24
            g_timer1_callBackPtr = NULL_PTR;
    2c44:	10 92 2c 01 	sts	0x012C, r1
    2c48:	10 92 2b 01 	sts	0x012B, r1
    2c4c:	11 c0       	rjmp	.+34     	; 0x2c70 <Timer_deInit+0xa6>
            break;

        case TIMER2:
            TCCR2 = 0;
    2c4e:	e5 e4       	ldi	r30, 0x45	; 69
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	10 82       	st	Z, r1
            TCNT2 = 0;
    2c54:	e4 e4       	ldi	r30, 0x44	; 68
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));
    2c5a:	a9 e5       	ldi	r26, 0x59	; 89
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e9 e5       	ldi	r30, 0x59	; 89
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8f 73       	andi	r24, 0x3F	; 63
    2c66:	8c 93       	st	X, r24
            g_timer2_callBackPtr = NULL_PTR;
    2c68:	10 92 2e 01 	sts	0x012E, r1
    2c6c:	10 92 2d 01 	sts	0x012D, r1
            break;
    }
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <Timer_setCallBack>:
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <Timer_setCallBack+0x6>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <Timer_setCallBack+0x8>
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	3d 83       	std	Y+5, r19	; 0x05
    2c98:	2c 83       	std	Y+4, r18	; 0x04
    2c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	81 f0       	breq	.+32     	; 0x2cc4 <Timer_setCallBack+0x48>
    2ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	91 f0       	breq	.+36     	; 0x2cd2 <Timer_setCallBack+0x56>
    2cae:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	a1 f4       	brne	.+40     	; 0x2cde <Timer_setCallBack+0x62>
        case TIMER0:
            g_timer0_callBackPtr = a_ptr;
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	90 93 2a 01 	sts	0x012A, r25
    2cbe:	80 93 29 01 	sts	0x0129, r24
    2cc2:	0d c0       	rjmp	.+26     	; 0x2cde <Timer_setCallBack+0x62>
            break;

        case TIMER1:
            g_timer1_callBackPtr = a_ptr;
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	90 93 2c 01 	sts	0x012C, r25
    2ccc:	80 93 2b 01 	sts	0x012B, r24
    2cd0:	06 c0       	rjmp	.+12     	; 0x2cde <Timer_setCallBack+0x62>
            break;

        case TIMER2:
            g_timer2_callBackPtr = a_ptr;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	90 93 2e 01 	sts	0x012E, r25
    2cda:	80 93 2d 01 	sts	0x012D, r24
            break;
    }
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <__vector_11>:

ISR(TIMER0_OVF_vect) {
    2cee:	1f 92       	push	r1
    2cf0:	0f 92       	push	r0
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	0f 92       	push	r0
    2cf6:	11 24       	eor	r1, r1
    2cf8:	2f 93       	push	r18
    2cfa:	3f 93       	push	r19
    2cfc:	4f 93       	push	r20
    2cfe:	5f 93       	push	r21
    2d00:	6f 93       	push	r22
    2d02:	7f 93       	push	r23
    2d04:	8f 93       	push	r24
    2d06:	9f 93       	push	r25
    2d08:	af 93       	push	r26
    2d0a:	bf 93       	push	r27
    2d0c:	ef 93       	push	r30
    2d0e:	ff 93       	push	r31
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    if (g_timer0_callBackPtr != NULL_PTR) {
    2d18:	80 91 29 01 	lds	r24, 0x0129
    2d1c:	90 91 2a 01 	lds	r25, 0x012A
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	29 f0       	breq	.+10     	; 0x2d2e <__vector_11+0x40>
        (*g_timer0_callBackPtr)();
    2d24:	e0 91 29 01 	lds	r30, 0x0129
    2d28:	f0 91 2a 01 	lds	r31, 0x012A
    2d2c:	09 95       	icall
    }
}
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	ff 91       	pop	r31
    2d34:	ef 91       	pop	r30
    2d36:	bf 91       	pop	r27
    2d38:	af 91       	pop	r26
    2d3a:	9f 91       	pop	r25
    2d3c:	8f 91       	pop	r24
    2d3e:	7f 91       	pop	r23
    2d40:	6f 91       	pop	r22
    2d42:	5f 91       	pop	r21
    2d44:	4f 91       	pop	r20
    2d46:	3f 91       	pop	r19
    2d48:	2f 91       	pop	r18
    2d4a:	0f 90       	pop	r0
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	0f 90       	pop	r0
    2d50:	1f 90       	pop	r1
    2d52:	18 95       	reti

00002d54 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    2d54:	1f 92       	push	r1
    2d56:	0f 92       	push	r0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	0f 92       	push	r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	2f 93       	push	r18
    2d60:	3f 93       	push	r19
    2d62:	4f 93       	push	r20
    2d64:	5f 93       	push	r21
    2d66:	6f 93       	push	r22
    2d68:	7f 93       	push	r23
    2d6a:	8f 93       	push	r24
    2d6c:	9f 93       	push	r25
    2d6e:	af 93       	push	r26
    2d70:	bf 93       	push	r27
    2d72:	ef 93       	push	r30
    2d74:	ff 93       	push	r31
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    if (g_timer0_callBackPtr != NULL_PTR) {
    2d7e:	80 91 29 01 	lds	r24, 0x0129
    2d82:	90 91 2a 01 	lds	r25, 0x012A
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	29 f0       	breq	.+10     	; 0x2d94 <__vector_10+0x40>
        (*g_timer0_callBackPtr)();
    2d8a:	e0 91 29 01 	lds	r30, 0x0129
    2d8e:	f0 91 2a 01 	lds	r31, 0x012A
    2d92:	09 95       	icall
    }
}
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	ff 91       	pop	r31
    2d9a:	ef 91       	pop	r30
    2d9c:	bf 91       	pop	r27
    2d9e:	af 91       	pop	r26
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	7f 91       	pop	r23
    2da6:	6f 91       	pop	r22
    2da8:	5f 91       	pop	r21
    2daa:	4f 91       	pop	r20
    2dac:	3f 91       	pop	r19
    2dae:	2f 91       	pop	r18
    2db0:	0f 90       	pop	r0
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	0f 90       	pop	r0
    2db6:	1f 90       	pop	r1
    2db8:	18 95       	reti

00002dba <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2dba:	1f 92       	push	r1
    2dbc:	0f 92       	push	r0
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	0f 92       	push	r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	2f 93       	push	r18
    2dc6:	3f 93       	push	r19
    2dc8:	4f 93       	push	r20
    2dca:	5f 93       	push	r21
    2dcc:	6f 93       	push	r22
    2dce:	7f 93       	push	r23
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	af 93       	push	r26
    2dd6:	bf 93       	push	r27
    2dd8:	ef 93       	push	r30
    2dda:	ff 93       	push	r31
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    if (g_timer1_callBackPtr != NULL_PTR) {
    2de4:	80 91 2b 01 	lds	r24, 0x012B
    2de8:	90 91 2c 01 	lds	r25, 0x012C
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	29 f0       	breq	.+10     	; 0x2dfa <__vector_9+0x40>
        (*g_timer1_callBackPtr)();
    2df0:	e0 91 2b 01 	lds	r30, 0x012B
    2df4:	f0 91 2c 01 	lds	r31, 0x012C
    2df8:	09 95       	icall
    }
}
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	ff 91       	pop	r31
    2e00:	ef 91       	pop	r30
    2e02:	bf 91       	pop	r27
    2e04:	af 91       	pop	r26
    2e06:	9f 91       	pop	r25
    2e08:	8f 91       	pop	r24
    2e0a:	7f 91       	pop	r23
    2e0c:	6f 91       	pop	r22
    2e0e:	5f 91       	pop	r21
    2e10:	4f 91       	pop	r20
    2e12:	3f 91       	pop	r19
    2e14:	2f 91       	pop	r18
    2e16:	0f 90       	pop	r0
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	0f 90       	pop	r0
    2e1c:	1f 90       	pop	r1
    2e1e:	18 95       	reti

00002e20 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    2e20:	1f 92       	push	r1
    2e22:	0f 92       	push	r0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	0f 92       	push	r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	4f 93       	push	r20
    2e30:	5f 93       	push	r21
    2e32:	6f 93       	push	r22
    2e34:	7f 93       	push	r23
    2e36:	8f 93       	push	r24
    2e38:	9f 93       	push	r25
    2e3a:	af 93       	push	r26
    2e3c:	bf 93       	push	r27
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    if (g_timer1_callBackPtr != NULL_PTR) {
    2e4a:	80 91 2b 01 	lds	r24, 0x012B
    2e4e:	90 91 2c 01 	lds	r25, 0x012C
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	29 f0       	breq	.+10     	; 0x2e60 <__vector_7+0x40>
        (*g_timer1_callBackPtr)();
    2e56:	e0 91 2b 01 	lds	r30, 0x012B
    2e5a:	f0 91 2c 01 	lds	r31, 0x012C
    2e5e:	09 95       	icall
    }
}
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	bf 91       	pop	r27
    2e6a:	af 91       	pop	r26
    2e6c:	9f 91       	pop	r25
    2e6e:	8f 91       	pop	r24
    2e70:	7f 91       	pop	r23
    2e72:	6f 91       	pop	r22
    2e74:	5f 91       	pop	r21
    2e76:	4f 91       	pop	r20
    2e78:	3f 91       	pop	r19
    2e7a:	2f 91       	pop	r18
    2e7c:	0f 90       	pop	r0
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	0f 90       	pop	r0
    2e82:	1f 90       	pop	r1
    2e84:	18 95       	reti

00002e86 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	0f 92       	push	r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	4f 93       	push	r20
    2e96:	5f 93       	push	r21
    2e98:	6f 93       	push	r22
    2e9a:	7f 93       	push	r23
    2e9c:	8f 93       	push	r24
    2e9e:	9f 93       	push	r25
    2ea0:	af 93       	push	r26
    2ea2:	bf 93       	push	r27
    2ea4:	ef 93       	push	r30
    2ea6:	ff 93       	push	r31
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    if (g_timer2_callBackPtr != NULL_PTR) {
    2eb0:	80 91 2d 01 	lds	r24, 0x012D
    2eb4:	90 91 2e 01 	lds	r25, 0x012E
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	29 f0       	breq	.+10     	; 0x2ec6 <__vector_5+0x40>
        (*g_timer2_callBackPtr)();
    2ebc:	e0 91 2d 01 	lds	r30, 0x012D
    2ec0:	f0 91 2e 01 	lds	r31, 0x012E
    2ec4:	09 95       	icall
    }
}
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	ff 91       	pop	r31
    2ecc:	ef 91       	pop	r30
    2ece:	bf 91       	pop	r27
    2ed0:	af 91       	pop	r26
    2ed2:	9f 91       	pop	r25
    2ed4:	8f 91       	pop	r24
    2ed6:	7f 91       	pop	r23
    2ed8:	6f 91       	pop	r22
    2eda:	5f 91       	pop	r21
    2edc:	4f 91       	pop	r20
    2ede:	3f 91       	pop	r19
    2ee0:	2f 91       	pop	r18
    2ee2:	0f 90       	pop	r0
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	0f 90       	pop	r0
    2ee8:	1f 90       	pop	r1
    2eea:	18 95       	reti

00002eec <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2eec:	1f 92       	push	r1
    2eee:	0f 92       	push	r0
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	0f 92       	push	r0
    2ef4:	11 24       	eor	r1, r1
    2ef6:	2f 93       	push	r18
    2ef8:	3f 93       	push	r19
    2efa:	4f 93       	push	r20
    2efc:	5f 93       	push	r21
    2efe:	6f 93       	push	r22
    2f00:	7f 93       	push	r23
    2f02:	8f 93       	push	r24
    2f04:	9f 93       	push	r25
    2f06:	af 93       	push	r26
    2f08:	bf 93       	push	r27
    2f0a:	ef 93       	push	r30
    2f0c:	ff 93       	push	r31
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    if (g_timer2_callBackPtr != NULL_PTR) {
    2f16:	80 91 2d 01 	lds	r24, 0x012D
    2f1a:	90 91 2e 01 	lds	r25, 0x012E
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	29 f0       	breq	.+10     	; 0x2f2c <__vector_4+0x40>
        (*g_timer2_callBackPtr)();
    2f22:	e0 91 2d 01 	lds	r30, 0x012D
    2f26:	f0 91 2e 01 	lds	r31, 0x012E
    2f2a:	09 95       	icall
    }
}
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	ff 91       	pop	r31
    2f32:	ef 91       	pop	r30
    2f34:	bf 91       	pop	r27
    2f36:	af 91       	pop	r26
    2f38:	9f 91       	pop	r25
    2f3a:	8f 91       	pop	r24
    2f3c:	7f 91       	pop	r23
    2f3e:	6f 91       	pop	r22
    2f40:	5f 91       	pop	r21
    2f42:	4f 91       	pop	r20
    2f44:	3f 91       	pop	r19
    2f46:	2f 91       	pop	r18
    2f48:	0f 90       	pop	r0
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	0f 90       	pop	r0
    2f4e:	1f 90       	pop	r1
    2f50:	18 95       	reti

00002f52 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <UART_init+0x6>
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <UART_init+0x8>
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f62:	1a 82       	std	Y+2, r1	; 0x02
    2f64:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f66:	eb e2       	ldi	r30, 0x2B	; 43
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f6e:	ea e2       	ldi	r30, 0x2A	; 42
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	88 e1       	ldi	r24, 0x18	; 24
    2f74:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	if(Config_Ptr->bit_data!=UART_9_BIT_DATA)
    2f76:	eb 81       	ldd	r30, Y+3	; 0x03
    2f78:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8a 30       	cpi	r24, 0x0A	; 10
    2f7e:	81 f0       	breq	.+32     	; 0x2fa0 <UART_init+0x4e>
		UCSRC = (1<<URSEL)|Config_Ptr->bit_data|Config_Ptr->parity|Config_Ptr->stop_bit ;
    2f80:	a0 e4       	ldi	r26, 0x40	; 64
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	eb 81       	ldd	r30, Y+3	; 0x03
    2f86:	fc 81       	ldd	r31, Y+4	; 0x04
    2f88:	90 81       	ld	r25, Z
    2f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8e:	81 81       	ldd	r24, Z+1	; 0x01
    2f90:	98 2b       	or	r25, r24
    2f92:	eb 81       	ldd	r30, Y+3	; 0x03
    2f94:	fc 81       	ldd	r31, Y+4	; 0x04
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	89 2b       	or	r24, r25
    2f9a:	80 68       	ori	r24, 0x80	; 128
    2f9c:	8c 93       	st	X, r24
    2f9e:	17 c0       	rjmp	.+46     	; 0x2fce <UART_init+0x7c>
	else if(Config_Ptr->bit_data==UART_9_BIT_DATA){
    2fa0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8a 30       	cpi	r24, 0x0A	; 10
    2fa8:	91 f4       	brne	.+36     	; 0x2fce <UART_init+0x7c>
		UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)|Config_Ptr->parity|Config_Ptr->stop_bit;
    2faa:	a0 e4       	ldi	r26, 0x40	; 64
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	89 2b       	or	r24, r25
    2fbc:	86 68       	ori	r24, 0x86	; 134
    2fbe:	8c 93       	st	X, r24
		UCSRB|=(1<<UCSZ2);
    2fc0:	aa e2       	ldi	r26, 0x2A	; 42
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	ea e2       	ldi	r30, 0x2A	; 42
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	84 60       	ori	r24, 0x04	; 4
    2fcc:	8c 93       	st	X, r24
	}


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2fce:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd2:	83 81       	ldd	r24, Z+3	; 0x03
    2fd4:	94 81       	ldd	r25, Z+4	; 0x04
    2fd6:	a5 81       	ldd	r26, Z+5	; 0x05
    2fd8:	b6 81       	ldd	r27, Z+6	; 0x06
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	aa 1f       	adc	r26, r26
    2fe0:	bb 1f       	adc	r27, r27
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	aa 1f       	adc	r26, r26
    2fe8:	bb 1f       	adc	r27, r27
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	aa 1f       	adc	r26, r26
    2ff0:	bb 1f       	adc	r27, r27
    2ff2:	9c 01       	movw	r18, r24
    2ff4:	ad 01       	movw	r20, r26
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	92 e1       	ldi	r25, 0x12	; 18
    2ffa:	aa e7       	ldi	r26, 0x7A	; 122
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    3006:	da 01       	movw	r26, r20
    3008:	c9 01       	movw	r24, r18
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3010:	e0 e4       	ldi	r30, 0x40	; 64
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	9a 81       	ldd	r25, Y+2	; 0x02
    3018:	89 2f       	mov	r24, r25
    301a:	99 27       	eor	r25, r25
    301c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    301e:	e9 e2       	ldi	r30, 0x29	; 41
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	80 83       	st	Z, r24
}
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	0f 92       	push	r0
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3040:	eb e2       	ldi	r30, 0x2B	; 43
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	80 72       	andi	r24, 0x20	; 32
    304c:	90 70       	andi	r25, 0x00	; 0
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	b9 f3       	breq	.-18     	; 0x3040 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3052:	ec e2       	ldi	r30, 0x2C	; 44
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    305a:	0f 90       	pop	r0
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    306a:	eb e2       	ldi	r30, 0x2B	; 43
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	88 23       	and	r24, r24
    3072:	dc f7       	brge	.-10     	; 0x306a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3074:	ec e2       	ldi	r30, 0x2C	; 44
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
}
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <UART_sendString+0x6>
    3086:	0f 92       	push	r0
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3090:	19 82       	std	Y+1, r1	; 0x01
    3092:	0e c0       	rjmp	.+28     	; 0x30b0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	9b 81       	ldd	r25, Y+3	; 0x03
    309e:	fc 01       	movw	r30, r24
    30a0:	e2 0f       	add	r30, r18
    30a2:	f3 1f       	adc	r31, r19
    30a4:	80 81       	ld	r24, Z
    30a6:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_sendByte>
		i++;
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	8f 5f       	subi	r24, 0xFF	; 255
    30ae:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	fc 01       	movw	r30, r24
    30bc:	e2 0f       	add	r30, r18
    30be:	f3 1f       	adc	r31, r19
    30c0:	80 81       	ld	r24, Z
    30c2:	88 23       	and	r24, r24
    30c4:	39 f7       	brne	.-50     	; 0x3094 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    30d2:	0f 93       	push	r16
    30d4:	1f 93       	push	r17
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	00 d0       	rcall	.+0      	; 0x30dc <UART_receiveString+0xa>
    30dc:	0f 92       	push	r0
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	9b 83       	std	Y+3, r25	; 0x03
    30e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30e6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	8c 01       	movw	r16, r24
    30f4:	02 0f       	add	r16, r18
    30f6:	13 1f       	adc	r17, r19
    30f8:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    30fc:	f8 01       	movw	r30, r16
    30fe:	80 83       	st	Z, r24
    3100:	0f c0       	rjmp	.+30     	; 0x3120 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	8f 5f       	subi	r24, 0xFF	; 255
    3106:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	9b 81       	ldd	r25, Y+3	; 0x03
    3112:	8c 01       	movw	r16, r24
    3114:	02 0f       	add	r16, r18
    3116:	13 1f       	adc	r17, r19
    3118:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_recieveByte>
    311c:	f8 01       	movw	r30, r16
    311e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	fc 01       	movw	r30, r24
    312c:	e2 0f       	add	r30, r18
    312e:	f3 1f       	adc	r31, r19
    3130:	80 81       	ld	r24, Z
    3132:	83 32       	cpi	r24, 0x23	; 35
    3134:	31 f7       	brne	.-52     	; 0x3102 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	9b 81       	ldd	r25, Y+3	; 0x03
    3140:	fc 01       	movw	r30, r24
    3142:	e2 0f       	add	r30, r18
    3144:	f3 1f       	adc	r31, r19
    3146:	10 82       	st	Z, r1
}
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	08 95       	ret

00003158 <__udivmodsi4>:
    3158:	a1 e2       	ldi	r26, 0x21	; 33
    315a:	1a 2e       	mov	r1, r26
    315c:	aa 1b       	sub	r26, r26
    315e:	bb 1b       	sub	r27, r27
    3160:	fd 01       	movw	r30, r26
    3162:	0d c0       	rjmp	.+26     	; 0x317e <__udivmodsi4_ep>

00003164 <__udivmodsi4_loop>:
    3164:	aa 1f       	adc	r26, r26
    3166:	bb 1f       	adc	r27, r27
    3168:	ee 1f       	adc	r30, r30
    316a:	ff 1f       	adc	r31, r31
    316c:	a2 17       	cp	r26, r18
    316e:	b3 07       	cpc	r27, r19
    3170:	e4 07       	cpc	r30, r20
    3172:	f5 07       	cpc	r31, r21
    3174:	20 f0       	brcs	.+8      	; 0x317e <__udivmodsi4_ep>
    3176:	a2 1b       	sub	r26, r18
    3178:	b3 0b       	sbc	r27, r19
    317a:	e4 0b       	sbc	r30, r20
    317c:	f5 0b       	sbc	r31, r21

0000317e <__udivmodsi4_ep>:
    317e:	66 1f       	adc	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	1a 94       	dec	r1
    3188:	69 f7       	brne	.-38     	; 0x3164 <__udivmodsi4_loop>
    318a:	60 95       	com	r22
    318c:	70 95       	com	r23
    318e:	80 95       	com	r24
    3190:	90 95       	com	r25
    3192:	9b 01       	movw	r18, r22
    3194:	ac 01       	movw	r20, r24
    3196:	bd 01       	movw	r22, r26
    3198:	cf 01       	movw	r24, r30
    319a:	08 95       	ret

0000319c <__prologue_saves__>:
    319c:	2f 92       	push	r2
    319e:	3f 92       	push	r3
    31a0:	4f 92       	push	r4
    31a2:	5f 92       	push	r5
    31a4:	6f 92       	push	r6
    31a6:	7f 92       	push	r7
    31a8:	8f 92       	push	r8
    31aa:	9f 92       	push	r9
    31ac:	af 92       	push	r10
    31ae:	bf 92       	push	r11
    31b0:	cf 92       	push	r12
    31b2:	df 92       	push	r13
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	ca 1b       	sub	r28, r26
    31c6:	db 0b       	sbc	r29, r27
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	09 94       	ijmp

000031d4 <__epilogue_restores__>:
    31d4:	2a 88       	ldd	r2, Y+18	; 0x12
    31d6:	39 88       	ldd	r3, Y+17	; 0x11
    31d8:	48 88       	ldd	r4, Y+16	; 0x10
    31da:	5f 84       	ldd	r5, Y+15	; 0x0f
    31dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    31de:	7d 84       	ldd	r7, Y+13	; 0x0d
    31e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    31e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e6:	b9 84       	ldd	r11, Y+9	; 0x09
    31e8:	c8 84       	ldd	r12, Y+8	; 0x08
    31ea:	df 80       	ldd	r13, Y+7	; 0x07
    31ec:	ee 80       	ldd	r14, Y+6	; 0x06
    31ee:	fd 80       	ldd	r15, Y+5	; 0x05
    31f0:	0c 81       	ldd	r16, Y+4	; 0x04
    31f2:	1b 81       	ldd	r17, Y+3	; 0x03
    31f4:	aa 81       	ldd	r26, Y+2	; 0x02
    31f6:	b9 81       	ldd	r27, Y+1	; 0x01
    31f8:	ce 0f       	add	r28, r30
    31fa:	d1 1d       	adc	r29, r1
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	ed 01       	movw	r28, r26
    3208:	08 95       	ret

0000320a <itoa>:
    320a:	fb 01       	movw	r30, r22
    320c:	9f 01       	movw	r18, r30
    320e:	e8 94       	clt
    3210:	42 30       	cpi	r20, 0x02	; 2
    3212:	c4 f0       	brlt	.+48     	; 0x3244 <itoa+0x3a>
    3214:	45 32       	cpi	r20, 0x25	; 37
    3216:	b4 f4       	brge	.+44     	; 0x3244 <itoa+0x3a>
    3218:	4a 30       	cpi	r20, 0x0A	; 10
    321a:	29 f4       	brne	.+10     	; 0x3226 <itoa+0x1c>
    321c:	97 fb       	bst	r25, 7
    321e:	1e f4       	brtc	.+6      	; 0x3226 <itoa+0x1c>
    3220:	90 95       	com	r25
    3222:	81 95       	neg	r24
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	64 2f       	mov	r22, r20
    3228:	77 27       	eor	r23, r23
    322a:	0e 94 36 19 	call	0x326c	; 0x326c <__udivmodhi4>
    322e:	80 5d       	subi	r24, 0xD0	; 208
    3230:	8a 33       	cpi	r24, 0x3A	; 58
    3232:	0c f0       	brlt	.+2      	; 0x3236 <itoa+0x2c>
    3234:	89 5d       	subi	r24, 0xD9	; 217
    3236:	81 93       	st	Z+, r24
    3238:	cb 01       	movw	r24, r22
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	a1 f7       	brne	.-24     	; 0x3226 <itoa+0x1c>
    323e:	16 f4       	brtc	.+4      	; 0x3244 <itoa+0x3a>
    3240:	5d e2       	ldi	r21, 0x2D	; 45
    3242:	51 93       	st	Z+, r21
    3244:	10 82       	st	Z, r1
    3246:	c9 01       	movw	r24, r18
    3248:	0c 94 26 19 	jmp	0x324c	; 0x324c <strrev>

0000324c <strrev>:
    324c:	dc 01       	movw	r26, r24
    324e:	fc 01       	movw	r30, r24
    3250:	67 2f       	mov	r22, r23
    3252:	71 91       	ld	r23, Z+
    3254:	77 23       	and	r23, r23
    3256:	e1 f7       	brne	.-8      	; 0x3250 <strrev+0x4>
    3258:	32 97       	sbiw	r30, 0x02	; 2
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <strrev+0x18>
    325c:	7c 91       	ld	r23, X
    325e:	6d 93       	st	X+, r22
    3260:	70 83       	st	Z, r23
    3262:	62 91       	ld	r22, -Z
    3264:	ae 17       	cp	r26, r30
    3266:	bf 07       	cpc	r27, r31
    3268:	c8 f3       	brcs	.-14     	; 0x325c <strrev+0x10>
    326a:	08 95       	ret

0000326c <__udivmodhi4>:
    326c:	aa 1b       	sub	r26, r26
    326e:	bb 1b       	sub	r27, r27
    3270:	51 e1       	ldi	r21, 0x11	; 17
    3272:	07 c0       	rjmp	.+14     	; 0x3282 <__udivmodhi4_ep>

00003274 <__udivmodhi4_loop>:
    3274:	aa 1f       	adc	r26, r26
    3276:	bb 1f       	adc	r27, r27
    3278:	a6 17       	cp	r26, r22
    327a:	b7 07       	cpc	r27, r23
    327c:	10 f0       	brcs	.+4      	; 0x3282 <__udivmodhi4_ep>
    327e:	a6 1b       	sub	r26, r22
    3280:	b7 0b       	sbc	r27, r23

00003282 <__udivmodhi4_ep>:
    3282:	88 1f       	adc	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	5a 95       	dec	r21
    3288:	a9 f7       	brne	.-22     	; 0x3274 <__udivmodhi4_loop>
    328a:	80 95       	com	r24
    328c:	90 95       	com	r25
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	08 95       	ret

00003294 <_exit>:
    3294:	f8 94       	cli

00003296 <__stop_program>:
    3296:	ff cf       	rjmp	.-2      	; 0x3296 <__stop_program>
